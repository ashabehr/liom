/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: sTeH_IDX5T87

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import MainHeader from "../../MainHeader"; // plasmic-import: 1YQK_N8j3twT/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import LineClomp from "../../LineClomp"; // plasmic-import: XsM8QG4wUKlk/component
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Load from "../../Load"; // plasmic-import: MJo5g_R-znVP/component

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSelfCare.module.css"; // plasmic-import: sTeH_IDX5T87/css

import Icon185Icon from "./icons/PlasmicIcon__Icon185"; // plasmic-import: 3QmHdQOUm1zK/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon188Icon from "./icons/PlasmicIcon__Icon188"; // plasmic-import: Ap0CNp82zKxk/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: DnjmD0szshuz/icon
import Icon138Icon from "./icons/PlasmicIcon__Icon138"; // plasmic-import: _v0CaTT-8IBc/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: liLrwe8fcuIp/icon
import Icon212Icon from "./icons/PlasmicIcon__Icon212"; // plasmic-import: EV8ARHn8m9ie/icon

createPlasmicElementProxy;

export type PlasmicSelfCare__VariantMembers = {};
export type PlasmicSelfCare__VariantsArgs = {};
type VariantPropType = keyof PlasmicSelfCare__VariantsArgs;
export const PlasmicSelfCare__VariantProps = new Array<VariantPropType>();

export type PlasmicSelfCare__ArgsType = {};
type ArgPropType = keyof PlasmicSelfCare__ArgsType;
export const PlasmicSelfCare__ArgProps = new Array<ArgPropType>();

export type PlasmicSelfCare__OverridesType = {
  root?: Flex__<"div">;
  mainHeader?: Flex__<typeof MainHeader>;
  sideEffect?: Flex__<typeof SideEffect>;
  lineClomp?: Flex__<typeof LineClomp>;
  button?: Flex__<typeof Button>;
  embedHtml?: Flex__<typeof Embed>;
  img?: Flex__<typeof PlasmicImg__>;
  lineClomp2?: Flex__<typeof LineClomp>;
  load?: Flex__<typeof Load>;
};

export interface DefaultSelfCareProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelfCare__RenderFunc(props: {
  variants: PlasmicSelfCare__VariantsArgs;
  args: PlasmicSelfCare__ArgsType;
  overrides: PlasmicSelfCare__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "number",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "relation",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "hamyar"
      },
      {
        path: "masseg",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "errror",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "popoverOpen",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [false, false]
      },
      {
        path: "removeItem",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loadingBtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "v",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "mainHeader.dopen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.dopen;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "button[].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "care",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "lineClomp[].line",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "selfCare2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({ loading: true })
      },
      {
        path: "tools",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                {
                  type: "#inAppWebView",
                  action: `/self-sms-page?token=${localStorage.getItem(
                    "token"
                  )}&inApp=false`
                },
                {
                  type: "#hamyarInfo",
                  action: `/hamyar-add/?token=${localStorage.getItem("token")}`
                },
                {
                  type: "#biorhythm",
                  action: `/Biorhythm/?token=${localStorage.getItem("token")}`
                },
                {
                  type: "#appoinment",
                  action: `/clinic/?token=${localStorage.getItem(
                    "token"
                  )}&userId=${
                    JSON.parse(window.localStorage.getItem("userinfo")).user.id
                  }`
                }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "lineClomp2[].line",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "load.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          {(() => {
            try {
              return window.sessionStorage.getItem("hamyar") != "true";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <section className={classNames(projectcss.all, sty.section__f9G4)}>
              <MainHeader
                data-plasmic-name={"mainHeader"}
                data-plasmic-override={overrides.mainHeader}
                className={classNames("__wab_instance", sty.mainHeader)}
                dopen={generateStateValueProp($state, ["mainHeader", "dopen"])}
                onDopenChange2={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "mainHeader",
                    "dopen"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                token={(() => {
                  try {
                    return localStorage.getItem("token");
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                userinfo={(() => {
                  try {
                    return JSON.parse(window.localStorage.getItem("userinfo"))
                      .user;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return {
                        mobile: false,
                        username: "guest_3DiroEaKCW",
                        name: "jjjj",
                        last_time: {
                          year: 2025,
                          month: 2,
                          day: 9,
                          hour: 0,
                          minute: 0,
                          second: 0,
                          nanosecond: 0,
                          timeZoneOffsetSeconds: 0
                        },
                        cycle: 20,
                        length: 5,
                        image: "https://liom-app.ir/data/profile/default.png",
                        biorhythm: {
                          date: "2025-03-05T05:32:07.747Z",
                          advice:
                            "- \u0628\u0647 \u06a9\u0633\u06cc \u06a9\u0647 \u062e\u06cc\u0644\u06cc \u062f\u0648\u0633\u062a\u0634 \u062f\u0627\u0631\u06cc \u0632\u0646\u06af \u0628\u0632\u0646 \u06cc\u0627 \u067e\u06cc\u0627\u0645 \u0628\u062f\u0647.\n- \u0627\u06af\u0647 \u0627\u0645\u0631\u0648\u0632 \u0627\u062d\u0633\u0627\u0633 \u0628\u06cc \u062d\u0627\u0644\u06cc \u0648 \u06a9\u0633\u0627\u0644\u062a \u062f\u0627\u0631\u06cc \u0648 \u062f\u0644\u062a \u0646\u0645\u06cc\u062e\u0648\u0627\u062f \u0641\u0639\u0627\u0644\u06cc\u062a \u0632\u06cc\u0627\u062f\u06cc \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc \u0627\u0634\u06a9\u0627\u0644\u06cc \u0646\u062f\u0627\u0631\u0647 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0645\u062f\u06cc\u062a\u06cc\u0634\u0646 \u06a9\u0646\u06cc \u062a\u0627 \u0627\u062d\u0633\u0627\u0633 \u062e\u0648\u0628\u06cc \u067e\u06cc\u062f\u0627 \u06a9\u0646\u06cc.\n- \u0627\u0645\u0631\u0648\u0632 \u0632\u0645\u0627\u0646 \u062e\u0648\u0628\u06cc \u0628\u0631\u0627\u06cc \u0645\u062f\u06cc\u0631\u06cc\u062a \u0648 \u0628\u0631\u0646\u0627\u0645\u0647 \u0631\u06cc\u0632\u06cc \u06a9\u0631\u062f\u0646\u0647.\n",
                          avg: 13,
                          physical: -100,
                          emotional: 43,
                          intellectual: 95
                        },
                        id: "ee975e9c-19dd-42fc-b7d7-8822f621b4f8",
                        healthStatus: "period",
                        birthDate: {
                          year: 2002,
                          month: 1,
                          day: 7,
                          hour: 0,
                          minute: 0,
                          second: 0,
                          nanosecond: 0,
                          timeZoneOffsetSeconds: 0
                        }
                      };
                    }
                    throw e;
                  }
                })()}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pPUj)}
                >
                  <Icon185Icon
                    className={classNames(projectcss.all, sty.svg__ijX4Q)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateMainHeaderDopen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["mainHeader", "dopen"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateMainHeaderDopen"] != null &&
                        typeof $steps["updateMainHeaderDopen"] === "object" &&
                        typeof $steps["updateMainHeaderDopen"].then ===
                          "function"
                      ) {
                        $steps["updateMainHeaderDopen"] = await $steps[
                          "updateMainHeaderDopen"
                        ];
                      }
                    }}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8J3Qe
                    )}
                  >
                    {
                      "\u0645\u0631\u0627\u0642\u0628\u062a \u0627\u0632 \u062e\u0648\u062f"
                    }
                  </div>
                </Stack__>
              </MainHeader>
            </section>
          ) : null}
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["params"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const queryString = window.location.search;
                          const urlParams = new URLSearchParams(queryString);
                          return urlParams.forEach((value, key) => {
                            $state.paramsObject[key] = value;
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["params"] != null &&
                typeof $steps["params"] === "object" &&
                typeof $steps["params"].then === "function"
              ) {
                $steps["params"] = await $steps["params"];
              }

              $steps["clearParams"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const searchParams = new URLSearchParams(
                            window.location.search
                          );
                          searchParams.delete("token");
                          searchParams.delete("userId");
                          searchParams.delete("user_id");
                          const newUrl = `${
                            window.location.pathname
                          }?${searchParams.toString()}`;
                          return window.history.replaceState(null, "", newUrl);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["clearParams"] != null &&
                typeof $steps["clearParams"] === "object" &&
                typeof $steps["clearParams"].then === "function"
              ) {
                $steps["clearParams"] = await $steps["clearParams"];
              }

              $steps["setCookie"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if (
                            $state.paramsObject?.token !== undefined &&
                            $state.paramsObject?.token?.trim() !== ""
                          ) {
                            if (!$state.paramsObject.token.startsWith("ey"))
                              $state.paramsObject.token =
                                $state.paramsObject.token.slice(6, -3);
                            var setCookie = (name, value, days) => {
                              const expires = new Date(
                                Date.now() + days * 86400000
                              ).toUTCString();
                              document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                            };
                            return setCookie(
                              "token",
                              JSON.stringify([$state.paramsObject.token]),
                              100
                            );
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["setCookie"] != null &&
                typeof $steps["setCookie"] === "object" &&
                typeof $steps["setCookie"].then === "function"
              ) {
                $steps["setCookie"] = await $steps["setCookie"];
              }

              $steps["getCookie"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          var getCookie = name => {
                            const cookies = document.cookie.split("; ");
                            for (let cookie of cookies) {
                              const [key, value] = cookie.split("=");
                              if (key === name) return JSON.parse(value)[0];
                            }
                            return "";
                          };
                          return ($state.token = getCookie("token"));
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getCookie"] != null &&
                typeof $steps["getCookie"] === "object" &&
                typeof $steps["getCookie"].then === "function"
              ) {
                $steps["getCookie"] = await $steps["getCookie"];
              }

              $steps["userGuset"] =
                $state.token == ""
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://api.liom.app/auth/signup/guest",
                          undefined,
                          (() => {
                            try {
                              return (() => {
                                function pseudoUUID() {
                                  let timestamp = Date.now().toString(36);
                                  let randomStr = Math.random()
                                    .toString(36)
                                    .substr(2, 8);
                                  return timestamp + "-" + randomStr;
                                }
                                return {
                                  name: "کاربر مهمان",
                                  gateway: "self_care",
                                  country: "98",
                                  isCountryPending: false,
                                  lang: "fa",
                                  version: "",
                                  os: (() => {
                                    const userAgent =
                                      window.navigator.userAgent;
                                    const platform = window.navigator.userAgent;
                                    if (/Windows/i.test(platform))
                                      return "Windows";
                                    if (/Mac/i.test(platform)) return "macOS";
                                    if (/Linux/i.test(platform)) return "Linux";
                                    if (/Android/i.test(userAgent))
                                      return "Android";
                                    if (/iPhone|iPad|iPod/i.test(userAgent))
                                      return "iOS";
                                    return "Unknown OS";
                                  })(),
                                  osVersion: (() => {
                                    const userAgent =
                                      window.navigator.userAgent;
                                    if (/Windows NT 10.0/.test(userAgent))
                                      return "Windows 10";
                                    if (/Windows NT 6.3/.test(userAgent))
                                      return "Windows 8.1";
                                    if (/Windows NT 6.2/.test(userAgent))
                                      return "Windows 8";
                                    if (/Windows NT 6.1/.test(userAgent))
                                      return "Windows 7";
                                    if (
                                      /Mac OS X (\d+[\._]\d+)/.test(userAgent)
                                    )
                                      return `macOS ${RegExp.$1.replace(
                                        "_",
                                        "."
                                      )}`;
                                    if (/Android (\d+(\.\d+)?)/.test(userAgent))
                                      return `Android ${RegExp.$1}`;
                                    if (
                                      /CPU (iPhone )?OS (\d+_\d+)/.test(
                                        userAgent
                                      )
                                    )
                                      return `iOS ${RegExp.$2.replace(
                                        "_",
                                        "."
                                      )}`;
                                    return "Unknown Version";
                                  })(),
                                  sex: $state.gender || "",
                                  additionalData: {
                                    ip: "132465",
                                    name: "test1"
                                  },
                                  device: (() => {
                                    const userAgent =
                                      window.navigator.userAgent;
                                    if (
                                      /Mobi|Android|iPhone|iPad|iPod/i.test(
                                        userAgent
                                      )
                                    ) {
                                      return "Mobile";
                                    } else if (/Tablet|iPad/i.test(userAgent)) {
                                      return "Tablet";
                                    } else {
                                      return "Desktop";
                                    }
                                  })(),
                                  fcm:
                                    window.localStorage.getItem("fcmToken") ||
                                    " ",
                                  uniqueId: pseudoUUID(),
                                  device_type: window.navigator.platform,
                                  postLang: "fa"
                                };
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["userGuset"] != null &&
                typeof $steps["userGuset"] === "object" &&
                typeof $steps["userGuset"].then === "function"
              ) {
                $steps["userGuset"] = await $steps["userGuset"];
              }

              $steps["setCookieGust"] =
                $steps.userGuset?.data?.success ?? false
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            var setCookie = (name, value, days) => {
                              const expires = new Date(
                                Date.now() + days * 86400000
                              ).toUTCString();
                              document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                            };
                            setCookie(
                              "token",
                              JSON.stringify([
                                $steps.userGuset.data.result.token
                              ]),
                              100
                            );
                            return ($state.token =
                              $steps.userGuset.data.result.token);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["setCookieGust"] != null &&
                typeof $steps["setCookieGust"] === "object" &&
                typeof $steps["setCookieGust"].then === "function"
              ) {
                $steps["setCookieGust"] = await $steps["setCookieGust"];
              }

              $steps["invokeGlobalAction"] =
                window.sessionStorage.getItem("hamyar") != "true"
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "https://n8n.staas.ir/webhook/rest/tools/selfCare",
                          (() => {
                            try {
                              return { authorization: $state.token };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["invokeGlobalAction3"] =
                window.sessionStorage.getItem("hamyar") == "true"
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://n8n.staas.ir/webhook/rest/tools/selfCare",
                          undefined,
                          (() => {
                            try {
                              return { authorization: $state.token };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction3"] != null &&
                typeof $steps["invokeGlobalAction3"] === "object" &&
                typeof $steps["invokeGlobalAction3"].then === "function"
              ) {
                $steps["invokeGlobalAction3"] = await $steps[
                  "invokeGlobalAction3"
                ];
              }

              $steps["updateSelfCare2"] =
                $steps.invokeGlobalAction?.data?.success == true ||
                $steps.invokeGlobalAction3?.data?.success == true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["selfCare2"]
                        },
                        operation: 0,
                        value:
                          $steps.invokeGlobalAction?.data ||
                          $steps.invokeGlobalAction3?.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateSelfCare2"] != null &&
                typeof $steps["updateSelfCare2"] === "object" &&
                typeof $steps["updateSelfCare2"].then === "function"
              ) {
                $steps["updateSelfCare2"] = await $steps["updateSelfCare2"];
              }

              $steps["invokeGlobalAction2"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://api.liom.app/service/log",
                        undefined,
                        (() => {
                          try {
                            return {
                              userId:
                                new URLSearchParams(window.location.search).get(
                                  "userId"
                                ) ||
                                JSON.parse(
                                  window.localStorage.getItem("userinfo")
                                ).user.id,
                              pageName: "self-care",
                              action: "loadePage",
                              extraData: {}
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        {
                          headers: {
                            "Content-Type": "application/json",
                            Authorization:
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                          }
                        }
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction2"] != null &&
                typeof $steps["invokeGlobalAction2"] === "object" &&
                typeof $steps["invokeGlobalAction2"].then === "function"
              ) {
                $steps["invokeGlobalAction2"] = await $steps[
                  "invokeGlobalAction2"
                ];
              }
            }}
          />

          {(() => {
            try {
              return $state.selfCare2.loading != true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___3HIjn)}
              style={(() => {
                try {
                  return {
                    "padding-top":
                      window.sessionStorage.getItem("hamyar") == "true"
                        ? "16px"
                        : "72px"
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <div className={classNames(projectcss.all, sty.freeBox__hRvuO)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.selfCare2.result.list.items.filter(
                        item => item.type != "breast_health"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__hUnhv)}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoadLoading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["load", "loading"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadLoading"] != null &&
                          typeof $steps["updateLoadLoading"] === "object" &&
                          typeof $steps["updateLoadLoading"].then === "function"
                        ) {
                          $steps["updateLoadLoading"] = await $steps[
                            "updateLoadLoading"
                          ];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return window.sessionStorage.setItem(
                                    "subItems",
                                    JSON.stringify(currentItem)
                                  );
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["runCode2"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return window.open("/subItems", "_self");
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode2"] != null &&
                          typeof $steps["runCode2"] === "object" &&
                          typeof $steps["runCode2"].then === "function"
                        ) {
                          $steps["runCode2"] = await $steps["runCode2"];
                        }

                        $steps["updateLoadLoading2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["load", "loading"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadLoading2"] != null &&
                          typeof $steps["updateLoadLoading2"] === "object" &&
                          typeof $steps["updateLoadLoading2"].then ===
                            "function"
                        ) {
                          $steps["updateLoadLoading2"] = await $steps[
                            "updateLoadLoading2"
                          ];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://api.liom.app/service/log",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        userId:
                                          new URLSearchParams(
                                            window.location.search
                                          ).get("userId") ||
                                          JSON.parse(
                                            window.localStorage.getItem(
                                              "userinfo"
                                            )
                                          ).user.id,
                                        pageName: "self-care",
                                        action: "category",
                                        extraData: {
                                          type: currentItem.type
                                        }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  {
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization:
                                        "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                    }
                                  }
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      style={(() => {
                        try {
                          return {
                            "background-color": currentItem.backgorund_color1
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dkw2Y
                        )}
                        style={(() => {
                          try {
                            return {
                              color: currentItem.text_color
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0633\u0644\u0627\u0645\u062a \u0631\u062d\u0645";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <LineClomp
                        data-plasmic-name={"lineClomp"}
                        data-plasmic-override={overrides.lineClomp}
                        className={classNames("__wab_instance", sty.lineClomp)}
                        numberOfLine={2}
                        onLineChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "lineClomp",
                            __plasmic_idx_0,
                            "line"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pmboS
                          )}
                          style={(() => {
                            try {
                              return {
                                color: currentItem.text_color
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.text;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "-\u0646\u0627\u0645\u0646\u0638\u0645\u06cc \u067e\u0631\u06cc\u0648\u062f\n-\u062a\u0646\u0628\u0644\u06cc \u062a\u062e\u0645\u062f\u0627\u0646";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </LineClomp>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.button),
                          color: generateStateValueProp($state, [
                            "button",
                            __plasmic_idx_0,
                            "color"
                          ]),
                          onColorChange: async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button",
                                __plasmic_idx_0,
                                "color"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          size: "compact"
                        };

                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "button[].color",
                              initFunc: ({ $props, $state, $queries }) =>
                                "softBlack"
                            }
                          ],
                          [__plasmic_idx_0]
                        );
                        return (
                          <Button
                            data-plasmic-name={"button"}
                            data-plasmic-override={overrides.button}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___6Mf2
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.btn_text;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0648\u0631\u0648\u062f";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </Button>
                        );
                      })()}
                    </Stack__>
                  );
                })}
              </div>
              {(
                hasVariant(globalVariants, "screen", "mobile")
                  ? true
                  : (() => {
                      try {
                        return (
                          window.sessionStorage.getItem("hamyar") != "true"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <Embed
                  data-plasmic-name={"embedHtml"}
                  data-plasmic-override={overrides.embedHtml}
                  className={classNames("__wab_instance", sty.embedHtml)}
                  code={"<hr></hr>"}
                />
              ) : null}
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__dl9Wb)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.selfCare2.result.list.other.filter(
                        item => item.action != "#notifSettings"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__kRZv)}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoadLoading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["load", "loading"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadLoading"] != null &&
                          typeof $steps["updateLoadLoading"] === "object" &&
                          typeof $steps["updateLoadLoading"].then === "function"
                        ) {
                          $steps["updateLoadLoading"] = await $steps[
                            "updateLoadLoading"
                          ];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return (() => {
                                        if (
                                          currentItem.action == "#biorhythm"
                                        ) {
                                          return window.sessionStorage.getItem(
                                            "hamyar"
                                          ) == "true"
                                            ? "#bioritm"
                                            : currentItem.action;
                                        } else {
                                          return currentItem.action;
                                        }
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  (() => {
                                    try {
                                      return $state.token;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  "lll",
                                  "false",
                                  undefined,
                                  true,
                                  (() => {
                                    try {
                                      return window.sessionStorage.getItem(
                                        "hamyar"
                                      ) == "true"
                                        ? {
                                            gender: "male",
                                            "home-page": encodeURIComponent(
                                              window.location.href
                                            )
                                          }
                                        : {
                                            "home-page": encodeURIComponent(
                                              window.location.href
                                            )
                                          };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions["Fragment.deepLink"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["updateLoadLoading2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["load", "loading"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadLoading2"] != null &&
                          typeof $steps["updateLoadLoading2"] === "object" &&
                          typeof $steps["updateLoadLoading2"].then ===
                            "function"
                        ) {
                          $steps["updateLoadLoading2"] = await $steps[
                            "updateLoadLoading2"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__weaHv
                        )}
                      >
                        <PlasmicImg__
                          data-plasmic-name={"img"}
                          data-plasmic-override={overrides.img}
                          alt={""}
                          className={classNames(sty.img)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return currentItem.image;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yVvg
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eMdHf
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nGwP
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          {(() => {
                            try {
                              return currentItem.isNew;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__yQvl0
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__vA5S3
                                )}
                              >
                                {"new"}
                              </div>
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return currentItem.isPremium;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__suhbJ
                              )}
                            >
                              <Icon188Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__gVjCi
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                        </Stack__>
                        <LineClomp
                          data-plasmic-name={"lineClomp2"}
                          data-plasmic-override={overrides.lineClomp2}
                          className={classNames(
                            "__wab_instance",
                            sty.lineClomp2
                          )}
                          numberOfLine={2}
                          onLineChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "lineClomp2",
                              __plasmic_idx_0,
                              "line"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vhPmx
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.text;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </LineClomp>
                      </Stack__>
                      <ChevronLeftIcon
                        className={classNames(projectcss.all, sty.svg___1Z4Vp)}
                        role={"img"}
                      />
                    </Stack__>
                  );
                })}
              </Stack__>
            </Stack__>
          ) : null}
          {(() => {
            try {
              return $state.selfCare2.loading == true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tSqzz)}
              style={(() => {
                try {
                  return {
                    "padding-top":
                      $state.paramsObject.hamyar == "true" ? "16px" : ""
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nksFe)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___50O2N,
                    "shimmer"
                  )}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___0Hua5,
                    "shimmer"
                  )}
                />
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__zIOet,
                  "shimmer"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__rNLtJ,
                  "shimmer"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__lsMbk,
                  "shimmer"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__zdYwE,
                  "shimmer"
                )}
              />
            </Stack__>
          ) : null}
          <section className={classNames(projectcss.all, sty.section__pS3H)}>
            <div className={classNames(projectcss.all, sty.freeBox__yzrXx)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___4NQg7)}
              >
                {(() => {
                  try {
                    return window.sessionStorage.getItem("hamyar") != "true";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__awpI3)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return window.open("/calendar", "_self");
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                  >
                    <Icon138Icon
                      className={classNames(projectcss.all, sty.svg__l5B5)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2QvJp
                      )}
                    >
                      {
                        "\u0686\u0631\u062e\u0647 \u0642\u0627\u0639\u062f\u06af\u06cc"
                      }
                    </div>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return window.sessionStorage.getItem("hamyar") == "true";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___7PIRr)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToHamyar"] = true
                        ? (() => {
                            const actionArgs = { destination: `/hamyar` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHamyar"] != null &&
                        typeof $steps["goToHamyar"] === "object" &&
                        typeof $steps["goToHamyar"].then === "function"
                      ) {
                        $steps["goToHamyar"] = await $steps["goToHamyar"];
                      }
                    }}
                  >
                    <Icon6Icon
                      className={classNames(projectcss.all, sty.svg__naXZ)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2Dg7
                      )}
                    >
                      {"\u0647\u0645\u06cc\u0627\u0631"}
                    </div>
                  </div>
                ) : null}
                <div
                  aria-pressed={undefined}
                  className={classNames(projectcss.all, sty.freeBox__gg4Ka)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToBioritm2"] =
                      localStorage.getItem("token") != "undefined" ||
                      localStorage.getItem("token") != null
                        ? (() => {
                            const actionArgs = { destination: `/Biorhythm` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["goToBioritm2"] != null &&
                      typeof $steps["goToBioritm2"] === "object" &&
                      typeof $steps["goToBioritm2"].then === "function"
                    ) {
                      $steps["goToBioritm2"] = await $steps["goToBioritm2"];
                    }
                  }}
                >
                  <PlasmicIcon__
                    PlasmicIconType={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? Icon212Icon
                        : Icon212Icon
                    }
                    className={classNames(projectcss.all, sty.svg__h0MCv)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tRec
                    )}
                  >
                    {
                      "\u0645\u0631\u0627\u0642\u0628\u062a \u0627\u0632 \u062e\u0648\u062f"
                    }
                  </div>
                </div>
              </Stack__>
            </div>
          </section>
          <Load
            data-plasmic-name={"load"}
            data-plasmic-override={overrides.load}
            className={classNames("__wab_instance", sty.load)}
            loading={generateStateValueProp($state, ["load", "loading"])}
            onLoadingChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["load", "loading"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "mainHeader",
    "sideEffect",
    "lineClomp",
    "button",
    "embedHtml",
    "img",
    "lineClomp2",
    "load"
  ],
  mainHeader: ["mainHeader"],
  sideEffect: ["sideEffect"],
  lineClomp: ["lineClomp"],
  button: ["button"],
  embedHtml: ["embedHtml"],
  img: ["img"],
  lineClomp2: ["lineClomp2"],
  load: ["load"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  mainHeader: typeof MainHeader;
  sideEffect: typeof SideEffect;
  lineClomp: typeof LineClomp;
  button: typeof Button;
  embedHtml: typeof Embed;
  img: typeof PlasmicImg__;
  lineClomp2: typeof LineClomp;
  load: typeof Load;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelfCare__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelfCare__VariantsArgs;
    args?: PlasmicSelfCare__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelfCare__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSelfCare__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelfCare__ArgProps,
          internalVariantPropNames: PlasmicSelfCare__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelfCare__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelfCare";
  } else {
    func.displayName = `PlasmicSelfCare.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSelfCare = Object.assign(
  // Top-level PlasmicSelfCare renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    mainHeader: makeNodeComponent("mainHeader"),
    sideEffect: makeNodeComponent("sideEffect"),
    lineClomp: makeNodeComponent("lineClomp"),
    button: makeNodeComponent("button"),
    embedHtml: makeNodeComponent("embedHtml"),
    img: makeNodeComponent("img"),
    lineClomp2: makeNodeComponent("lineClomp2"),
    load: makeNodeComponent("load"),

    // Metadata about props expected for PlasmicSelfCare
    internalVariantProps: PlasmicSelfCare__VariantProps,
    internalArgProps: PlasmicSelfCare__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSelfCare;
/* prettier-ignore-end */
