// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: sTeH_IDX5T87

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import MainHeader from "../../MainHeader"; // plasmic-import: 1YQK_N8j3twT/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import LineClomp from "../../LineClomp"; // plasmic-import: XsM8QG4wUKlk/component
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSelfCare.module.css"; // plasmic-import: sTeH_IDX5T87/css

import Icon185Icon from "./icons/PlasmicIcon__Icon185"; // plasmic-import: 3QmHdQOUm1zK/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon188Icon from "./icons/PlasmicIcon__Icon188"; // plasmic-import: Ap0CNp82zKxk/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: DnjmD0szshuz/icon

createPlasmicElementProxy;

export type PlasmicSelfCare__VariantMembers = {};
export type PlasmicSelfCare__VariantsArgs = {};
type VariantPropType = keyof PlasmicSelfCare__VariantsArgs;
export const PlasmicSelfCare__VariantProps = new Array<VariantPropType>();

export type PlasmicSelfCare__ArgsType = {};
type ArgPropType = keyof PlasmicSelfCare__ArgsType;
export const PlasmicSelfCare__ArgProps = new Array<ArgPropType>();

export type PlasmicSelfCare__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  mainHeader?: Flex__<typeof MainHeader>;
  sideEffect?: Flex__<typeof SideEffect>;
  lineClomp?: Flex__<typeof LineClomp>;
  button?: Flex__<typeof Button>;
  embedHtml?: Flex__<typeof Embed>;
  img?: Flex__<typeof PlasmicImg__>;
  lineClomp2?: Flex__<typeof LineClomp>;
};

export interface DefaultSelfCareProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelfCare__RenderFunc(props: {
  variants: PlasmicSelfCare__VariantsArgs;
  args: PlasmicSelfCare__ArgsType;
  overrides: PlasmicSelfCare__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "number",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.token || window.localStorage.getItem("token");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "relation",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "hamyar"
      },
      {
        path: "masseg",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "errror",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "popoverOpen",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [false, false]
      },
      {
        path: "removeItem",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loadingBtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "v",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "mainHeader.dopen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button[].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "care",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "lineClomp[].line",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "selfCare2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({ loading: true })
      },
      {
        path: "tools",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                {
                  type: "#hamyarIn",
                  action: `https://tools.liom.app/self-medication/?type=irregular&token=KOlmhp${localStorage.getItem(
                    "token"
                  )}khn&userId=mjgf${
                    JSON.parse(window.localStorage.getItem("userinfo")).user.id
                  }kpmf`
                },
                {
                  type: "",
                  action: `https://tools.liom.app/self-medication/?type=skinCare&token=KOlmhp${localStorage.getItem(
                    "token"
                  )}khn&userId=mjgf${
                    JSON.parse(window.localStorage.getItem("userinfo")).user.id
                  }kpmf`
                },
                {
                  type: "#inAppWebView",
                  action: `/self-sms-page?token=${localStorage.getItem(
                    "token"
                  )}`
                },
                {
                  type: "#hamyarInfo",
                  action: `/hamyar-add/?token=${localStorage.getItem("token")}`
                },
                {
                  type: "",
                  action: `http://tools.liom.app/self-test/?app=liom&type=irregular&userId=khyg${
                    JSON.parse(window.localStorage.getItem("userinfo")).user.id
                  }lhun`
                },
                {
                  type: "#appoinment",

                  action: `https://apps.liom.app/clinic/?token=${localStorage.getItem(
                    "token"
                  )}&userId=${
                    JSON.parse(window.localStorage.getItem("userinfo")).user.id
                  }`
                }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "lineClomp2[].line",
        type: "private",
        variableType: "boolean"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <MainHeader
              data-plasmic-name={"mainHeader"}
              data-plasmic-override={overrides.mainHeader}
              className={classNames("__wab_instance", sty.mainHeader)}
              dopen={generateStateValueProp($state, ["mainHeader", "dopen"])}
              onDopenChange2={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "mainHeader",
                  "dopen"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__pPUj)}
              >
                <Icon185Icon
                  className={classNames(projectcss.all, sty.svg__ijX4Q)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateMainHeaderDopen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["mainHeader", "dopen"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateMainHeaderDopen"] != null &&
                      typeof $steps["updateMainHeaderDopen"] === "object" &&
                      typeof $steps["updateMainHeaderDopen"].then === "function"
                    ) {
                      $steps["updateMainHeaderDopen"] = await $steps[
                        "updateMainHeaderDopen"
                      ];
                    }
                  }}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8J3Qe
                  )}
                >
                  {
                    "\u0645\u0631\u0627\u0642\u0628\u062a \u0627\u0632 \u062e\u0648\u062f"
                  }
                </div>
              </Stack__>
            </MainHeader>
          </section>
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/rest/tools/selfCare",
                        (() => {
                          try {
                            return { authorization: $state.token };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["updateSelfCare2"] =
                $steps.invokeGlobalAction.data.success == true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["selfCare2"]
                        },
                        operation: 0,
                        value: $steps.invokeGlobalAction.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateSelfCare2"] != null &&
                typeof $steps["updateSelfCare2"] === "object" &&
                typeof $steps["updateSelfCare2"].then === "function"
              ) {
                $steps["updateSelfCare2"] = await $steps["updateSelfCare2"];
              }
            }}
          />

          {(() => {
            try {
              return $state.selfCare2.loading != true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___3HIjn)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__hRvuO)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.selfCare2.result.list.items;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__hUnhv)}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (window.subItems = currentItem);
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["goToSubItems"] = true
                          ? (() => {
                              const actionArgs = { destination: `/subItems` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToSubItems"] != null &&
                          typeof $steps["goToSubItems"] === "object" &&
                          typeof $steps["goToSubItems"].then === "function"
                        ) {
                          $steps["goToSubItems"] = await $steps["goToSubItems"];
                        }
                      }}
                      style={(() => {
                        try {
                          return {
                            "background-color": currentItem.backgorund_color1
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dkw2Y
                        )}
                        style={(() => {
                          try {
                            return {
                              color: currentItem.text_color
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0633\u0644\u0627\u0645\u062a \u0631\u062d\u0645";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <LineClomp
                        data-plasmic-name={"lineClomp"}
                        data-plasmic-override={overrides.lineClomp}
                        className={classNames("__wab_instance", sty.lineClomp)}
                        numberOfLine={2}
                        onLineChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "lineClomp",
                            __plasmic_idx_0,
                            "line"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pmboS
                          )}
                          style={(() => {
                            try {
                              return {
                                color: currentItem.text_color
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.text;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "-\u0646\u0627\u0645\u0646\u0638\u0645\u06cc \u067e\u0631\u06cc\u0648\u062f\n-\u062a\u0646\u0628\u0644\u06cc \u062a\u062e\u0645\u062f\u0627\u0646";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </LineClomp>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.button),
                          color: generateStateValueProp($state, [
                            "button",
                            __plasmic_idx_0,
                            "color"
                          ]),
                          onColorChange: async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button",
                                __plasmic_idx_0,
                                "color"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          size: "compact"
                        };

                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "button[].color",
                              initFunc: ({ $props, $state, $queries }) =>
                                "softBlack"
                            }
                          ],
                          [__plasmic_idx_0]
                        );
                        return (
                          <Button
                            data-plasmic-name={"button"}
                            data-plasmic-override={overrides.button}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___6Mf2
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.btn_text;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0648\u0631\u0648\u062f";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </Button>
                        );
                      })()}
                    </Stack__>
                  );
                })}
              </div>
              <Embed
                data-plasmic-name={"embedHtml"}
                data-plasmic-override={overrides.embedHtml}
                className={classNames("__wab_instance", sty.embedHtml)}
                code={"<hr></hr>"}
              />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__dl9Wb)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.selfCare2.result.list.other;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__kRZv)}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return $state.tools.find(item =>
                                      currentItem.action.startsWith(
                                        currentItem.action
                                      )
                                    ).action;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__weaHv
                        )}
                      >
                        <PlasmicImg__
                          data-plasmic-name={"img"}
                          data-plasmic-override={overrides.img}
                          alt={""}
                          className={classNames(sty.img)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return currentItem.image;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yVvg
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eMdHf
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nGwP
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          {(() => {
                            try {
                              return currentItem.isNew;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__yQvl0
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__vA5S3
                                )}
                              >
                                {"new"}
                              </div>
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return currentItem.isPremium;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__suhbJ
                              )}
                            >
                              <Icon188Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__gVjCi
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                        </Stack__>
                        <LineClomp
                          data-plasmic-name={"lineClomp2"}
                          data-plasmic-override={overrides.lineClomp2}
                          className={classNames(
                            "__wab_instance",
                            sty.lineClomp2
                          )}
                          numberOfLine={2}
                          onLineChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "lineClomp2",
                              __plasmic_idx_0,
                              "line"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vhPmx
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.text;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </LineClomp>
                      </Stack__>
                      <ChevronLeftIcon
                        className={classNames(projectcss.all, sty.svg___1Z4Vp)}
                        role={"img"}
                      />
                    </Stack__>
                  );
                })}
              </Stack__>
            </Stack__>
          ) : null}
          {(() => {
            try {
              return $state.selfCare2.loading == true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tSqzz)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nksFe)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___50O2N,
                    "shimmer"
                  )}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___0Hua5,
                    "shimmer"
                  )}
                />
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__zIOet,
                  "shimmer"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__rNLtJ,
                  "shimmer"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__lsMbk,
                  "shimmer"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__zdYwE,
                  "shimmer"
                )}
              />
            </Stack__>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "mainHeader",
    "sideEffect",
    "lineClomp",
    "button",
    "embedHtml",
    "img",
    "lineClomp2"
  ],
  section: ["section", "mainHeader"],
  mainHeader: ["mainHeader"],
  sideEffect: ["sideEffect"],
  lineClomp: ["lineClomp"],
  button: ["button"],
  embedHtml: ["embedHtml"],
  img: ["img"],
  lineClomp2: ["lineClomp2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  mainHeader: typeof MainHeader;
  sideEffect: typeof SideEffect;
  lineClomp: typeof LineClomp;
  button: typeof Button;
  embedHtml: typeof Embed;
  img: typeof PlasmicImg__;
  lineClomp2: typeof LineClomp;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelfCare__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelfCare__VariantsArgs;
    args?: PlasmicSelfCare__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelfCare__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSelfCare__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelfCare__ArgProps,
          internalVariantPropNames: PlasmicSelfCare__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelfCare__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelfCare";
  } else {
    func.displayName = `PlasmicSelfCare.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSelfCare = Object.assign(
  // Top-level PlasmicSelfCare renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    mainHeader: makeNodeComponent("mainHeader"),
    sideEffect: makeNodeComponent("sideEffect"),
    lineClomp: makeNodeComponent("lineClomp"),
    button: makeNodeComponent("button"),
    embedHtml: makeNodeComponent("embedHtml"),
    img: makeNodeComponent("img"),
    lineClomp2: makeNodeComponent("lineClomp2"),

    // Metadata about props expected for PlasmicSelfCare
    internalVariantProps: PlasmicSelfCare__VariantProps,
    internalArgProps: PlasmicSelfCare__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSelfCare;
/* prettier-ignore-end */
