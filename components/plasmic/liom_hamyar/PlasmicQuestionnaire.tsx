// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: VgOjUIjY96PP

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import Question from "../../Question"; // plasmic-import: Z2cK5LB8JLFR/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicQuestionnaire.module.css"; // plasmic-import: VgOjUIjY96PP/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicQuestionnaire__VariantMembers = {};
export type PlasmicQuestionnaire__VariantsArgs = {};
type VariantPropType = keyof PlasmicQuestionnaire__VariantsArgs;
export const PlasmicQuestionnaire__VariantProps = new Array<VariantPropType>();

export type PlasmicQuestionnaire__ArgsType = {};
type ArgPropType = keyof PlasmicQuestionnaire__ArgsType;
export const PlasmicQuestionnaire__ArgProps = new Array<ArgPropType>();

export type PlasmicQuestionnaire__OverridesType = {
  root?: Flex__<"div">;
  favicon?: Flex__<typeof Embed>;
  top3?: Flex__<"div">;
  svg?: Flex__<"svg">;
  apiRequest2?: Flex__<typeof ApiRequest>;
  question?: Flex__<typeof Question>;
  textArea3?: Flex__<typeof AntdTextArea>;
  radioGroup3?: Flex__<typeof AntdRadioGroup>;
  radioGroup4?: Flex__<typeof AntdRadioGroup>;
  section?: Flex__<"section">;
  button5?: Flex__<typeof Button>;
  button6?: Flex__<typeof Button>;
};

export interface DefaultQuestionnaireProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicQuestionnaire__RenderFunc(props: {
  variants: PlasmicQuestionnaire__VariantsArgs;
  args: PlasmicQuestionnaire__ArgsType;
  overrides: PlasmicQuestionnaire__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  {
                    duration: "",
                    id: 14300,
                    text: "  : salam doktor",
                    isUser: 1,
                    timestamp: "2025-01-04 10:43:28",
                    seen: 2
                  },
                  {
                    duration: "",
                    id: 14301,
                    text: "che khabar",
                    isUser: 1,
                    timestamp: "2025-01-04 10:44:41",
                    seen: 2
                  },
                  {
                    duration: "",
                    id: 14302,
                    text: "\u0633\u0644\u0627\u0645 \u0639\u0632\u06cc\u0632\u0645 \u0645\u062a\u0646 \u0633\u0648\u0627\u0644\u062a \u0628\u0631\u0627\u0645 \u0646\u06cc\u0648\u0645\u062f\u0647.",
                    isUser: 0,
                    timestamp: "2025-01-04 11:51:13"
                  }
                ];
              }
              throw e;
            }
          })()
      },
      {
        path: "start",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.sessionID == null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "sessionId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return parseInt($ctx.query.sessionID);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "doctor",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          id: 1,
          name: "\u06a9\u0627\u0631\u0634\u0646\u0627\u0633 \u0631\u0648\u0627\u0646\u0634\u0646\u0627\u0633\u06cc \u0644\u06cc\u0648\u0645 \u0628\u0627\u0646\u0648",
          image: "https://liom-app.ir/data/doctor_img/d4.png"
        })
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return localStorage.getItem("ClinicToken");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "form",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiRequest.data.list.map(item => {
                return {
                  questionID: item.id,
                  answer: ""
                };
              });
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "masseg",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "rate",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "loadingPage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "text",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "apiRequest2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textArea3[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "radioGroup3[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "radioGroup4[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "perper"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Embed
            data-plasmic-name={"favicon"}
            data-plasmic-override={overrides.favicon}
            className={classNames("__wab_instance", sty.favicon)}
            code={
              hasVariant(globalVariants, "screen", "mobile")
                ? "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n"
                : "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\ndocument.addEventListener('focus', function(event) {\r\n  if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {\r\n    document.body.style.zoom = '1';\r\n  }\r\n}, true);\r\n\r\ndocument.addEventListener('blur', function(event) {\r\n  if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {\r\n    document.body.style.zoom = '';\r\n  }\r\n}, true);\r\n\r\nvar meta = document.createElement('meta');\r\nmeta.name = \"viewport\";\r\nmeta.content = \"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\";\r\ndocument.head.appendChild(meta);\r\n\r\n</script>\r\n"
            }
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"top3"}
            data-plasmic-override={overrides.top3}
            hasGap={true}
            className={classNames(projectcss.all, sty.top3)}
          >
            <ChevronRightIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return history.back();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xLjSj
              )}
            >
              {"\u067e\u0631\u0633\u0634\u0646\u0627\u0645\u0647"}
            </div>
          </Stack__>
          <ApiRequest
            data-plasmic-name={"apiRequest2"}
            data-plasmic-override={overrides.apiRequest2}
            className={classNames("__wab_instance", sty.apiRequest2)}
            errorDisplay={null}
            loadingDisplay={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xkAyc)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hahJj)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox___6ROFz,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__zwip0,
                      "shimmer"
                    )}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cjo21)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__r5At4,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__j9Oyk,
                      "shimmer"
                    )}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hVuSn)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__p0JV,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__rqziw,
                      "shimmer"
                    )}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qjvaa)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__g0So1,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__eRvWc,
                      "shimmer"
                    )}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vcSt7)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__bbp6E,
                      "shimmer"
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__ibvVb,
                      "shimmer"
                    )}
                  />
                </Stack__>
              </Stack__>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest2", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest2",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest2", "data"]).apply(
                null,
                eventArgs
              );
            }}
            params={(() => {
              try {
                return {
                  listID: new URLSearchParams(
                    new URL(window.location.href).search
                  ).get("listID"),
                  token: localStorage.getItem("ClinicToken")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/help/Question"}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___9AwXk)}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.apiRequest2.data.list;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Question
                    data-plasmic-name={"question"}
                    data-plasmic-override={overrides.question}
                    className={classNames("__wab_instance", sty.question)}
                    key={currentIndex}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8ItEf
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.question;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    {(() => {
                      try {
                        return currentItem.option.length == 1;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___9Hbb4
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            autoSize: true,
                            className: classNames(
                              "__wab_instance",
                              sty.textArea3
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["textArea3", __plasmic_idx_0, "value"],
                                AntdTextArea_Helpers
                              ).apply(null, eventArgs);

                              (async event => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return ($state.form.find(
                                            item =>
                                              item.questionID == currentItem.id
                                          ).answer =
                                            $state.textArea2[
                                              currentIndex
                                            ].value);
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }).apply(null, eventArgs);
                            },
                            placeholder:
                              "\u067e\u0627\u0633\u062e \u0634\u0645\u0627...",
                            value: generateStateValueProp($state, [
                              "textArea3",
                              __plasmic_idx_0,
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "textArea3[].value"
                              }
                            ],
                            [__plasmic_idx_0],
                            AntdTextArea_Helpers ?? {},
                            child$Props
                          );
                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "textArea3[].value",
                                initFunc: ({ $props, $state, $queries }) => ``
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <AntdTextArea
                              data-plasmic-name={"textArea3"}
                              data-plasmic-override={overrides.textArea3}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return currentItem.option.length == 4;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___47OiX
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            children: null,
                            className: classNames(
                              "__wab_instance",
                              sty.radioGroup3
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "radioGroup3",
                                __plasmic_idx_0,
                                "value"
                              ]).apply(null, eventArgs);

                              (async value => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return ($state.form.find(
                                            item =>
                                              item.questionID == currentItem.id
                                          ).answer =
                                            $state.radioGroup2[
                                              currentIndex
                                            ].value);
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }).apply(null, eventArgs);
                            },
                            optionType: "default",
                            options: (() => {
                              try {
                                return currentItem.option.map(item => ({
                                  value: item.id,
                                  label: item.text
                                }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })(),
                            value: generateStateValueProp($state, [
                              "radioGroup3",
                              __plasmic_idx_0,
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "radioGroup3[].value"
                              }
                            ],
                            [__plasmic_idx_0],
                            undefined ?? {},
                            child$Props
                          );
                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "radioGroup3[].value",
                                initFunc: ({ $props, $state, $queries }) =>
                                  undefined
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <AntdRadioGroup
                              data-plasmic-name={"radioGroup3"}
                              data-plasmic-override={overrides.radioGroup3}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return currentItem.option.length == 2;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oAJu
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            children: null,
                            className: classNames(
                              "__wab_instance",
                              sty.radioGroup4
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "radioGroup4",
                                __plasmic_idx_0,
                                "value"
                              ]).apply(null, eventArgs);

                              (async value => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return ($state.form.find(
                                            item =>
                                              item.questionID == currentItem.id
                                          ).answer =
                                            $state.radioGroup[
                                              currentIndex
                                            ].value);
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }).apply(null, eventArgs);
                            },
                            optionType: "default",
                            options: (() => {
                              try {
                                return currentItem.option.map(item => ({
                                  value: item.id,
                                  label: item.text
                                }));
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })(),
                            value: generateStateValueProp($state, [
                              "radioGroup4",
                              __plasmic_idx_0,
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "radioGroup4[].value"
                              }
                            ],
                            [__plasmic_idx_0],
                            undefined ?? {},
                            child$Props
                          );
                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "radioGroup4[].value",
                                initFunc: ({ $props, $state, $queries }) =>
                                  undefined
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <AntdRadioGroup
                              data-plasmic-name={"radioGroup4"}
                              data-plasmic-override={overrides.radioGroup4}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                    ) : null}
                  </Question>
                );
              })}
              <div className={classNames(projectcss.all, sty.freeBox__sKbFm)} />

              <section
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                className={classNames(projectcss.all, sty.section)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___9Qi7N)}
                >
                  <Button
                    data-plasmic-name={"button5"}
                    data-plasmic-override={overrides.button5}
                    className={classNames("__wab_instance", sty.button5)}
                    color={generateStateValueProp($state, ["button5", "color"])}
                    isDisabled={(() => {
                      try {
                        return $state.loading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    loading={(() => {
                      try {
                        return $state.loading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 4,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading"] != null &&
                        typeof $steps["updateLoading"] === "object" &&
                        typeof $steps["updateLoading"].then === "function"
                      ) {
                        $steps["updateLoading"] = await $steps["updateLoading"];
                      }

                      $steps["invokeGlobalAction"] = (
                        $state.form.find(item => item.answer == "")
                          ? false
                          : true
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/help/Question",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      token: $state.token,
                                      formID: parseInt($ctx.query.listID),
                                      List: $state.form
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["invokeGlobalAction2"] = (
                        $state.form.find(item => item.answer == "")
                          ? true
                          : false
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "warning",
                                "\u0644\u0637\u0641\u0627 \u0628\u0647 \u062a\u0645\u0627\u0645 \u0633\u0648\u0627\u0644\u0627\u062a \u067e\u0627\u0633\u062e \u062f\u0647\u06cc\u062f.",
                                undefined,
                                undefined,
                                "bottomLeft"
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["updateMasseg"] = (
                        $steps.invokeGlobalAction?.data?.success
                          ? $steps.invokeGlobalAction?.data?.success
                          : false
                      )
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["masseg"]
                              },
                              operation: 0,
                              value: $steps.invokeGlobalAction.data.message
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateMasseg"] != null &&
                        typeof $steps["updateMasseg"] === "object" &&
                        typeof $steps["updateMasseg"].then === "function"
                      ) {
                        $steps["updateMasseg"] = await $steps["updateMasseg"];
                      }

                      $steps["invokeGlobalAction3"] = (
                        $steps.invokeGlobalAction?.data?.success
                          ? $steps.invokeGlobalAction?.data?.success
                          : false
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "success",
                                (() => {
                                  try {
                                    return $state.masseg;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }

                      $steps["invokeGlobalAction4"] = true
                        ? (() => {
                            const actionArgs = { args: [2000] };
                            return $globalActions["Fragment.wait"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction4"] != null &&
                        typeof $steps["invokeGlobalAction4"] === "object" &&
                        typeof $steps["invokeGlobalAction4"].then === "function"
                      ) {
                        $steps["invokeGlobalAction4"] = await $steps[
                          "invokeGlobalAction4"
                        ];
                      }

                      $steps["updateLoading2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading2"] != null &&
                        typeof $steps["updateLoading2"] === "object" &&
                        typeof $steps["updateLoading2"].then === "function"
                      ) {
                        $steps["updateLoading2"] = await $steps[
                          "updateLoading2"
                        ];
                      }

                      $steps["runCode"] =
                        $steps.invokeGlobalAction?.data?.success ?? false
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return history.back();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button5", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    {
                      "\u0627\u0631\u0633\u0627\u0644 \u067e\u0627\u0633\u062e \u0647\u0627"
                    }
                  </Button>
                  <Button
                    data-plasmic-name={"button6"}
                    data-plasmic-override={overrides.button6}
                    className={classNames("__wab_instance", sty.button6)}
                    color={generateStateValueProp($state, ["button6", "color"])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  return history.back();
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button6", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    {"\u0627\u0646\u0635\u0631\u0627\u0641"}
                  </Button>
                </Stack__>
              </section>
            </Stack__>
          </ApiRequest>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "favicon",
    "top3",
    "svg",
    "apiRequest2",
    "question",
    "textArea3",
    "radioGroup3",
    "radioGroup4",
    "section",
    "button5",
    "button6"
  ],
  favicon: ["favicon"],
  top3: ["top3", "svg"],
  svg: ["svg"],
  apiRequest2: [
    "apiRequest2",
    "question",
    "textArea3",
    "radioGroup3",
    "radioGroup4",
    "section",
    "button5",
    "button6"
  ],
  question: ["question", "textArea3", "radioGroup3", "radioGroup4"],
  textArea3: ["textArea3"],
  radioGroup3: ["radioGroup3"],
  radioGroup4: ["radioGroup4"],
  section: ["section", "button5", "button6"],
  button5: ["button5"],
  button6: ["button6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  favicon: typeof Embed;
  top3: "div";
  svg: "svg";
  apiRequest2: typeof ApiRequest;
  question: typeof Question;
  textArea3: typeof AntdTextArea;
  radioGroup3: typeof AntdRadioGroup;
  radioGroup4: typeof AntdRadioGroup;
  section: "section";
  button5: typeof Button;
  button6: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicQuestionnaire__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicQuestionnaire__VariantsArgs;
    args?: PlasmicQuestionnaire__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicQuestionnaire__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicQuestionnaire__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicQuestionnaire__ArgProps,
          internalVariantPropNames: PlasmicQuestionnaire__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicQuestionnaire__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQuestionnaire";
  } else {
    func.displayName = `PlasmicQuestionnaire.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicQuestionnaire = Object.assign(
  // Top-level PlasmicQuestionnaire renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    favicon: makeNodeComponent("favicon"),
    top3: makeNodeComponent("top3"),
    svg: makeNodeComponent("svg"),
    apiRequest2: makeNodeComponent("apiRequest2"),
    question: makeNodeComponent("question"),
    textArea3: makeNodeComponent("textArea3"),
    radioGroup3: makeNodeComponent("radioGroup3"),
    radioGroup4: makeNodeComponent("radioGroup4"),
    section: makeNodeComponent("section"),
    button5: makeNodeComponent("button5"),
    button6: makeNodeComponent("button6"),

    // Metadata about props expected for PlasmicQuestionnaire
    internalVariantProps: PlasmicQuestionnaire__VariantProps,
    internalArgProps: PlasmicQuestionnaire__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicQuestionnaire;
/* prettier-ignore-end */
