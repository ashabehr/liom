/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: hNNKSE58t6pp

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import SlideinModal from "../../SlideinModal"; // plasmic-import: Y_p0qKIshDe1/component
import { Pickers } from "@/components/Pickers"; // plasmic-import: htE-oGSeNx82/codeComponent
import { DatePickers } from "@/components/DatePickers"; // plasmic-import: Pxh5xTWczGDl/codeComponent
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSettingPregnancy.module.css"; // plasmic-import: hNNKSE58t6pp/css

import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicSettingPregnancy__VariantMembers = {
  dark: "dark";
};
export type PlasmicSettingPregnancy__VariantsArgs = {
  dark?: SingleBooleanChoiceArg<"dark">;
};
type VariantPropType = keyof PlasmicSettingPregnancy__VariantsArgs;
export const PlasmicSettingPregnancy__VariantProps = new Array<VariantPropType>(
  "dark"
);

export type PlasmicSettingPregnancy__ArgsType = {};
type ArgPropType = keyof PlasmicSettingPregnancy__ArgsType;
export const PlasmicSettingPregnancy__ArgProps = new Array<ArgPropType>();

export type PlasmicSettingPregnancy__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  img?: Flex__<typeof PlasmicImg__>;
  dateModal?: Flex__<typeof SlideinModal>;
  week2?: Flex__<typeof Pickers>;
  day2?: Flex__<typeof Pickers>;
  datePickers?: Flex__<typeof DatePickers>;
  button?: Flex__<typeof Button>;
  dateOfBirthBox?: Flex__<typeof AntdInput>;
  lastTimeBox?: Flex__<typeof AntdInput>;
  button3?: Flex__<typeof Button>;
  getUserInfo?: Flex__<typeof ApiRequest>;
  lottie?: Flex__<typeof LottieWrapper>;
};

export interface DefaultSettingPregnancyProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSettingPregnancy__RenderFunc(props: {
  variants: PlasmicSettingPregnancy__VariantsArgs;
  args: PlasmicSettingPregnancy__ArgsType;
  overrides: PlasmicSettingPregnancy__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dateOfBirthBox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($state.dateOfBirth.data != "") {
                  var gy = parseInt($state.dateOfBirth.year);
                  var gm = parseInt($state.dateOfBirth.month);
                  var gd = parseInt($state.dateOfBirth.day);
                  let months = new Array(
                    "فروردين",
                    "ارديبهشت",
                    "خرداد",
                    "تير",
                    "مرداد",
                    "شهريور",
                    "مهر",
                    "آبان",
                    "آذر",
                    "دي",
                    "بهمن",
                    "اسفند"
                  );
                  return gd + " " + months[gm - 1] + " " + gy;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "dateModal.click",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "typeInterDate",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "manually"
      },
      {
        path: "lastTimeBox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($state.lastTime.data != "") {
                  var gy = parseInt($state.lastTime.year);
                  var gm = parseInt($state.lastTime.month);
                  var gd = parseInt($state.lastTime.day);
                  let months = new Array(
                    "فروردين",
                    "ارديبهشت",
                    "خرداد",
                    "تير",
                    "مرداد",
                    "شهريور",
                    "مهر",
                    "آبان",
                    "آذر",
                    "دي",
                    "بهمن",
                    "اسفند"
                  );
                  return gd + " " + months[gm - 1] + " " + gy;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "lastTime",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({ data: "" })
      },
      {
        path: "dateOfBirth",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({ data: "" })
      },
      {
        path: "datePickers.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "duDate",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dark",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.theme == "dark";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.dark
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shouldBlockBackButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "getUserInfo.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getUserInfo.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getUserInfo.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "isGetInfo",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "week2.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => $state.week
      },
      {
        path: "day2.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => $state.day
      },
      {
        path: "week",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "day",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImI5MmFlY2UzLWIyOTItNGEwOS1hZDc0LTIxZTA4NzQxZGNlNiIsInR5cGUiOiJzZXNzaW9uIn0.wa2BGGpGdL49QTwXPhcp0xHwW3h9KCp5nPVJ_fSOD5U"
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "userId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            { [sty.rootdark]: hasVariant($state, "dark", "dark") }
          )}
        >
          <Embed
            className={classNames("__wab_instance", sty.embedHtml__yX7Lg)}
            code={
              "<!-- Hotjar Tracking Code for setting-pregnancy -->\n<script>\n    (function(h,o,t,j,a,r){\n        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};\n        h._hjSettings={hjid:5226515,hjsv:6};\n        a=o.getElementsByTagName('head')[0];\n        r=o.createElement('script');r.async=1;\n        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;\n        a.appendChild(r);\n    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');\n</script>\n<script src=\"https://cdn.jsdelivr.net/npm/jalaali-js/dist/jalaali.js\"></script>"
            }
          />

          <Embed
            className={classNames("__wab_instance", sty.embedHtml__cayoB)}
            code={
              "<script>\n  let isBlocked = false; // \u0645\u062a\u063a\u06cc\u0631 \u0628\u0631\u0627\u06cc \u06a9\u0646\u062a\u0631\u0644 \u0645\u0633\u062f\u0648\u062f \u0634\u062f\u0646 \u062f\u06a9\u0645\u0647\n  let shouldBlockBackButton; // \u0645\u062a\u063a\u06cc\u0631 \u0628\u0631\u0627\u06cc \u0648\u0636\u0639\u06cc\u062a \u0628\u0644\u0648\u06a9\u0647 \u0628\u0648\u062f\u0646 \u062f\u06a9\u0645\u0647\n\n  document.addEventListener('DOMContentLoaded', function() {\n    // \u0628\u0631\u0631\u0633\u06cc \u0627\u06cc\u0646\u06a9\u0647 window.plasmicParent \u0648 window.plasmicParent.state \u0645\u0648\u062c\u0648\u062f \u0647\u0633\u062a\u0646\u062f\n    if (window.plasmicParent && window.plasmicParent.state) {\n      // \u0645\u0642\u062f\u0627\u0631\u062f\u0647\u06cc \u0628\u0647 \u0645\u062a\u063a\u06cc\u0631 \u0641\u0642\u0637 \u0627\u06af\u0631 \u0645\u0642\u062f\u0627\u0631\u062f\u0647\u06cc \u0646\u0634\u062f\u0647 \u0628\u0627\u0634\u062f\n      // if (shouldBlockBackButton === undefined) {\n        shouldBlockBackButton = window.plasmicParent.state.shouldBlockBackButton;\n        console.log(\"value\u06f2: \" + shouldBlockBackButton);\n      // }\n    } else {\n      console.log(\"window.plasmicParent \u06cc\u0627 state \u0645\u0648\u062c\u0648\u062f \u0646\u06cc\u0633\u062a.\");\n    }\n  });\n\n  window.addEventListener('popstate', function(event) {\n    // \u0627\u06af\u0631 \u0642\u0628\u0644\u0627\u064b \u062f\u06a9\u0645\u0647 \u0628\u0627\u0632\u06af\u0634\u062a \u0645\u0633\u062f\u0648\u062f \u0634\u062f\u0647 \u0628\u0627\u0634\u062f\u060c \u0627\u062c\u0627\u0632\u0647 \u0628\u0627\u0632\u06af\u0634\u062a \u0645\u06cc\u200c\u062f\u0647\u06cc\u0645\n    if (isBlocked) {\n      console.log('\u062f\u06a9\u0645\u0647 \u0628\u0627\u0632\u06af\u0634\u062a \u062f\u0648\u0628\u0627\u0631\u0647 \u0641\u0639\u0627\u0644 \u0627\u0633\u062a.');\n      isBlocked = false; // \u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u062d\u0627\u0644\u062a \u0639\u0627\u062f\u06cc\n      return; // \u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u0639\u0642\u0628\n    }\n\n    // \u0627\u06af\u0631 \u0628\u0627\u06cc\u062f \u062f\u06a9\u0645\u0647 \u0628\u0627\u0632\u06af\u0634\u062a \u0645\u0633\u062f\u0648\u062f \u0634\u0648\u062f\n    if (shouldBlockBackButton) {\n      console.log('\u0634\u0631\u0637 \u0628\u0631\u0642\u0631\u0627\u0631 \u0627\u0633\u062a! \u062f\u06a9\u0645\u0647 \u0628\u0627\u0632\u06af\u0634\u062a \u0645\u0633\u062f\u0648\u062f \u0645\u06cc\u200c\u0634\u0648\u062f.');\n      event.preventDefault(); // \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u0627\u0632 \u0628\u0627\u0632\u06af\u0634\u062a\n      isBlocked = true; // \u0645\u0633\u062f\u0648\u062f \u06a9\u0631\u062f\u0646 \u062f\u06a9\u0645\u0647 \u0628\u0631\u0627\u06cc \u06cc\u06a9 \u0628\u0627\u0631\n    } else {\n      console.log('\u0634\u0631\u0637 \u0628\u0631\u0642\u0631\u0627\u0631 \u0646\u06cc\u0633\u062a\u060c \u0628\u0627\u0632\u06af\u0634\u062a \u0627\u0646\u062c\u0627\u0645 \u0645\u06cc\u200c\u0634\u0648\u062f.');\n    }\n  });\n</script>\n"
            }
          />

          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["getParams"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const queryString = window.location.search;
                          const urlParams = new URLSearchParams(queryString);
                          urlParams.forEach((value, key) => {
                            $state.paramsObject[key] = value;
                          });
                          console.log($state.paramsObject);
                          $state.userId = $state.paramsObject.userId;
                          return console.log($state.userId);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getParams"] != null &&
                typeof $steps["getParams"] === "object" &&
                typeof $steps["getParams"].then === "function"
              ) {
                $steps["getParams"] = await $steps["getParams"];
              }

              $steps["clearParams"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const searchParams = new URLSearchParams(
                            window.location.search
                          );
                          searchParams.delete("token");
                          searchParams.delete("userId");
                          searchParams.delete("user_id");
                          searchParams.delete("origin_user_id");
                          const newUrl = `${
                            window.location.pathname
                          }?${searchParams.toString()}`;
                          return window.history.replaceState(null, "", newUrl);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["clearParams"] != null &&
                typeof $steps["clearParams"] === "object" &&
                typeof $steps["clearParams"].then === "function"
              ) {
                $steps["clearParams"] = await $steps["clearParams"];
              }

              $steps["setCookie"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if (
                            $state.paramsObject.token !== undefined &&
                            $state.paramsObject.token.trim() !== ""
                          ) {
                            if (!$state.paramsObject.token.startsWith("ey"))
                              $state.paramsObject.token =
                                $state.paramsObject.token.slice(6, -3);
                            var setCookie = (name, value, days) => {
                              const expires = new Date(
                                Date.now() + days * 86400000
                              ).toUTCString();
                              document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                            };
                            return setCookie(
                              "token",
                              JSON.stringify([$state.paramsObject.token]),
                              100
                            );
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["setCookie"] != null &&
                typeof $steps["setCookie"] === "object" &&
                typeof $steps["setCookie"].then === "function"
              ) {
                $steps["setCookie"] = await $steps["setCookie"];
              }

              $steps["getCookie"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          var getCookie = name => {
                            const cookies = document.cookie.split("; ");
                            for (let cookie of cookies) {
                              const [key, value] = cookie.split("=");
                              if (key === name) return JSON.parse(value)[0];
                            }
                            return "";
                          };
                          return ($state.token = getCookie("token"));
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getCookie"] != null &&
                typeof $steps["getCookie"] === "object" &&
                typeof $steps["getCookie"].then === "function"
              ) {
                $steps["getCookie"] = await $steps["getCookie"];
              }
            }}
          />

          {(() => {
            try {
              return $ctx.query.inApp != "true";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__ytDOx, {
                [sty.freeBoxdark__ytDOxbkz05]: hasVariant(
                  $state,
                  "dark",
                  "dark"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox___3O4C8)}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return window.history.back();
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
              >
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img, {
                    [sty.imgdark]: hasVariant($state, "dark", "dark")
                  })}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"20px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liom_hamyar/images/image38.svg",
                    fullWidth: 24,
                    fullHeight: 24,
                    aspectRatio: 1
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pmZGg,
                    {
                      [sty.textdark__pmZGgbkz05]: hasVariant(
                        $state,
                        "dark",
                        "dark"
                      )
                    }
                  )}
                >
                  {"\u062a\u0646\u0638\u06cc\u0645\u0627\u062a"}
                </div>
              </div>
            </div>
          ) : null}
          {(() => {
            try {
              return !$state.getUserInfo.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__ikTgu)}>
              <div className={classNames(projectcss.all, sty.freeBox__iW6Ev)}>
                <div className={classNames(projectcss.all, sty.freeBox__rckdR)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__xUcow, {
                      [sty.freeBoxdark__xUcowbkz05]: hasVariant(
                        $state,
                        "dark",
                        "dark"
                      )
                    })}
                  >
                    <SlideinModal
                      data-plasmic-name={"dateModal"}
                      data-plasmic-override={overrides.dateModal}
                      className={classNames("__wab_instance", sty.dateModal, {
                        [sty.dateModaldark]: hasVariant($state, "dark", "dark")
                      })}
                      click={generateStateValueProp($state, [
                        "dateModal",
                        "click"
                      ])}
                      dark={(() => {
                        try {
                          return $ctx.query.theme == "dark";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })()}
                      onClickChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "dateModal",
                          "click"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__epUv4,
                          hasVariant($state, "dark", "dark")
                            ? "picker-dark"
                            : ``,
                          {
                            [sty.freeBoxdark__epUv4Bkz05]: hasVariant(
                              $state,
                              "dark",
                              "dark"
                            )
                          }
                        )}
                      >
                        {(() => {
                          try {
                            return $state.typeInterDate == "manually";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })() ? (
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__wjIxG
                            )}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__kRjRh
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hSbHy
                                )}
                              >
                                {"\u0647\u0641\u062a\u0647"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__bXcJv
                                )}
                              >
                                <Pickers
                                  data-plasmic-name={"week2"}
                                  data-plasmic-override={overrides.week2}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.week2
                                  )}
                                  data={(() => {
                                    let myList = [];
                                    for (let i = 0; i < 40; i++) {
                                      myList.push({
                                        label: `${i}`,
                                        value: i
                                      });
                                    }
                                    return myList;
                                  })()}
                                  initialValue={generateStateValueProp($state, [
                                    "week2",
                                    "value"
                                  ])}
                                  onChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "week2",
                                      "value"
                                    ]).apply(null, eventArgs);
                                  }}
                                />
                              </div>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ygSxx
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rFRg
                                )}
                              >
                                {"\u0631\u0648\u0632"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ldvI
                                )}
                              >
                                <Pickers
                                  data-plasmic-name={"day2"}
                                  data-plasmic-override={overrides.day2}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.day2
                                  )}
                                  data={(() => {
                                    let myList = [];
                                    for (let i = 0; i < 7; i++) {
                                      myList.push({
                                        label: `${i}`,
                                        value: i
                                      });
                                    }
                                    return myList;
                                  })()}
                                  initialValue={generateStateValueProp($state, [
                                    "day2",
                                    "value"
                                  ])}
                                  onChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "day2",
                                      "value"
                                    ]).apply(null, eventArgs);
                                  }}
                                />
                              </div>
                            </Stack__>
                          </Stack__>
                        ) : null}
                        {(() => {
                          try {
                            return $state.typeInterDate != "manually";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })() ? (
                          <DatePickers
                            data-plasmic-name={"datePickers"}
                            data-plasmic-override={overrides.datePickers}
                            SelectedDay={(() => {
                              if ($state.typeInterDate == "lastTime")
                                return $state.lastTime.day;
                              else return $state.dateOfBirth.day;
                            })()}
                            SelectedMonth={(() => {
                              if ($state.typeInterDate == "lastTime")
                                return $state.lastTime.month;
                              else return $state.dateOfBirth.month;
                            })()}
                            SelectedYear={(() => {
                              if ($state.typeInterDate == "lastTime")
                                return $state.lastTime.year;
                              else return $state.dateOfBirth.year;
                            })()}
                            className={classNames(
                              "__wab_instance",
                              sty.datePickers
                            )}
                            customYears={[
                              { value: 1403, label: "1403" },
                              { value: 1404, label: "1404" }
                            ]}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "datePickers",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            selectedValues={generateStateValueProp($state, [
                              "datePickers",
                              "value"
                            ])}
                          />
                        ) : null}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__r4OB
                        )}
                      >
                        <Button
                          data-plasmic-name={"button"}
                          data-plasmic-override={overrides.button}
                          className={classNames("__wab_instance", sty.button)}
                          color={generateStateValueProp($state, [
                            "button",
                            "color"
                          ])}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateDateOfBirth"] =
                              $state.typeInterDate == "dateOfBirth"
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["dateOfBirth"]
                                      },
                                      operation: 0,
                                      value: $state.datePickers.value
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["updateDateOfBirth"] != null &&
                              typeof $steps["updateDateOfBirth"] === "object" &&
                              typeof $steps["updateDateOfBirth"].then ===
                                "function"
                            ) {
                              $steps["updateDateOfBirth"] = await $steps[
                                "updateDateOfBirth"
                              ];
                            }

                            $steps["updateLastTime2"] =
                              $state.typeInterDate == "lastTime"
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["lastTime"]
                                      },
                                      operation: 0,
                                      value: $state.datePickers.value
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["updateLastTime2"] != null &&
                              typeof $steps["updateLastTime2"] === "object" &&
                              typeof $steps["updateLastTime2"].then ===
                                "function"
                            ) {
                              $steps["updateLastTime2"] = await $steps[
                                "updateLastTime2"
                              ];
                            }

                            $steps["updateLastTime"] =
                              $state.typeInterDate == "dateOfBirth"
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["lastTime"]
                                      },
                                      operation: 0,
                                      value: (() => {
                                        var jy = $state.datePickers.value.year;
                                        var jm = $state.datePickers.value.month;
                                        var jd = $state.datePickers.value.day;
                                        var gy = jy <= 979 ? 621 : 1600;
                                        jy -= jy <= 979 ? 0 : 979;
                                        var days =
                                          365 * jy +
                                          parseInt(jy / 33) * 8 +
                                          parseInt(((jy % 33) + 3) / 4) +
                                          78 +
                                          jd +
                                          (jm < 7
                                            ? (jm - 1) * 31
                                            : (jm - 7) * 30 + 186);
                                        gy += 400 * parseInt(days / 146097);
                                        days %= 146097;
                                        if (days > 36524) {
                                          gy += 100 * parseInt(--days / 36524);
                                          days %= 36524;
                                          if (days >= 365) days++;
                                        }
                                        gy += 4 * parseInt(days / 1461);
                                        days %= 1461;
                                        gy += parseInt((days - 1) / 365);
                                        if (days > 365) days = (days - 1) % 365;
                                        var gd = days + 1;
                                        var sal_a = [
                                          0,
                                          31,
                                          (gy % 4 == 0 && gy % 100 != 0) ||
                                          gy % 400 == 0
                                            ? 29
                                            : 28,
                                          31,
                                          30,
                                          31,
                                          30,
                                          31,
                                          31,
                                          30,
                                          31,
                                          30,
                                          31
                                        ];

                                        var gm;
                                        for (gm = 0; gm < 13; gm++) {
                                          var v = sal_a[gm];
                                          if (gd <= v) break;
                                          gd -= v;
                                        }
                                        const [year, month, day] = [gy, gm, gd];

                                        var date = new Date(
                                          year,
                                          month - 1,
                                          day
                                        );
                                        date.setDate(date.getDate() - 280);
                                        var gyNew = date.getFullYear();
                                        var gmNew = date.getMonth() + 1;
                                        var gdNew = date.getDate();
                                        var g_d_m = [
                                          0, 31, 59, 90, 120, 151, 181, 212,
                                          243, 273, 304, 334
                                        ];

                                        var jyNew = gyNew <= 1600 ? 0 : 979;
                                        gyNew =
                                          gyNew - (gyNew <= 1600 ? 621 : 1600);
                                        var gy2 = gmNew > 2 ? gyNew + 1 : gyNew;
                                        var daysNew =
                                          365 * gyNew +
                                          parseInt((gy2 + 3) / 4) -
                                          parseInt((gy2 + 99) / 100) +
                                          parseInt((gy2 + 399) / 400) -
                                          80 +
                                          gdNew +
                                          g_d_m[gmNew - 1];
                                        jyNew += 33 * parseInt(daysNew / 12053);
                                        daysNew %= 12053;
                                        jyNew += 4 * parseInt(daysNew / 1461);
                                        daysNew %= 1461;
                                        jyNew += parseInt((daysNew - 1) / 365);
                                        if (daysNew > 365)
                                          daysNew = (daysNew - 1) % 365;
                                        var jmNew =
                                          daysNew < 186
                                            ? 1 + parseInt(daysNew / 31)
                                            : 7 +
                                              parseInt((daysNew - 186) / 30);
                                        var jdNew =
                                          1 +
                                          (daysNew < 186
                                            ? daysNew % 31
                                            : (daysNew - 186) % 30);
                                        return {
                                          day: jdNew,
                                          month: jmNew,
                                          year: jyNew
                                        };
                                      })()
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["updateLastTime"] != null &&
                              typeof $steps["updateLastTime"] === "object" &&
                              typeof $steps["updateLastTime"].then ===
                                "function"
                            ) {
                              $steps["updateLastTime"] = await $steps[
                                "updateLastTime"
                              ];
                            }

                            $steps["updateDateOfBirth2"] =
                              $state.typeInterDate == "lastTime"
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["dateOfBirth"]
                                      },
                                      operation: 0,
                                      value: (() => {
                                        var jy = $state.datePickers.value.year;
                                        var jm = $state.datePickers.value.month;
                                        var jd = $state.datePickers.value.day;
                                        var gy = jy <= 979 ? 621 : 1600;
                                        jy -= jy <= 979 ? 0 : 979;
                                        var days =
                                          365 * jy +
                                          parseInt(jy / 33) * 8 +
                                          parseInt(((jy % 33) + 3) / 4) +
                                          78 +
                                          jd +
                                          (jm < 7
                                            ? (jm - 1) * 31
                                            : (jm - 7) * 30 + 186);
                                        gy += 400 * parseInt(days / 146097);
                                        days %= 146097;
                                        if (days > 36524) {
                                          gy += 100 * parseInt(--days / 36524);
                                          days %= 36524;
                                          if (days >= 365) days++;
                                        }
                                        gy += 4 * parseInt(days / 1461);
                                        days %= 1461;
                                        gy += parseInt((days - 1) / 365);
                                        if (days > 365) days = (days - 1) % 365;
                                        var gd = days + 1;
                                        var sal_a = [
                                          0,
                                          31,
                                          (gy % 4 == 0 && gy % 100 != 0) ||
                                          gy % 400 == 0
                                            ? 29
                                            : 28,
                                          31,
                                          30,
                                          31,
                                          30,
                                          31,
                                          31,
                                          30,
                                          31,
                                          30,
                                          31
                                        ];

                                        var gm;
                                        for (gm = 0; gm < 13; gm++) {
                                          var v = sal_a[gm];
                                          if (gd <= v) break;
                                          gd -= v;
                                        }
                                        const [year, month, day] = [gy, gm, gd];

                                        var date = new Date(
                                          year,
                                          month - 1,
                                          day
                                        );
                                        date.setDate(date.getDate() + 280);
                                        var gyNew = date.getFullYear();
                                        var gmNew = date.getMonth() + 1;
                                        var gdNew = date.getDate();
                                        var g_d_m = [
                                          0, 31, 59, 90, 120, 151, 181, 212,
                                          243, 273, 304, 334
                                        ];

                                        var jyNew = gyNew <= 1600 ? 0 : 979;
                                        gyNew =
                                          gyNew - (gyNew <= 1600 ? 621 : 1600);
                                        var gy2 = gmNew > 2 ? gyNew + 1 : gyNew;
                                        var daysNew =
                                          365 * gyNew +
                                          parseInt((gy2 + 3) / 4) -
                                          parseInt((gy2 + 99) / 100) +
                                          parseInt((gy2 + 399) / 400) -
                                          80 +
                                          gdNew +
                                          g_d_m[gmNew - 1];
                                        jyNew += 33 * parseInt(daysNew / 12053);
                                        daysNew %= 12053;
                                        jyNew += 4 * parseInt(daysNew / 1461);
                                        daysNew %= 1461;
                                        jyNew += parseInt((daysNew - 1) / 365);
                                        if (daysNew > 365)
                                          daysNew = (daysNew - 1) % 365;
                                        var jmNew =
                                          daysNew < 186
                                            ? 1 + parseInt(daysNew / 31)
                                            : 7 +
                                              parseInt((daysNew - 186) / 30);
                                        var jdNew =
                                          1 +
                                          (daysNew < 186
                                            ? daysNew % 31
                                            : (daysNew - 186) % 30);
                                        return {
                                          day: jdNew,
                                          month: jmNew,
                                          year: jyNew
                                        };
                                      })()
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["updateDateOfBirth2"] != null &&
                              typeof $steps["updateDateOfBirth2"] ===
                                "object" &&
                              typeof $steps["updateDateOfBirth2"].then ===
                                "function"
                            ) {
                              $steps["updateDateOfBirth2"] = await $steps[
                                "updateDateOfBirth2"
                              ];
                            }

                            $steps["updateDateOfBirth3"] =
                              $state.typeInterDate == "manually"
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["dateOfBirth"]
                                      },
                                      operation: 0,
                                      value: (() => {
                                        const today = new Date();
                                        const passedDays =
                                          $state.week2.value * 7 +
                                          $state.day2.value;
                                        const remainingDays = 280 - passedDays;
                                        const dueDate = new Date(today);
                                        dueDate.setDate(
                                          today.getDate() + remainingDays - 1
                                        );
                                        const formattedDueDate = dueDate
                                          .toISOString()
                                          .split("T")[0];
                                        var dd = window.jalaali.toJalaali(
                                          parseInt(
                                            formattedDueDate.split("-")[0]
                                          ),
                                          parseInt(
                                            formattedDueDate.split("-")[1]
                                          ),
                                          parseInt(
                                            formattedDueDate.split("-")[2]
                                          )
                                        );
                                        return {
                                          day: dd.jd,
                                          month: dd.jm,
                                          year: dd.jy
                                        };
                                      })()
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["updateDateOfBirth3"] != null &&
                              typeof $steps["updateDateOfBirth3"] ===
                                "object" &&
                              typeof $steps["updateDateOfBirth3"].then ===
                                "function"
                            ) {
                              $steps["updateDateOfBirth3"] = await $steps[
                                "updateDateOfBirth3"
                              ];
                            }

                            $steps["updateLastTime3"] =
                              $state.typeInterDate == "manually"
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["lastTime"]
                                      },
                                      operation: 0,
                                      value: (() => {
                                        const today = new Date();
                                        const passedDays =
                                          $state.week2.value * 7 +
                                          $state.day2.value;
                                        const remainingDays = 280 - passedDays;
                                        const dueDate = new Date(today);
                                        dueDate.setDate(
                                          today.getDate() + remainingDays - 280
                                        );
                                        const formattedDueDate = dueDate
                                          .toISOString()
                                          .split("T")[0];
                                        var dd = window.jalaali.toJalaali(
                                          parseInt(
                                            formattedDueDate.split("-")[0]
                                          ),
                                          parseInt(
                                            formattedDueDate.split("-")[1]
                                          ),
                                          parseInt(
                                            formattedDueDate.split("-")[2]
                                          )
                                        );
                                        return {
                                          day: dd.jd,
                                          month: dd.jm,
                                          year: dd.jy
                                        };
                                      })()
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["updateLastTime3"] != null &&
                              typeof $steps["updateLastTime3"] === "object" &&
                              typeof $steps["updateLastTime3"].then ===
                                "function"
                            ) {
                              $steps["updateLastTime3"] = await $steps[
                                "updateLastTime3"
                              ];
                            }

                            $steps["updateDay"] =
                              $state.typeInterDate == "manually"
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["day"]
                                      },
                                      operation: 0,
                                      value: $state.day2.value
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["updateDay"] != null &&
                              typeof $steps["updateDay"] === "object" &&
                              typeof $steps["updateDay"].then === "function"
                            ) {
                              $steps["updateDay"] = await $steps["updateDay"];
                            }

                            $steps["updateWeek"] =
                              $state.typeInterDate == "manually"
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["week"]
                                      },
                                      operation: 0,
                                      value: $state.week2.value
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["updateWeek"] != null &&
                              typeof $steps["updateWeek"] === "object" &&
                              typeof $steps["updateWeek"].then === "function"
                            ) {
                              $steps["updateWeek"] = await $steps["updateWeek"];
                            }

                            $steps["updateWeek2"] =
                              $state.typeInterDate != "manually"
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["week"]
                                      },
                                      operation: 0,
                                      value: (() => {
                                        let initialDate = new Date(
                                          $state.duDate
                                        );
                                        initialDate.setHours(23);
                                        initialDate.setMinutes(59);
                                        initialDate.setSeconds(59);
                                        let daysToSubtract = 280;
                                        let resultDate = new Date(initialDate);
                                        resultDate.setDate(
                                          resultDate.getDate() - daysToSubtract
                                        );
                                        let today = new Date();
                                        let differenceInTime =
                                          today - resultDate;
                                        let differenceInDays = Math.floor(
                                          differenceInTime /
                                            (1000 * 60 * 60 * 24)
                                        );
                                        return parseInt(
                                          (differenceInDays + 1) / 7
                                        ) == 0
                                          ? 1
                                          : parseInt(
                                              (differenceInDays + 1) / 7
                                            );
                                      })()
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["updateWeek2"] != null &&
                              typeof $steps["updateWeek2"] === "object" &&
                              typeof $steps["updateWeek2"].then === "function"
                            ) {
                              $steps["updateWeek2"] = await $steps[
                                "updateWeek2"
                              ];
                            }

                            $steps["updateDay2"] =
                              $state.typeInterDate != "manually"
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["day"]
                                      },
                                      operation: 0,
                                      value: (() => {
                                        let initialDate = new Date(
                                          $state.duDate
                                        );
                                        initialDate.setHours(23);
                                        initialDate.setMinutes(59);
                                        initialDate.setSeconds(59);
                                        let daysToSubtract = 280;
                                        let resultDate = new Date(initialDate);
                                        resultDate.setDate(
                                          resultDate.getDate() - daysToSubtract
                                        );
                                        let today = new Date();
                                        let differenceInTime =
                                          today - resultDate;
                                        let differenceInDays = Math.floor(
                                          differenceInTime /
                                            (1000 * 60 * 60 * 24)
                                        );
                                        return ((differenceInDays + 1) % 7) + 1;
                                      })()
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["updateDay2"] != null &&
                              typeof $steps["updateDay2"] === "object" &&
                              typeof $steps["updateDay2"].then === "function"
                            ) {
                              $steps["updateDay2"] = await $steps["updateDay2"];
                            }

                            $steps["updateSlideinModalClick"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["dateModal", "click"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateSlideinModalClick"] != null &&
                              typeof $steps["updateSlideinModalClick"] ===
                                "object" &&
                              typeof $steps["updateSlideinModalClick"].then ===
                                "function"
                            ) {
                              $steps["updateSlideinModalClick"] = await $steps[
                                "updateSlideinModalClick"
                              ];
                            }

                            $steps["updateDuDate"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["duDate"]
                                    },
                                    operation: 0,
                                    value: (() => {
                                      var jy = $state.dateOfBirth.year;
                                      var jm = $state.dateOfBirth.month;
                                      var jd = $state.dateOfBirth.day;
                                      var gy = jy <= 979 ? 621 : 1600;
                                      jy -= jy <= 979 ? 0 : 979;
                                      var days =
                                        365 * jy +
                                        parseInt(jy / 33) * 8 +
                                        parseInt(((jy % 33) + 3) / 4) +
                                        78 +
                                        jd +
                                        (jm < 7
                                          ? (jm - 1) * 31
                                          : (jm - 7) * 30 + 186);
                                      gy += 400 * parseInt(days / 146097);
                                      days %= 146097;
                                      if (days > 36524) {
                                        gy += 100 * parseInt(--days / 36524);
                                        days %= 36524;
                                        if (days >= 365) days++;
                                      }
                                      gy += 4 * parseInt(days / 1461);
                                      days %= 1461;
                                      gy += parseInt((days - 1) / 365);
                                      if (days > 365) days = (days - 1) % 365;
                                      var gd = days + 1;
                                      var sal_a = [
                                        0,
                                        31,
                                        (gy % 4 == 0 && gy % 100 != 0) ||
                                        gy % 400 == 0
                                          ? 29
                                          : 28,
                                        31,
                                        30,
                                        31,
                                        30,
                                        31,
                                        31,
                                        30,
                                        31,
                                        30,
                                        31
                                      ];

                                      var gm;
                                      for (gm = 0; gm < 13; gm++) {
                                        var v = sal_a[gm];
                                        if (gd <= v) break;
                                        gd -= v;
                                      }
                                      return [gy, gm, gd];
                                    })()
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateDuDate"] != null &&
                              typeof $steps["updateDuDate"] === "object" &&
                              typeof $steps["updateDuDate"].then === "function"
                            ) {
                              $steps["updateDuDate"] = await $steps[
                                "updateDuDate"
                              ];
                            }
                          }}
                          onColorChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button",
                                "color"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                        >
                          {"\u062a\u0627\u06cc\u06cc\u062f"}
                        </Button>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__z4LTn
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateSlideinModalClick"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["dateModal", "click"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateSlideinModalClick"] != null &&
                              typeof $steps["updateSlideinModalClick"] ===
                                "object" &&
                              typeof $steps["updateSlideinModalClick"].then ===
                                "function"
                            ) {
                              $steps["updateSlideinModalClick"] = await $steps[
                                "updateSlideinModalClick"
                              ];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xQvCh
                            )}
                          >
                            {"\u0628\u0633\u062a\u0646"}
                          </div>
                        </div>
                      </div>
                    </SlideinModal>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pd8Nv,
                        {
                          [sty.textdark__pd8Nvbkz05]: hasVariant(
                            $state,
                            "dark",
                            "dark"
                          )
                        }
                      )}
                    >
                      {
                        "\u0628\u0631\u0627\u06cc \u0627\u06cc\u0646\u06a9\u0647 \u0628\u062f\u0648\u0646\u06cc \u06a9\u0648\u0686\u0648\u0644\u0648\u062a \u0627\u0644\u0627\u0646 \u062a\u0648\u06cc \u06a9\u062f\u0648\u0645 \u0647\u0641\u062a\u0647 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc\u0647\u060c \u06cc\u06a9\u06cc \u0627\u0632 \u0631\u0648\u0634\u200c\u0647\u0627\u06cc \u0632\u06cc\u0631 \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646 \u0648 \u0627\u0637\u0644\u0627\u0639\u0627\u062a\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646 \u062a\u0627 \u0645\u0627 \u0645\u062d\u0627\u0633\u0628\u0647 \u06a9\u0646\u06cc\u0645! \ud83d\ude0a"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9MdlR
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              $state.duDate[0] +
                              "-" +
                              $state.duDate[1] +
                              "-" +
                              $state.duDate[2] +
                              " 10:10:10"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__jxVCa)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oCsPb
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateTypeInterDate"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["typeInterDate"]
                                  },
                                  operation: 0,
                                  value: "dateOfBirth"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateTypeInterDate"] != null &&
                            typeof $steps["updateTypeInterDate"] === "object" &&
                            typeof $steps["updateTypeInterDate"].then ===
                              "function"
                          ) {
                            $steps["updateTypeInterDate"] = await $steps[
                              "updateTypeInterDate"
                            ];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1YyBe
                          )}
                          style={(() => {
                            try {
                              return {
                                "background-color":
                                  $state.typeInterDate == "dateOfBirth"
                                    ? "rgb(130, 84, 198 , 0.1)"
                                    : "rgb(130, 84, 198 , 0)",
                                color: "#7444BC"
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        >
                          {
                            "\u062a\u0627\u0631\u06cc\u062e \u0632\u0627\u06cc\u0645\u0627\u0646"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nGHhe
                          )}
                        >
                          {
                            "\u062a\u0627\u0631\u06cc\u062e \u0632\u0627\u06cc\u0645\u0627\u0646"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lhcX
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateTypeInterDate"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["typeInterDate"]
                                  },
                                  operation: 0,
                                  value: "lastTime"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateTypeInterDate"] != null &&
                            typeof $steps["updateTypeInterDate"] === "object" &&
                            typeof $steps["updateTypeInterDate"].then ===
                              "function"
                          ) {
                            $steps["updateTypeInterDate"] = await $steps[
                              "updateTypeInterDate"
                            ];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vjiLz
                          )}
                          style={(() => {
                            try {
                              return {
                                "background-color":
                                  $state.typeInterDate == "lastTime"
                                    ? "rgb(130, 84, 198 , 0.1)"
                                    : "rgb(130, 84, 198 , 0)",
                                color: "#7444BC"
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        >
                          {
                            "\u0622\u062e\u0631\u06cc\u0646 \u0642\u0627\u0639\u062f\u06af\u06cc"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kOt0T
                          )}
                        >
                          {
                            "\u062a\u0627\u0631\u06cc\u062e \u0632\u0627\u06cc\u0645\u0627\u0646"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ytjUr
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateTypeInterDate"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["typeInterDate"]
                                  },
                                  operation: 0,
                                  value: "manually"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateTypeInterDate"] != null &&
                            typeof $steps["updateTypeInterDate"] === "object" &&
                            typeof $steps["updateTypeInterDate"].then ===
                              "function"
                          ) {
                            $steps["updateTypeInterDate"] = await $steps[
                              "updateTypeInterDate"
                            ];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xj4By
                          )}
                          style={(() => {
                            try {
                              return {
                                "background-color":
                                  $state.typeInterDate == "manually"
                                    ? "rgb(130, 84, 198 , 0.1)"
                                    : "rgb(130, 84, 198 , 0)",
                                color: "#7444BC"
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        >
                          {
                            "\u0647\u0641\u062a\u0647 \u0648 \u0631\u0648\u0632 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__y2YJ7
                          )}
                        >
                          {
                            "\u062a\u0627\u0631\u06cc\u062e \u0632\u0627\u06cc\u0645\u0627\u0646"
                          }
                        </div>
                      </div>
                    </Stack__>
                    {(() => {
                      try {
                        return $state.typeInterDate == "dateOfBirth";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__b8Ran
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jhTi,
                            {
                              [sty.textdark__jhTibkz05]: hasVariant(
                                $state,
                                "dark",
                                "dark"
                              )
                            }
                          )}
                        >
                          {
                            "\u062a\u0627\u0631\u06cc\u062e \u0632\u0627\u06cc\u0645\u0627\u0646\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646 :"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1FrZr,
                            hasVariant($state, "dark", "dark")
                              ? "input-dark"
                              : ``,
                            {
                              [sty.freeBoxdark___1FrZrbkz05]: hasVariant(
                                $state,
                                "dark",
                                "dark"
                              )
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateSlideinModalClick"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["dateModal", "click"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateSlideinModalClick"] != null &&
                              typeof $steps["updateSlideinModalClick"] ===
                                "object" &&
                              typeof $steps["updateSlideinModalClick"].then ===
                                "function"
                            ) {
                              $steps["updateSlideinModalClick"] = await $steps[
                                "updateSlideinModalClick"
                              ];
                            }

                            $steps["updateTypeDate"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["typeInterDate"]
                                    },
                                    operation: 0,
                                    value: "dateOfBirth"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateTypeDate"] != null &&
                              typeof $steps["updateTypeDate"] === "object" &&
                              typeof $steps["updateTypeDate"].then ===
                                "function"
                            ) {
                              $steps["updateTypeDate"] = await $steps[
                                "updateTypeDate"
                              ];
                            }
                          }}
                        >
                          {(() => {
                            const child$Props = {
                              bordered: true,
                              className: classNames(
                                "__wab_instance",
                                sty.dateOfBirthBox,
                                {
                                  [sty.dateOfBirthBoxdark]: hasVariant(
                                    $state,
                                    "dark",
                                    "dark"
                                  )
                                }
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["dateOfBirthBox", "value"],
                                  AntdInput_Helpers
                                ).apply(null, eventArgs);
                              },
                              placeholder:
                                "\u0645\u062b\u0644\u0627 7 \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a 1381",
                              readOnly: true,
                              value: generateStateValueProp($state, [
                                "dateOfBirthBox",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "dateOfBirthBox.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"dateOfBirthBox"}
                                data-plasmic-override={overrides.dateOfBirthBox}
                                {...child$Props}
                              />
                            );
                          })()}
                        </div>
                      </Stack__>
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__t0Jql,
                        {
                          [sty.freeBoxdark__t0JqLbkz05]: hasVariant(
                            $state,
                            "dark",
                            "dark"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tThr
                        )}
                      >
                        {""}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iKyjT
                        )}
                      >
                        {"\u06cc\u0627"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lp1Bw
                        )}
                      >
                        {""}
                      </div>
                    </div>
                    {(() => {
                      try {
                        return $state.typeInterDate == "lastTime";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__buwcy
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hxpdj,
                            {
                              [sty.textdark__hxpdJbkz05]: hasVariant(
                                $state,
                                "dark",
                                "dark"
                              )
                            }
                          )}
                        >
                          {
                            "\u062a\u0627\u0631\u06cc\u062e \u0627\u0648\u0644\u06cc\u0646 \u0631\u0648\u0632 \u0627\u0632 \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646:"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lChI,
                            hasVariant($state, "dark", "dark")
                              ? "input-dark"
                              : ``,
                            {
                              [sty.freeBoxdark__lChIbkz05]: hasVariant(
                                $state,
                                "dark",
                                "dark"
                              )
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateSlideinModalClick"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["dateModal", "click"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateSlideinModalClick"] != null &&
                              typeof $steps["updateSlideinModalClick"] ===
                                "object" &&
                              typeof $steps["updateSlideinModalClick"].then ===
                                "function"
                            ) {
                              $steps["updateSlideinModalClick"] = await $steps[
                                "updateSlideinModalClick"
                              ];
                            }

                            $steps["updateTypeDate"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["typeInterDate"]
                                    },
                                    operation: 0,
                                    value: "lastTime"
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateTypeDate"] != null &&
                              typeof $steps["updateTypeDate"] === "object" &&
                              typeof $steps["updateTypeDate"].then ===
                                "function"
                            ) {
                              $steps["updateTypeDate"] = await $steps[
                                "updateTypeDate"
                              ];
                            }
                          }}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.lastTimeBox,
                                {
                                  [sty.lastTimeBoxdark]: hasVariant(
                                    $state,
                                    "dark",
                                    "dark"
                                  )
                                }
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["lastTimeBox", "value"],
                                  AntdInput_Helpers
                                ).apply(null, eventArgs);
                              },
                              placeholder:
                                "\u0645\u062b\u0644\u0627 3 \u0627\u0633\u0641\u0646\u062f 1403",
                              readOnly: true,
                              value: generateStateValueProp($state, [
                                "lastTimeBox",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "lastTimeBox.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"lastTimeBox"}
                                data-plasmic-override={overrides.lastTimeBox}
                                {...child$Props}
                              />
                            );
                          })()}
                        </div>
                      </Stack__>
                    ) : null}
                    {(() => {
                      try {
                        return $state.typeInterDate == "manually";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__otCka
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateDateModalClick"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dateModal", "click"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDateModalClick"] != null &&
                            typeof $steps["updateDateModalClick"] ===
                              "object" &&
                            typeof $steps["updateDateModalClick"].then ===
                              "function"
                          ) {
                            $steps["updateDateModalClick"] = await $steps[
                              "updateDateModalClick"
                            ];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1Snno,
                            {
                              [sty.textdark___1SnnObkz05]: hasVariant(
                                $state,
                                "dark",
                                "dark"
                              )
                            }
                          )}
                        >
                          {
                            "\u0647\u0641\u062a\u0647 \u0648 \u0631\u0648\u0632 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc\u062a \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646:"
                          }
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mfAv5
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zg24T
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wn8Ry
                              )}
                            >
                              {"\u0647\u0641\u062a\u0647"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__jy9Bs
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__uUBb
                                )}
                              >
                                <React.Fragment>{$state.week}</React.Fragment>
                              </div>
                            </div>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jLonn
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__l1Ehf
                              )}
                            >
                              {"\u0631\u0648\u0632"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__nD7AD
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__h1Rd
                                )}
                              >
                                <React.Fragment>{$state.day}</React.Fragment>
                              </div>
                            </div>
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    ) : null}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox___8T2M)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__q9EfV)}
                  >
                    <Button
                      data-plasmic-name={"button3"}
                      data-plasmic-override={overrides.button3}
                      className={classNames("__wab_instance", sty.button3)}
                      color={generateStateValueProp($state, [
                        "button3",
                        "color"
                      ])}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return $state.userId;
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["invokeGlobalAction2"] = (() => {
                          var jy = $state.dateOfBirth.year;
                          var jm = $state.dateOfBirth.month;
                          var jd = $state.dateOfBirth.day;
                          var gy = jy <= 979 ? 621 : 1600;
                          jy -= jy <= 979 ? 0 : 979;
                          var days =
                            365 * jy +
                            parseInt(jy / 33) * 8 +
                            parseInt(((jy % 33) + 3) / 4) +
                            78 +
                            jd +
                            (jm < 7 ? (jm - 1) * 31 : (jm - 7) * 30 + 186);
                          gy += 400 * parseInt(days / 146097);
                          days %= 146097;
                          if (days > 36524) {
                            gy += 100 * parseInt(--days / 36524);
                            days %= 36524;
                            if (days >= 365) days++;
                          }
                          gy += 4 * parseInt(days / 1461);
                          days %= 1461;
                          gy += parseInt((days - 1) / 365);
                          if (days > 365) days = (days - 1) % 365;
                          var gd = days + 1;
                          var sal_a = [
                            0,
                            31,
                            (gy % 4 == 0 && gy % 100 != 0) || gy % 400 == 0
                              ? 29
                              : 28,
                            31,
                            30,
                            31,
                            30,
                            31,
                            31,
                            30,
                            31,
                            30,
                            31
                          ];

                          var gm;
                          for (gm = 0; gm < 13; gm++) {
                            var v = sal_a[gm];
                            if (gd <= v) break;
                            gd -= v;
                          }
                          const d =
                            gy +
                            "-" +
                            (gm <= 9 ? "0" : "") +
                            gm +
                            "-" +
                            (gd <= 9 ? "0" : "") +
                            gd +
                            "T10:10:10";
                          const specifiedDate = new Date(d);
                          const today = new Date();
                          if (today > specifiedDate) {
                            return false;
                          }
                          const diffTime = Math.abs(today - specifiedDate);
                          const diffDays = Math.ceil(
                            diffTime / (1000 * 60 * 60 * 24)
                          );
                          return diffDays > 280 ? false : true;
                        })()
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f",
                                  "top-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction2"] != null &&
                          typeof $steps["invokeGlobalAction2"] === "object" &&
                          typeof $steps["invokeGlobalAction2"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction2"] = await $steps[
                            "invokeGlobalAction2"
                          ];
                        }

                        $steps["invokeGlobalAction"] = (() => {
                          var jy = $state.dateOfBirth.year;
                          var jm = $state.dateOfBirth.month;
                          var jd = $state.dateOfBirth.day;
                          var gy = jy <= 979 ? 621 : 1600;
                          jy -= jy <= 979 ? 0 : 979;
                          var days =
                            365 * jy +
                            parseInt(jy / 33) * 8 +
                            parseInt(((jy % 33) + 3) / 4) +
                            78 +
                            jd +
                            (jm < 7 ? (jm - 1) * 31 : (jm - 7) * 30 + 186);
                          gy += 400 * parseInt(days / 146097);
                          days %= 146097;
                          if (days > 36524) {
                            gy += 100 * parseInt(--days / 36524);
                            days %= 36524;
                            if (days >= 365) days++;
                          }
                          gy += 4 * parseInt(days / 1461);
                          days %= 1461;
                          gy += parseInt((days - 1) / 365);
                          if (days > 365) days = (days - 1) % 365;
                          var gd = days + 1;
                          var sal_a = [
                            0,
                            31,
                            (gy % 4 == 0 && gy % 100 != 0) || gy % 400 == 0
                              ? 29
                              : 28,
                            31,
                            30,
                            31,
                            30,
                            31,
                            31,
                            30,
                            31,
                            30,
                            31
                          ];

                          var gm;
                          for (gm = 0; gm < 13; gm++) {
                            var v = sal_a[gm];
                            if (gd <= v) break;
                            gd -= v;
                          }
                          const d =
                            gy +
                            "-" +
                            (gm <= 9 ? "0" : "") +
                            gm +
                            "-" +
                            (gd <= 9 ? "0" : "") +
                            gd +
                            "T10:10:10";
                          const specifiedDate = new Date(d);
                          const today = new Date();
                          if (today > specifiedDate) {
                            return false;
                          }
                          const diffTime = Math.abs(today - specifiedDate);
                          const diffDays = Math.ceil(
                            diffTime / (1000 * 60 * 60 * 24)
                          );
                          return diffDays > 280 ? false : true;
                        })()
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://n8n.staas.ir/webhook/status",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        area: "pregnancy",
                                        duDate:
                                          $state.duDate[0] +
                                          "-" +
                                          $state.duDate[1] +
                                          "-" +
                                          $state.duDate[2] +
                                          " 10:10:10",
                                        userId: $state.userId
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  {
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization:
                                        "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHAiOiJsaW9tIn0.Tuzd74LOuzwCnvvh8Wsa99DIW-NRs1LLHPhayXSZ3Wk"
                                    }
                                  }
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["invokeGlobalAction3"] = (() => {
                          var jy = $state.dateOfBirth.year;
                          var jm = $state.dateOfBirth.month;
                          var jd = $state.dateOfBirth.day;
                          var gy = jy <= 979 ? 621 : 1600;
                          jy -= jy <= 979 ? 0 : 979;
                          var days =
                            365 * jy +
                            parseInt(jy / 33) * 8 +
                            parseInt(((jy % 33) + 3) / 4) +
                            78 +
                            jd +
                            (jm < 7 ? (jm - 1) * 31 : (jm - 7) * 30 + 186);
                          gy += 400 * parseInt(days / 146097);
                          days %= 146097;
                          if (days > 36524) {
                            gy += 100 * parseInt(--days / 36524);
                            days %= 36524;
                            if (days >= 365) days++;
                          }
                          gy += 4 * parseInt(days / 1461);
                          days %= 1461;
                          gy += parseInt((days - 1) / 365);
                          if (days > 365) days = (days - 1) % 365;
                          var gd = days + 1;
                          var sal_a = [
                            0,
                            31,
                            (gy % 4 == 0 && gy % 100 != 0) || gy % 400 == 0
                              ? 29
                              : 28,
                            31,
                            30,
                            31,
                            30,
                            31,
                            31,
                            30,
                            31,
                            30,
                            31
                          ];

                          var gm;
                          for (gm = 0; gm < 13; gm++) {
                            var v = sal_a[gm];
                            if (gd <= v) break;
                            gd -= v;
                          }
                          const d =
                            gy +
                            "-" +
                            (gm <= 9 ? "0" : "") +
                            gm +
                            "-" +
                            (gd <= 9 ? "0" : "") +
                            gd +
                            "T10:10:10";
                          const specifiedDate = new Date(d);
                          const today = new Date();
                          if (today > specifiedDate) {
                            return true;
                          }
                          const diffTime = Math.abs(today - specifiedDate);
                          const diffDays = Math.ceil(
                            diffTime / (1000 * 60 * 60 * 24)
                          );
                          return diffDays <= 280 ? false : true;
                        })()
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u062f\u0631\u0633\u062a \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f",
                                  "top-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction3"] != null &&
                          typeof $steps["invokeGlobalAction3"] === "object" &&
                          typeof $steps["invokeGlobalAction3"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction3"] = await $steps[
                            "invokeGlobalAction3"
                          ];
                        }

                        $steps["goToPage"] = (() => {
                          if (
                            $state.duDate == "" ||
                            $state.dateOfBirth == null ||
                            $state.dateOfBirth == ""
                          ) {
                            return false;
                          }
                          var jy = $state.dateOfBirth.year;
                          var jm = $state.dateOfBirth.month;
                          var jd = $state.dateOfBirth.day;
                          var gy = jy <= 979 ? 621 : 1600;
                          jy -= jy <= 979 ? 0 : 979;
                          var days =
                            365 * jy +
                            parseInt(jy / 33) * 8 +
                            parseInt(((jy % 33) + 3) / 4) +
                            78 +
                            jd +
                            (jm < 7 ? (jm - 1) * 31 : (jm - 7) * 30 + 186);
                          gy += 400 * parseInt(days / 146097);
                          days %= 146097;
                          if (days > 36524) {
                            gy += 100 * parseInt(--days / 36524);
                            days %= 36524;
                            if (days >= 365) days++;
                          }
                          gy += 4 * parseInt(days / 1461);
                          days %= 1461;
                          gy += parseInt((days - 1) / 365);
                          if (days > 365) days = (days - 1) % 365;
                          var gd = days + 1;
                          var sal_a = [
                            0,
                            31,
                            (gy % 4 == 0 && gy % 100 != 0) || gy % 400 == 0
                              ? 29
                              : 28,
                            31,
                            30,
                            31,
                            30,
                            31,
                            31,
                            30,
                            31,
                            30,
                            31
                          ];

                          var gm;
                          for (gm = 0; gm < 13; gm++) {
                            var v = sal_a[gm];
                            if (gd <= v) break;
                            gd -= v;
                          }
                          const d =
                            gy +
                            "-" +
                            (gm <= 9 ? "0" : "") +
                            gm +
                            "-" +
                            (gd <= 9 ? "0" : "") +
                            gd +
                            "T10:10:10";
                          const specifiedDate = new Date(d);
                          const today = new Date();
                          if (today > specifiedDate) {
                            return false;
                          }
                          const diffTime = Math.abs(today - specifiedDate);
                          const diffDays = Math.ceil(
                            diffTime / (1000 * 60 * 60 * 24)
                          );
                          return diffDays > 280 ? false : true;
                        })()
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return (() => {
                                      var token = $state.token;
                                      return (
                                        "https://apps.liom.app/pregnancy/?token=" +
                                        token +
                                        "&userId=" +
                                        $state.userId +
                                        "&theme=" +
                                        $ctx.query.theme +
                                        "&inApp=false" +
                                        "&version=" +
                                        $ctx.query.version
                                      );
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }

                        $steps["invokeGlobalAction4"] = (() => {
                          var jy = $state.dateOfBirth.year;
                          var jm = $state.dateOfBirth.month;
                          var jd = $state.dateOfBirth.day;
                          var gy = jy <= 979 ? 621 : 1600;
                          jy -= jy <= 979 ? 0 : 979;
                          var days =
                            365 * jy +
                            parseInt(jy / 33) * 8 +
                            parseInt(((jy % 33) + 3) / 4) +
                            78 +
                            jd +
                            (jm < 7 ? (jm - 1) * 31 : (jm - 7) * 30 + 186);
                          gy += 400 * parseInt(days / 146097);
                          days %= 146097;
                          if (days > 36524) {
                            gy += 100 * parseInt(--days / 36524);
                            days %= 36524;
                            if (days >= 365) days++;
                          }
                          gy += 4 * parseInt(days / 1461);
                          days %= 1461;
                          gy += parseInt((days - 1) / 365);
                          if (days > 365) days = (days - 1) % 365;
                          var gd = days + 1;
                          var sal_a = [
                            0,
                            31,
                            (gy % 4 == 0 && gy % 100 != 0) || gy % 400 == 0
                              ? 29
                              : 28,
                            31,
                            30,
                            31,
                            30,
                            31,
                            31,
                            30,
                            31,
                            30,
                            31
                          ];

                          var gm;
                          for (gm = 0; gm < 13; gm++) {
                            var v = sal_a[gm];
                            if (gd <= v) break;
                            gd -= v;
                          }
                          const d =
                            gy +
                            "-" +
                            (gm <= 9 ? "0" : "") +
                            gm +
                            "-" +
                            (gd <= 9 ? "0" : "") +
                            gd +
                            "T10:10:10";
                          const specifiedDate = new Date(d);
                          const today = new Date();
                          if (today > specifiedDate) {
                            return false;
                          }
                          const diffTime = Math.abs(today - specifiedDate);
                          const diffDays = Math.ceil(
                            diffTime / (1000 * 60 * 60 * 24)
                          );
                          return diffDays > 280 ? false : true;
                        })()
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://api.liom.app/service/log",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        userId:
                                          $state.userId > 0
                                            ? $state.userId
                                            : "guest",
                                        pageName: "settingPage",
                                        action: "click-saveDate",
                                        extraData: {}
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  {
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization:
                                        "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjMiLCJuYW1lIjoicHJlZ25hbmN5In0.nE_MuQ821HUfFQAujqlhizJRCtnhZp4Y4DYHZzVGUe4"
                                    }
                                  }
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction4"] != null &&
                          typeof $steps["invokeGlobalAction4"] === "object" &&
                          typeof $steps["invokeGlobalAction4"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction4"] = await $steps[
                            "invokeGlobalAction4"
                          ];
                        }
                      }}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button3",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                    >
                      {
                        "\u0630\u062e\u06cc\u0631\u0647 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a"
                      }
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          ) : null}
          <ApiRequest
            data-plasmic-name={"getUserInfo"}
            data-plasmic-override={overrides.getUserInfo}
            className={classNames("__wab_instance", sty.getUserInfo)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getUserInfo", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "getUserInfo",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getUserInfo", "data"]).apply(
                null,
                eventArgs
              );

              (async data => {
                const $steps = {};

                $steps["updateIsGetInfo"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isGetInfo"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateIsGetInfo"] != null &&
                  typeof $steps["updateIsGetInfo"] === "object" &&
                  typeof $steps["updateIsGetInfo"].then === "function"
                ) {
                  $steps["updateIsGetInfo"] = await $steps["updateIsGetInfo"];
                }
              }).apply(null, eventArgs);
            }}
            params={(() => {
              try {
                return {
                  token: $state.token
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/userInfo"}
          />

          {(() => {
            try {
              return $state.getUserInfo.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__lzt2L)}>
              {(() => {
                try {
                  return true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <LottieWrapper
                  data-plasmic-name={"lottie"}
                  data-plasmic-override={overrides.lottie}
                  animationData={{
                    nm: "Loading Dots",
                    ddd: 0,
                    h: 50,
                    w: 100,
                    meta: { g: "@lottiefiles/toolkit-js 0.33.2" },
                    layers: [
                      {
                        ty: 4,
                        nm: "Dot4",
                        sr: 1,
                        st: 0,
                        op: 360,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: false,
                        ao: 0,
                        ks: {
                          a: { a: 0, k: [-284, 92, 0], ix: 1 },
                          s: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [2.61, 2.32, 100],
                                t: 25
                              },
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [3.91, 3.47, 100],
                                t: 39
                              },
                              { s: [2.61, 2.32, 100], t: 55 }
                            ],
                            ix: 6
                          },
                          sk: { a: 0, k: 0 },
                          p: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [59.48, 25, 0],
                                t: 25
                              },
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [59.48, 23.15, 0],
                                t: 39
                              },
                              { s: [59.48, 25, 0], t: 55 }
                            ],
                            ix: 2
                          },
                          r: { a: 0, k: 0, ix: 10 },
                          sa: { a: 0, k: 0 },
                          o: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [25],
                                t: 25
                              },
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [100],
                                t: 39
                              },
                              { s: [25], t: 55 }
                            ],
                            ix: 11
                          }
                        },
                        ef: [],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Ellipse 1",
                            ix: 1,
                            cix: 2,
                            np: 3,
                            it: [
                              {
                                ty: "el",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Ellipse",
                                nm: "Ellipse Path 1",
                                d: 1,
                                p: { a: 0, k: [0, 0], ix: 3 },
                                s: { a: 0, k: [120, 120], ix: 2 }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Fill 1",
                                c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [-284, 92], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          }
                        ],
                        ind: 1
                      },
                      {
                        ty: 4,
                        nm: "Dot3",
                        sr: 1,
                        st: 0,
                        op: 360,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: false,
                        ao: 0,
                        ks: {
                          a: { a: 0, k: [-284, 92, 0], ix: 1 },
                          s: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [2.61, 2.32, 100],
                                t: 17
                              },
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [3.91, 3.47, 100],
                                t: 31
                              },
                              { s: [2.61, 2.32, 100], t: 47 }
                            ],
                            ix: 6
                          },
                          sk: { a: 0, k: 0 },
                          p: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [53.23, 25, 0],
                                t: 17
                              },
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [53.23, 23.15, 0],
                                t: 31
                              },
                              { s: [53.23, 25, 0], t: 47 }
                            ],
                            ix: 2
                          },
                          r: { a: 0, k: 0, ix: 10 },
                          sa: { a: 0, k: 0 },
                          o: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [25],
                                t: 17
                              },
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [100],
                                t: 31
                              },
                              { s: [25], t: 47 }
                            ],
                            ix: 11
                          }
                        },
                        ef: [],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Ellipse 1",
                            ix: 1,
                            cix: 2,
                            np: 3,
                            it: [
                              {
                                ty: "el",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Ellipse",
                                nm: "Ellipse Path 1",
                                d: 1,
                                p: { a: 0, k: [0, 0], ix: 3 },
                                s: { a: 0, k: [120, 120], ix: 2 }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Fill 1",
                                c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [-284, 92], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          }
                        ],
                        ind: 2
                      },
                      {
                        ty: 4,
                        nm: "Dot2",
                        sr: 1,
                        st: 0,
                        op: 360,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: false,
                        ao: 0,
                        ks: {
                          a: { a: 0, k: [-284, 92, 0], ix: 1 },
                          s: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [2.61, 2.32, 100],
                                t: 9
                              },
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [3.91, 3.47, 100],
                                t: 23
                              },
                              { s: [2.61, 2.32, 100], t: 39 }
                            ],
                            ix: 6
                          },
                          sk: { a: 0, k: 0 },
                          p: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [46.98, 25, 0],
                                t: 9
                              },
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [46.98, 23.15, 0],
                                t: 23
                              },
                              { s: [46.98, 25, 0], t: 39 }
                            ],
                            ix: 2
                          },
                          r: { a: 0, k: 0, ix: 10 },
                          sa: { a: 0, k: 0 },
                          o: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [25],
                                t: 9
                              },
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [100],
                                t: 23
                              },
                              { s: [25], t: 39 }
                            ],
                            ix: 11
                          }
                        },
                        ef: [],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Ellipse 1",
                            ix: 1,
                            cix: 2,
                            np: 3,
                            it: [
                              {
                                ty: "el",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Ellipse",
                                nm: "Ellipse Path 1",
                                d: 1,
                                p: { a: 0, k: [0, 0], ix: 3 },
                                s: { a: 0, k: [120, 120], ix: 2 }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Fill 1",
                                c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [-284, 92], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          }
                        ],
                        ind: 3
                      },
                      {
                        ty: 4,
                        nm: "Dot1",
                        sr: 1,
                        st: 0,
                        op: 360,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: false,
                        ao: 0,
                        ks: {
                          a: { a: 0, k: [-284, 92, 0], ix: 1 },
                          s: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [2.61, 2.32, 100],
                                t: 0
                              },
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [3.91, 3.47, 100],
                                t: 14
                              },
                              { s: [2.61, 2.32, 100], t: 30 }
                            ],
                            ix: 6
                          },
                          sk: { a: 0, k: 0 },
                          p: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [40.73, 25, 0],
                                t: 0
                              },
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [40.73, 23.15, 0],
                                t: 14
                              },
                              { s: [40.73, 25, 0], t: 30 }
                            ],
                            ix: 2
                          },
                          r: { a: 0, k: 0, ix: 10 },
                          sa: { a: 0, k: 0 },
                          o: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [25],
                                t: 0
                              },
                              {
                                o: { x: 0.333, y: 0 },
                                i: { x: 0.667, y: 1 },
                                s: [100],
                                t: 14
                              },
                              { s: [25], t: 30 }
                            ],
                            ix: 11
                          }
                        },
                        ef: [],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Ellipse 1",
                            ix: 1,
                            cix: 2,
                            np: 3,
                            it: [
                              {
                                ty: "el",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Ellipse",
                                nm: "Ellipse Path 1",
                                d: 1,
                                p: { a: 0, k: [0, 0], ix: 3 },
                                s: { a: 0, k: [120, 120], ix: 2 }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Fill 1",
                                c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [-284, 92], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          }
                        ],
                        ind: 4
                      }
                    ],
                    v: "5.7.11",
                    fr: 60,
                    op: 81,
                    ip: 0,
                    assets: []
                  }}
                  className={classNames("__wab_instance", sty.lottie)}
                />
              ) : null}
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "img",
    "dateModal",
    "week2",
    "day2",
    "datePickers",
    "button",
    "dateOfBirthBox",
    "lastTimeBox",
    "button3",
    "getUserInfo",
    "lottie"
  ],
  sideEffect: ["sideEffect"],
  img: ["img"],
  dateModal: ["dateModal", "week2", "day2", "datePickers", "button"],
  week2: ["week2"],
  day2: ["day2"],
  datePickers: ["datePickers"],
  button: ["button"],
  dateOfBirthBox: ["dateOfBirthBox"],
  lastTimeBox: ["lastTimeBox"],
  button3: ["button3"],
  getUserInfo: ["getUserInfo"],
  lottie: ["lottie"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  img: typeof PlasmicImg__;
  dateModal: typeof SlideinModal;
  week2: typeof Pickers;
  day2: typeof Pickers;
  datePickers: typeof DatePickers;
  button: typeof Button;
  dateOfBirthBox: typeof AntdInput;
  lastTimeBox: typeof AntdInput;
  button3: typeof Button;
  getUserInfo: typeof ApiRequest;
  lottie: typeof LottieWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSettingPregnancy__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSettingPregnancy__VariantsArgs;
    args?: PlasmicSettingPregnancy__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSettingPregnancy__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSettingPregnancy__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSettingPregnancy__ArgProps,
          internalVariantPropNames: PlasmicSettingPregnancy__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSettingPregnancy__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSettingPregnancy";
  } else {
    func.displayName = `PlasmicSettingPregnancy.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSettingPregnancy = Object.assign(
  // Top-level PlasmicSettingPregnancy renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    img: makeNodeComponent("img"),
    dateModal: makeNodeComponent("dateModal"),
    week2: makeNodeComponent("week2"),
    day2: makeNodeComponent("day2"),
    datePickers: makeNodeComponent("datePickers"),
    button: makeNodeComponent("button"),
    dateOfBirthBox: makeNodeComponent("dateOfBirthBox"),
    lastTimeBox: makeNodeComponent("lastTimeBox"),
    button3: makeNodeComponent("button3"),
    getUserInfo: makeNodeComponent("getUserInfo"),
    lottie: makeNodeComponent("lottie"),

    // Metadata about props expected for PlasmicSettingPregnancy
    internalVariantProps: PlasmicSettingPregnancy__VariantProps,
    internalArgProps: PlasmicSettingPregnancy__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSettingPregnancy;
/* prettier-ignore-end */
