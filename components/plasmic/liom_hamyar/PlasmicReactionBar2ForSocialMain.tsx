/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: H6dfyqWexG5G

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Like from "../../Like"; // plasmic-import: ARJf0DiYhPbe/component
import Save from "../../Save"; // plasmic-import: _x22uBJ4ZqC9/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicReactionBar2ForSocialMain.module.css"; // plasmic-import: H6dfyqWexG5G/css

import Icon150Icon from "./icons/PlasmicIcon__Icon150"; // plasmic-import: 4NJq6NYKqIPu/icon
import Icon149Icon from "./icons/PlasmicIcon__Icon149"; // plasmic-import: bJ7kVZQK3ovZ/icon
import Icon147Icon from "./icons/PlasmicIcon__Icon147"; // plasmic-import: 2SO3BEHlRKXI/icon

createPlasmicElementProxy;

export type PlasmicReactionBar2ForSocialMain__VariantMembers = {
  like: "like";
  main: "main";
};
export type PlasmicReactionBar2ForSocialMain__VariantsArgs = {
  like?: SingleBooleanChoiceArg<"like">;
  main?: SingleBooleanChoiceArg<"main">;
};
type VariantPropType = keyof PlasmicReactionBar2ForSocialMain__VariantsArgs;
export const PlasmicReactionBar2ForSocialMain__VariantProps =
  new Array<VariantPropType>("like", "main");

export type PlasmicReactionBar2ForSocialMain__ArgsType = {
  commet?: string;
  shair?: string;
  viewcount?: string;
  likeCount?: string;
  children?: React.ReactNode;
  bokmarkcountbar?: string;
};
type ArgPropType = keyof PlasmicReactionBar2ForSocialMain__ArgsType;
export const PlasmicReactionBar2ForSocialMain__ArgProps =
  new Array<ArgPropType>(
    "commet",
    "shair",
    "viewcount",
    "likeCount",
    "children",
    "bokmarkcountbar"
  );

export type PlasmicReactionBar2ForSocialMain__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultReactionBar2ForSocialMainProps {
  commet?: string;
  shair?: string;
  viewcount?: string;
  likeCount?: string;
  children?: React.ReactNode;
  bokmarkcountbar?: string;
  like?: SingleBooleanChoiceArg<"like">;
  main?: SingleBooleanChoiceArg<"main">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReactionBar2ForSocialMain__RenderFunc(props: {
  variants: PlasmicReactionBar2ForSocialMain__VariantsArgs;
  args: PlasmicReactionBar2ForSocialMain__ArgsType;
  overrides: PlasmicReactionBar2ForSocialMain__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "like",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.like
      },
      {
        path: "main",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.main
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root,
        {
          [sty.rootlike]: hasVariant($state, "like", "like"),
          [sty.rootmain]: hasVariant($state, "main", "main")
        }
      )}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <React.Fragment>
            <Like
              className={classNames("__wab_instance", sty.like__o4N9C)}
              likeCountForBar={(() => {
                try {
                  return $props.likeCount;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />

            <div
              className={classNames(projectcss.all, sty.freeBox__k1Ry2)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            var comment =
                              document.getElementById("focus_comment");
                            return comment.firstElementChild.focus();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <Icon150Icon
                className={classNames(projectcss.all, sty.svg__yIzEr)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4Dlmu
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.commet;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "432";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__jdYhE)}>
              <Icon149Icon
                className={classNames(projectcss.all, sty.svg__i0IJ)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rxdrw
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.shair;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "32";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <Save className={classNames("__wab_instance", sty.save__cpSb)} />

            <div className={classNames(projectcss.all, sty.freeBox__qg71X)}>
              <Icon147Icon
                className={classNames(projectcss.all, sty.svg__xxRc7)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nRgs
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.viewcount;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "143";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          </React.Fragment>
        ),
        value: args.children
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReactionBar2ForSocialMain__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReactionBar2ForSocialMain__VariantsArgs;
    args?: PlasmicReactionBar2ForSocialMain__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReactionBar2ForSocialMain__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicReactionBar2ForSocialMain__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReactionBar2ForSocialMain__ArgProps,
          internalVariantPropNames:
            PlasmicReactionBar2ForSocialMain__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReactionBar2ForSocialMain__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReactionBar2ForSocialMain";
  } else {
    func.displayName = `PlasmicReactionBar2ForSocialMain.${nodeName}`;
  }
  return func;
}

export const PlasmicReactionBar2ForSocialMain = Object.assign(
  // Top-level PlasmicReactionBar2ForSocialMain renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicReactionBar2ForSocialMain
    internalVariantProps: PlasmicReactionBar2ForSocialMain__VariantProps,
    internalArgProps: PlasmicReactionBar2ForSocialMain__ArgProps
  }
);

export default PlasmicReactionBar2ForSocialMain;
/* prettier-ignore-end */
