/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: x3lX8YdIXcEA

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import ComponentPregnancy from "../../ComponentPregnancy"; // plasmic-import: 8wHhlRtqpYtU/component
import MainPregnancyHeader from "../../MainPregnancyHeader"; // plasmic-import: 9xsQ86WEmeJv/component
import FooterPregnancyMain from "../../FooterPregnancyMain"; // plasmic-import: -kbj-rjG1hPY/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import SettingCycle4 from "../../SettingCycle4"; // plasmic-import: C5hqeG28n8GP/component
import SubItemsComponnet from "../../SubItemsComponnet"; // plasmic-import: b9qrgB2b1TrW/component
import EditProfile2 from "../../EditProfile2"; // plasmic-import: BZ95kklWU6Jb/component
import { BackHandler } from "@/components/BackHandler"; // plasmic-import: wpIQCsQJqUoV/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicMainPregnancy.module.css"; // plasmic-import: x3lX8YdIXcEA/css

import Icon185Icon from "./icons/PlasmicIcon__Icon185"; // plasmic-import: 3QmHdQOUm1zK/icon

createPlasmicElementProxy;

export type PlasmicMainPregnancy__VariantMembers = {
  setting: "setting";
  subItem: "subItem";
  edit: "edit";
};
export type PlasmicMainPregnancy__VariantsArgs = {
  setting?: SingleBooleanChoiceArg<"setting">;
  subItem?: SingleBooleanChoiceArg<"subItem">;
  edit?: SingleBooleanChoiceArg<"edit">;
};
type VariantPropType = keyof PlasmicMainPregnancy__VariantsArgs;
export const PlasmicMainPregnancy__VariantProps = new Array<VariantPropType>(
  "setting",
  "subItem",
  "edit"
);

export type PlasmicMainPregnancy__ArgsType = {};
type ArgPropType = keyof PlasmicMainPregnancy__ArgsType;
export const PlasmicMainPregnancy__ArgProps = new Array<ArgPropType>();

export type PlasmicMainPregnancy__OverridesType = {
  root?: Flex__<"div">;
  main?: Flex__<"div">;
  componentPregnancy?: Flex__<typeof ComponentPregnancy>;
  mainHeader?: Flex__<typeof MainPregnancyHeader>;
  freeBox?: Flex__<"div">;
  svg?: Flex__<"svg">;
  text?: Flex__<"div">;
  footerMain?: Flex__<typeof FooterPregnancyMain>;
  settingCycle4?: Flex__<typeof SettingCycle4>;
  subItemsComponnet?: Flex__<typeof SubItemsComponnet>;
  editProfile2?: Flex__<typeof EditProfile2>;
  backHandler?: Flex__<typeof BackHandler>;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultMainPregnancyProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMainPregnancy__RenderFunc(props: {
  variants: PlasmicMainPregnancy__VariantsArgs;
  args: PlasmicMainPregnancy__ArgsType;
  overrides: PlasmicMainPregnancy__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "page",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                { name: "calendar", namefa: "بارداری" },
                { name: "tools", namefa: "ابزارها" }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "setting",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.setting
      },
      {
        path: "subItem",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.subItem
      },
      {
        path: "edit",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.edit
      },
      {
        path: "loadBack",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "footerMain.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return window.sessionStorage.getItem("footer") || "calendar";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "mainHeader.dopen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.dopen;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root,
            {
              [sty.rootedit]: hasVariant($state, "edit", "edit"),
              [sty.rootglobal_newView_newView]: hasVariant(
                globalVariants,
                "newView",
                "newView"
              ),
              [sty.rootsetting]: hasVariant($state, "setting", "setting"),
              [sty.rootsubItem]: hasVariant($state, "subItem", "subItem")
            }
          )}
        >
          <div
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(projectcss.all, sty.main, {
              [sty.mainedit]: hasVariant($state, "edit", "edit"),
              [sty.mainsetting]: hasVariant($state, "setting", "setting"),
              [sty.mainsubItem]: hasVariant($state, "subItem", "subItem")
            })}
          >
            <ComponentPregnancy
              data-plasmic-name={"componentPregnancy"}
              data-plasmic-override={overrides.componentPregnancy}
              className={classNames("__wab_instance", sty.componentPregnancy)}
            />

            <section className={classNames(projectcss.all, sty.section__jlfOv)}>
              <MainPregnancyHeader
                data-plasmic-name={"mainHeader"}
                data-plasmic-override={overrides.mainHeader}
                className={classNames("__wab_instance", sty.mainHeader)}
                dopen={generateStateValueProp($state, ["mainHeader", "dopen"])}
                onDopenChange2={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "mainHeader",
                    "dopen"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                openEdit={async () => {
                  const $steps = {};

                  $steps["updateEdit"] = true
                    ? (() => {
                        const actionArgs = { vgroup: "edit", operation: 2 };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          const oldValue = $stateGet($state, vgroup);
                          $stateSet($state, vgroup, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateEdit"] != null &&
                    typeof $steps["updateEdit"] === "object" &&
                    typeof $steps["updateEdit"].then === "function"
                  ) {
                    $steps["updateEdit"] = await $steps["updateEdit"];
                  }
                }}
                token={(() => {
                  try {
                    return localStorage.getItem("token");
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                userinfo={(() => {
                  try {
                    return JSON.parse(window.localStorage.getItem("userinfo"))
                      .user;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return {};
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  className={classNames(projectcss.all, sty.freeBox)}
                >
                  <Icon185Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateMainHeaderDopen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["mainHeader", "dopen"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateMainHeaderDopen"] != null &&
                        typeof $steps["updateMainHeaderDopen"] === "object" &&
                        typeof $steps["updateMainHeaderDopen"].then ===
                          "function"
                      ) {
                        $steps["updateMainHeaderDopen"] = await $steps[
                          "updateMainHeaderDopen"
                        ];
                      }
                    }}
                    role={"img"}
                  />

                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.page.find(
                            item => item.name == $state.footerMain.type
                          ).namefa;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0627\u0645\u06a9\u0627\u0646\u0627\u062a \u0648\u06cc\u0698\u0647";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </MainPregnancyHeader>
            </section>
            <section
              className={classNames(projectcss.all, sty.section___7Bu3P)}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.footerMain, {
                    [sty.footerMainglobal_newView_newView]: hasVariant(
                      globalVariants,
                      "newView",
                      "newView"
                    )
                  }),
                  footer2: (() => {
                    try {
                      return $state.footerMain.type;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })(),
                  onTypeChange: async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "footerMain",
                      "type"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  },
                  type: generateStateValueProp($state, ["footerMain", "type"])
                };

                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "footerMain.type",
                      initFunc: ({ $props, $state, $queries }) =>
                        (() => {
                          try {
                            return (
                              window.sessionStorage.getItem("footer") ||
                              "calendar"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                    }
                  ],
                  []
                );
                return (
                  <FooterPregnancyMain
                    data-plasmic-name={"footerMain"}
                    data-plasmic-override={overrides.footerMain}
                    {...child$Props}
                  />
                );
              })()}
            </section>
          </div>
          <Reveal
            className={classNames("__wab_instance", sty.reveal__vrRyL, {
              [sty.revealsetting__vrRyLztgwk]: hasVariant(
                $state,
                "setting",
                "setting"
              ),
              [sty.revealsubItem__vrRyL9ErvH]: hasVariant(
                $state,
                "subItem",
                "subItem"
              )
            })}
            damping={0.2}
            effect={"fade"}
            triggerOnce={true}
          >
            <SettingCycle4
              data-plasmic-name={"settingCycle4"}
              data-plasmic-override={overrides.settingCycle4}
              active={(() => {
                try {
                  return $state.setting == true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.settingCycle4, {
                [sty.settingCycle4setting]: hasVariant(
                  $state,
                  "setting",
                  "setting"
                )
              })}
              onBack={async event => {
                const $steps = {};

                $steps["updateSetting"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "setting",
                        operation: 2,
                        value: "setting"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        const oldValue = $stateGet($state, vgroup);
                        $stateSet($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSetting"] != null &&
                  typeof $steps["updateSetting"] === "object" &&
                  typeof $steps["updateSetting"].then === "function"
                ) {
                  $steps["updateSetting"] = await $steps["updateSetting"];
                }
              }}
              onEditTimeChange2={async val => {
                const $steps = {};

                $steps["updateMainPageEditTime"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["mainPage", "editTime"]
                        },
                        operation: 0,
                        value: $state.settingCycle4.editTime
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateMainPageEditTime"] != null &&
                  typeof $steps["updateMainPageEditTime"] === "object" &&
                  typeof $steps["updateMainPageEditTime"].then === "function"
                ) {
                  $steps["updateMainPageEditTime"] = await $steps[
                    "updateMainPageEditTime"
                  ];
                }

                $steps["updateMainHeaderDopen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["mainHeader", "dopen"]
                        },
                        operation: 0,
                        value: console.log($state.settingCycle4.editTime)
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateMainHeaderDopen"] != null &&
                  typeof $steps["updateMainHeaderDopen"] === "object" &&
                  typeof $steps["updateMainHeaderDopen"].then === "function"
                ) {
                  $steps["updateMainHeaderDopen"] = await $steps[
                    "updateMainHeaderDopen"
                  ];
                }
              }}
              userStatus={(() => {
                try {
                  return $state.mainPage.userInfo.result.userStatus;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          </Reveal>
          <Reveal
            className={classNames("__wab_instance", sty.reveal__iCgWr, {
              [sty.revealsetting__iCgWrztgwk]: hasVariant(
                $state,
                "setting",
                "setting"
              ),
              [sty.revealsubItem__iCgWr9ErvH]: hasVariant(
                $state,
                "subItem",
                "subItem"
              )
            })}
            damping={0.2}
            effect={"fade"}
            triggerOnce={true}
          >
            <SubItemsComponnet
              data-plasmic-name={"subItemsComponnet"}
              data-plasmic-override={overrides.subItemsComponnet}
              className={classNames("__wab_instance", sty.subItemsComponnet)}
            />
          </Reveal>
          <Reveal
            className={classNames("__wab_instance", sty.reveal__t750E, {
              [sty.revealedit__t750EJdhbO]: hasVariant($state, "edit", "edit"),
              [sty.revealsetting__t750Eztgwk]: hasVariant(
                $state,
                "setting",
                "setting"
              ),
              [sty.revealsubItem__t750E9ErvH]: hasVariant(
                $state,
                "subItem",
                "subItem"
              )
            })}
            damping={0.2}
            effect={"fade"}
            triggerOnce={true}
          >
            <EditProfile2
              data-plasmic-name={"editProfile2"}
              data-plasmic-override={overrides.editProfile2}
              active={(() => {
                try {
                  return $state.edit == true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()}
              back={async () => {
                const $steps = {};

                $steps["updateEdit"] = true
                  ? (() => {
                      const actionArgs = { vgroup: "edit", operation: 2 };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        const oldValue = $stateGet($state, vgroup);
                        $stateSet($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateEdit"] != null &&
                  typeof $steps["updateEdit"] === "object" &&
                  typeof $steps["updateEdit"].then === "function"
                ) {
                  $steps["updateEdit"] = await $steps["updateEdit"];
                }
              }}
              className={classNames("__wab_instance", sty.editProfile2, {
                [sty.editProfile2edit]: hasVariant($state, "edit", "edit")
              })}
              token={
                hasVariant($state, "edit", "edit")
                  ? (() => {
                      try {
                        return $state.mainPage.token;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
            />
          </Reveal>
          <BackHandler
            data-plasmic-name={"backHandler"}
            data-plasmic-override={overrides.backHandler}
            active={(() => {
              try {
                return $state.loadBack;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.backHandler)}
            onBack={async () => {
              const $steps = {};

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = { args: ["custom", "hi", "top-center"] };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }
            }}
          />

          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return window.history.back();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["updateLoadBack"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["loadBack"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateLoadBack"] != null &&
                typeof $steps["updateLoadBack"] === "object" &&
                typeof $steps["updateLoadBack"].then === "function"
              ) {
                $steps["updateLoadBack"] = await $steps["updateLoadBack"];
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "main",
    "componentPregnancy",
    "mainHeader",
    "freeBox",
    "svg",
    "text",
    "footerMain",
    "settingCycle4",
    "subItemsComponnet",
    "editProfile2",
    "backHandler",
    "sideEffect"
  ],
  main: [
    "main",
    "componentPregnancy",
    "mainHeader",
    "freeBox",
    "svg",
    "text",
    "footerMain"
  ],
  componentPregnancy: ["componentPregnancy"],
  mainHeader: ["mainHeader", "freeBox", "svg", "text"],
  freeBox: ["freeBox", "svg", "text"],
  svg: ["svg"],
  text: ["text"],
  footerMain: ["footerMain"],
  settingCycle4: ["settingCycle4"],
  subItemsComponnet: ["subItemsComponnet"],
  editProfile2: ["editProfile2"],
  backHandler: ["backHandler"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  main: "div";
  componentPregnancy: typeof ComponentPregnancy;
  mainHeader: typeof MainPregnancyHeader;
  freeBox: "div";
  svg: "svg";
  text: "div";
  footerMain: typeof FooterPregnancyMain;
  settingCycle4: typeof SettingCycle4;
  subItemsComponnet: typeof SubItemsComponnet;
  editProfile2: typeof EditProfile2;
  backHandler: typeof BackHandler;
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMainPregnancy__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMainPregnancy__VariantsArgs;
    args?: PlasmicMainPregnancy__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMainPregnancy__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMainPregnancy__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMainPregnancy__ArgProps,
          internalVariantPropNames: PlasmicMainPregnancy__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMainPregnancy__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMainPregnancy";
  } else {
    func.displayName = `PlasmicMainPregnancy.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicMainPregnancy = Object.assign(
  // Top-level PlasmicMainPregnancy renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    main: makeNodeComponent("main"),
    componentPregnancy: makeNodeComponent("componentPregnancy"),
    mainHeader: makeNodeComponent("mainHeader"),
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    footerMain: makeNodeComponent("footerMain"),
    settingCycle4: makeNodeComponent("settingCycle4"),
    subItemsComponnet: makeNodeComponent("subItemsComponnet"),
    editProfile2: makeNodeComponent("editProfile2"),
    backHandler: makeNodeComponent("backHandler"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicMainPregnancy
    internalVariantProps: PlasmicMainPregnancy__VariantProps,
    internalArgProps: PlasmicMainPregnancy__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMainPregnancy;
/* prettier-ignore-end */
