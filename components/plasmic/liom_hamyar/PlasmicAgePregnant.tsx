/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: CSu8HTSIVdMU

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import SlideinModal from "../../SlideinModal"; // plasmic-import: Y_p0qKIshDe1/component
import { DatePickers } from "@/components/DatePickers"; // plasmic-import: Pxh5xTWczGDl/codeComponent
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicAgePregnant.module.css"; // plasmic-import: CSu8HTSIVdMU/css

import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicAgePregnant__VariantMembers = {
  dark: "dark";
};
export type PlasmicAgePregnant__VariantsArgs = {
  dark?: SingleBooleanChoiceArg<"dark">;
};
type VariantPropType = keyof PlasmicAgePregnant__VariantsArgs;
export const PlasmicAgePregnant__VariantProps = new Array<VariantPropType>(
  "dark"
);

export type PlasmicAgePregnant__ArgsType = {};
type ArgPropType = keyof PlasmicAgePregnant__ArgsType;
export const PlasmicAgePregnant__ArgProps = new Array<ArgPropType>();

export type PlasmicAgePregnant__OverridesType = {
  root?: Flex__<"div">;
  dateModal?: Flex__<typeof SlideinModal>;
  datePickers?: Flex__<typeof DatePickers>;
  button?: Flex__<typeof Button>;
  dateOfBirthBox?: Flex__<typeof AntdInput>;
  lastTimeBox?: Flex__<typeof AntdInput>;
  button3?: Flex__<typeof Button>;
};

export interface DefaultAgePregnantProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAgePregnant__RenderFunc(props: {
  variants: PlasmicAgePregnant__VariantsArgs;
  args: PlasmicAgePregnant__ArgsType;
  overrides: PlasmicAgePregnant__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dateOfBirthBox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($state.dateOfBirth.data != "") {
                  var gy = parseInt($state.dateOfBirth.year);
                  var gm = parseInt($state.dateOfBirth.month);
                  var gd = parseInt($state.dateOfBirth.day);
                  let months = new Array(
                    "فروردين",
                    "ارديبهشت",
                    "خرداد",
                    "تير",
                    "مرداد",
                    "شهريور",
                    "مهر",
                    "آبان",
                    "آذر",
                    "دي",
                    "بهمن",
                    "اسفند"
                  );
                  return gd + " " + months[gm - 1] + " " + gy;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "dateModal.click",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "typeInterDate",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "lastTime"
      },
      {
        path: "lastTimeBox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($state.lastTime.data != "") {
                  var gy = parseInt($state.lastTime.year);
                  var gm = parseInt($state.lastTime.month);
                  var gd = parseInt($state.lastTime.day);
                  let months = new Array(
                    "فروردين",
                    "ارديبهشت",
                    "خرداد",
                    "تير",
                    "مرداد",
                    "شهريور",
                    "مهر",
                    "آبان",
                    "آذر",
                    "دي",
                    "بهمن",
                    "اسفند"
                  );
                  return gd + " " + months[gm - 1] + " " + gy;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "lastTime",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({ data: "" })
      },
      {
        path: "dateOfBirth",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({ data: "" })
      },
      {
        path: "datePickers.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "duDate",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dark",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.theme == "dark";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.dark
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "isGetInfo",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "agePregnant",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({ week: 0, day: 0 })
      },
      {
        path: "showResult",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "sizeByFruit",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "",
          "\u062a\u062e\u0645\u06a9",
          "\u0644\u0642\u0627\u062d",
          "\u06a9\u0627\u0634\u062a",
          "\u062f\u0627\u0646\u0647 \u06a9\u0646\u062c\u062f",
          "\u0639\u062f\u0633",
          "\u0628\u0644\u0648\u0628\u0631\u06cc",
          "\u0644\u0648\u0628\u06cc\u0627",
          "\u0627\u0646\u06af\u0648\u0631",
          "\u067e\u0631\u062a\u0642\u0627\u0644 \u0645\u06cc\u0646\u06cc\u0627\u062a\u0648\u0631\u06cc",
          "\u0627\u0646\u062c\u06cc\u0631",
          "\u0644\u06cc\u0645\u0648 \u062a\u0631\u0634",
          "\u063a\u0644\u0627\u0641 \u0646\u062e\u0648\u062f \u0641\u0631\u0646\u06af\u06cc",
          "\u0644\u06cc\u0645\u0648 \u0634\u06cc\u0631\u06cc\u0646",
          "\u0633\u06cc\u0628",
          "\u0622\u0648\u0648\u06a9\u0627\u062f\u0648",
          "\u0634\u0644\u063a\u0645",
          "\u0641\u0644\u0641\u0644 \u062f\u0644\u0645\u0647",
          "\u06af\u0648\u062c\u0647 ",
          "\u0645\u0648\u0632",
          "\u0647\u0648\u06cc\u062c",
          "\u06a9\u062f\u0648 \u0633\u0628\u0632",
          "\u0627\u0646\u0628\u0647",
          "\u0628\u0644\u0627\u0644",
          "\u0631\u0648\u062a\u0627\u0628\u0627\u06af\u0627",
          "\u067e\u06cc\u0627\u0632\u0686\u0647",
          "\u06af\u0644 \u06a9\u0644\u0645",
          "\u0628\u0627\u062f\u0645\u062c\u0627\u0646",
          "\u06a9\u062f\u0648 \u062d\u0644\u0648\u0627\u06cc\u06cc",
          "\u06a9\u0644\u0645 \u0628\u0631\u06af \u0628\u0632\u0631\u06af",
          "\u0646\u0627\u0631\u06af\u06cc\u0644",
          "\u06a9\u0631\u0641\u0633",
          "\u0622\u0646\u0627\u0646\u0627\u0633",
          "\u062e\u0631\u0628\u0632\u0647",
          "\u0645\u0644\u0648\u0646",
          "\u06a9\u0627\u0647\u0648",
          "\u0628\u0631\u06af \u0686\u063a\u0646\u062f\u0631 \u0633\u0648\u0626\u06cc\u0633\u06cc",
          "\u062a\u0631\u0647 \u0641\u0631\u0646\u06af\u06cc",
          "\u0647\u0646\u062f\u0648\u0627\u0646\u0647",
          "\u06a9\u062f\u0648 \u062a\u0646\u0628\u0644",
          "\u0646\u0648\u0632\u0627\u062f"
        ]
      },
      {
        path: "babySize",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          { h: "1.9", w: "1" },
          { h: "2.3", w: "2" },
          { h: "3.1", w: "4" },
          { h: "4.1", w: "7" },
          { h: "5.4", w: "14" },
          { h: "7.4", w: "23" },
          { h: "8.7", w: "43" },
          { h: "10.1", w: "70" },
          { h: "11.6", w: "100" },
          { h: "13", w: "140" },
          { h: "14.2", w: "190" },
          { h: "15.3", w: "240" },
          { h: "25.6", w: "300" },
          { h: "26.7", w: "360" },
          { h: "27.8", w: "430" },
          { h: "28.9", w: "500" },
          { h: "30", w: "600" },
          { h: "34.6", w: "660" },
          { h: "35.6", w: "760" },
          { h: "36.6", w: "875" },
          { h: "37.6", w: "1" },
          { h: "38.6", w: "1.2" },
          { h: "39.9", w: "1.3" },
          { h: "41.1", w: "1.5" },
          { h: "42.4", w: "1.7" },
          { h: "43.7", w: "1.9" },
          { h: "45", w: "2.1" },
          { h: "46.2", w: "2.4" },
          { h: "47.4", w: "2.6" },
          { h: "48.6", w: "2.9" },
          { h: "49.8", w: "3.1" },
          { h: "50.7", w: "3.3" },
          { h: "51.2", w: "3.5" }
        ]
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            { [sty.rootdark]: hasVariant($state, "dark", "dark") }
          )}
        >
          <Embed
            className={classNames("__wab_instance", sty.embedHtml__viHb3)}
            code={
              "<!-- Hotjar Tracking Code for setting-pregnancy -->\n<script>\n    (function(h,o,t,j,a,r){\n        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};\n        h._hjSettings={hjid:5226515,hjsv:6};\n        a=o.getElementsByTagName('head')[0];\n        r=o.createElement('script');r.async=1;\n        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;\n        a.appendChild(r);\n    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');\n</script>\n<script src=\"https://cdn.jsdelivr.net/npm/jalaali-js/dist/jalaali.js\"></script>"
            }
          />

          <Embed
            className={classNames("__wab_instance", sty.embedHtml__ia79S)}
            code={
              "<script>\n  let isBlocked = false; // \u0645\u062a\u063a\u06cc\u0631 \u0628\u0631\u0627\u06cc \u06a9\u0646\u062a\u0631\u0644 \u0645\u0633\u062f\u0648\u062f \u0634\u062f\u0646 \u062f\u06a9\u0645\u0647\n  let shouldBlockBackButton; // \u0645\u062a\u063a\u06cc\u0631 \u0628\u0631\u0627\u06cc \u0648\u0636\u0639\u06cc\u062a \u0628\u0644\u0648\u06a9\u0647 \u0628\u0648\u062f\u0646 \u062f\u06a9\u0645\u0647\n\n  document.addEventListener('DOMContentLoaded', function() {\n    // \u0628\u0631\u0631\u0633\u06cc \u0627\u06cc\u0646\u06a9\u0647 window.plasmicParent \u0648 window.plasmicParent.state \u0645\u0648\u062c\u0648\u062f \u0647\u0633\u062a\u0646\u062f\n    if (window.plasmicParent && window.plasmicParent.state) {\n      // \u0645\u0642\u062f\u0627\u0631\u062f\u0647\u06cc \u0628\u0647 \u0645\u062a\u063a\u06cc\u0631 \u0641\u0642\u0637 \u0627\u06af\u0631 \u0645\u0642\u062f\u0627\u0631\u062f\u0647\u06cc \u0646\u0634\u062f\u0647 \u0628\u0627\u0634\u062f\n      // if (shouldBlockBackButton === undefined) {\n        shouldBlockBackButton = window.plasmicParent.state.shouldBlockBackButton;\n        console.log(\"value\u06f2: \" + shouldBlockBackButton);\n      // }\n    } else {\n      console.log(\"window.plasmicParent \u06cc\u0627 state \u0645\u0648\u062c\u0648\u062f \u0646\u06cc\u0633\u062a.\");\n    }\n  });\n\n  window.addEventListener('popstate', function(event) {\n    // \u0627\u06af\u0631 \u0642\u0628\u0644\u0627\u064b \u062f\u06a9\u0645\u0647 \u0628\u0627\u0632\u06af\u0634\u062a \u0645\u0633\u062f\u0648\u062f \u0634\u062f\u0647 \u0628\u0627\u0634\u062f\u060c \u0627\u062c\u0627\u0632\u0647 \u0628\u0627\u0632\u06af\u0634\u062a \u0645\u06cc\u200c\u062f\u0647\u06cc\u0645\n    if (isBlocked) {\n      console.log('\u062f\u06a9\u0645\u0647 \u0628\u0627\u0632\u06af\u0634\u062a \u062f\u0648\u0628\u0627\u0631\u0647 \u0641\u0639\u0627\u0644 \u0627\u0633\u062a.');\n      isBlocked = false; // \u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u062d\u0627\u0644\u062a \u0639\u0627\u062f\u06cc\n      return; // \u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u0639\u0642\u0628\n    }\n\n    // \u0627\u06af\u0631 \u0628\u0627\u06cc\u062f \u062f\u06a9\u0645\u0647 \u0628\u0627\u0632\u06af\u0634\u062a \u0645\u0633\u062f\u0648\u062f \u0634\u0648\u062f\n    if (shouldBlockBackButton) {\n      console.log('\u0634\u0631\u0637 \u0628\u0631\u0642\u0631\u0627\u0631 \u0627\u0633\u062a! \u062f\u06a9\u0645\u0647 \u0628\u0627\u0632\u06af\u0634\u062a \u0645\u0633\u062f\u0648\u062f \u0645\u06cc\u200c\u0634\u0648\u062f.');\n      event.preventDefault(); // \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u0627\u0632 \u0628\u0627\u0632\u06af\u0634\u062a\n      isBlocked = true; // \u0645\u0633\u062f\u0648\u062f \u06a9\u0631\u062f\u0646 \u062f\u06a9\u0645\u0647 \u0628\u0631\u0627\u06cc \u06cc\u06a9 \u0628\u0627\u0631\n    } else {\n      console.log('\u0634\u0631\u0637 \u0628\u0631\u0642\u0631\u0627\u0631 \u0646\u06cc\u0633\u062a\u060c \u0628\u0627\u0632\u06af\u0634\u062a \u0627\u0646\u062c\u0627\u0645 \u0645\u06cc\u200c\u0634\u0648\u062f.');\n    }\n  });\n</script>\n"
            }
          />

          {(() => {
            try {
              return $ctx.query.inApp != "true";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__fKYih, {
                [sty.freeBoxdark__fKYihOOgpk]: hasVariant(
                  $state,
                  "dark",
                  "dark"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox___6PuWs)}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return window.history.back();
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__yp97O, {
                    [sty.imgdark__yp97OoOgpk]: hasVariant(
                      $state,
                      "dark",
                      "dark"
                    )
                  })}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"20px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liom_hamyar/images/image38.svg",
                    fullWidth: 24,
                    fullHeight: 24,
                    aspectRatio: 1
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cdeaf,
                    {
                      [sty.textdark__cdeafOOgpk]: hasVariant(
                        $state,
                        "dark",
                        "dark"
                      )
                    }
                  )}
                >
                  {
                    "\u0645\u062d\u0627\u0633\u0628\u0647 \u0633\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc"
                  }
                </div>
              </div>
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__fX9Pk)}>
            <div className={classNames(projectcss.all, sty.freeBox___3U3CK)}>
              <div className={classNames(projectcss.all, sty.freeBox___9IxYp)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__slUgV, {
                    [sty.freeBoxdark__slUgVoOgpk]: hasVariant(
                      $state,
                      "dark",
                      "dark"
                    )
                  })}
                >
                  <SlideinModal
                    data-plasmic-name={"dateModal"}
                    data-plasmic-override={overrides.dateModal}
                    className={classNames("__wab_instance", sty.dateModal, {
                      [sty.dateModaldark]: hasVariant($state, "dark", "dark")
                    })}
                    click={generateStateValueProp($state, [
                      "dateModal",
                      "click"
                    ])}
                    dark={(() => {
                      try {
                        return $ctx.query.theme == "dark";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                    onClickChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "dateModal",
                        "click"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__w4Jxj,
                        hasVariant($state, "dark", "dark") ? "picker-dark" : ``,
                        {
                          [sty.freeBoxdark__w4JxjoOgpk]: hasVariant(
                            $state,
                            "dark",
                            "dark"
                          )
                        }
                      )}
                    >
                      {(() => {
                        try {
                          return $state.typeInterDate != "manually";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })() ? (
                        <DatePickers
                          data-plasmic-name={"datePickers"}
                          data-plasmic-override={overrides.datePickers}
                          SelectedDay={(() => {
                            if ($state.typeInterDate == "lastTime")
                              return $state.lastTime.day;
                            else return $state.dateOfBirth.day;
                          })()}
                          SelectedMonth={(() => {
                            if ($state.typeInterDate == "lastTime")
                              return $state.lastTime.month;
                            else return $state.dateOfBirth.month;
                          })()}
                          SelectedYear={(() => {
                            if ($state.typeInterDate == "lastTime")
                              return $state.lastTime.year;
                            else return $state.dateOfBirth.year;
                          })()}
                          className={classNames(
                            "__wab_instance",
                            sty.datePickers
                          )}
                          customYears={[
                            { value: 1403, label: "1403" },
                            { value: 1404, label: "1404" }
                          ]}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "datePickers",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          selectedValues={generateStateValueProp($state, [
                            "datePickers",
                            "value"
                          ])}
                        />
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__x2Xqr)}
                    >
                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        color={generateStateValueProp($state, [
                          "button",
                          "color"
                        ])}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateDateOfBirth"] =
                            $state.typeInterDate == "dateOfBirth"
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["dateOfBirth"]
                                    },
                                    operation: 0,
                                    value: $state.datePickers.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateDateOfBirth"] != null &&
                            typeof $steps["updateDateOfBirth"] === "object" &&
                            typeof $steps["updateDateOfBirth"].then ===
                              "function"
                          ) {
                            $steps["updateDateOfBirth"] = await $steps[
                              "updateDateOfBirth"
                            ];
                          }

                          $steps["updateLastTime2"] =
                            $state.typeInterDate == "lastTime"
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["lastTime"]
                                    },
                                    operation: 0,
                                    value: $state.datePickers.value
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateLastTime2"] != null &&
                            typeof $steps["updateLastTime2"] === "object" &&
                            typeof $steps["updateLastTime2"].then === "function"
                          ) {
                            $steps["updateLastTime2"] = await $steps[
                              "updateLastTime2"
                            ];
                          }

                          $steps["updateLastTime"] =
                            $state.typeInterDate == "dateOfBirth"
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["lastTime"]
                                    },
                                    operation: 0,
                                    value: (() => {
                                      var jy = $state.datePickers.value.year;
                                      var jm = $state.datePickers.value.month;
                                      var jd = $state.datePickers.value.day;
                                      var gy = jy <= 979 ? 621 : 1600;
                                      jy -= jy <= 979 ? 0 : 979;
                                      var days =
                                        365 * jy +
                                        parseInt(jy / 33) * 8 +
                                        parseInt(((jy % 33) + 3) / 4) +
                                        78 +
                                        jd +
                                        (jm < 7
                                          ? (jm - 1) * 31
                                          : (jm - 7) * 30 + 186);
                                      gy += 400 * parseInt(days / 146097);
                                      days %= 146097;
                                      if (days > 36524) {
                                        gy += 100 * parseInt(--days / 36524);
                                        days %= 36524;
                                        if (days >= 365) days++;
                                      }
                                      gy += 4 * parseInt(days / 1461);
                                      days %= 1461;
                                      gy += parseInt((days - 1) / 365);
                                      if (days > 365) days = (days - 1) % 365;
                                      var gd = days + 1;
                                      var sal_a = [
                                        0,
                                        31,
                                        (gy % 4 == 0 && gy % 100 != 0) ||
                                        gy % 400 == 0
                                          ? 29
                                          : 28,
                                        31,
                                        30,
                                        31,
                                        30,
                                        31,
                                        31,
                                        30,
                                        31,
                                        30,
                                        31
                                      ];

                                      var gm;
                                      for (gm = 0; gm < 13; gm++) {
                                        var v = sal_a[gm];
                                        if (gd <= v) break;
                                        gd -= v;
                                      }
                                      const [year, month, day] = [gy, gm, gd];

                                      var date = new Date(year, month - 1, day);
                                      date.setDate(date.getDate() - 280);
                                      var gyNew = date.getFullYear();
                                      var gmNew = date.getMonth() + 1;
                                      var gdNew = date.getDate();
                                      var g_d_m = [
                                        0, 31, 59, 90, 120, 151, 181, 212, 243,
                                        273, 304, 334
                                      ];

                                      var jyNew = gyNew <= 1600 ? 0 : 979;
                                      gyNew =
                                        gyNew - (gyNew <= 1600 ? 621 : 1600);
                                      var gy2 = gmNew > 2 ? gyNew + 1 : gyNew;
                                      var daysNew =
                                        365 * gyNew +
                                        parseInt((gy2 + 3) / 4) -
                                        parseInt((gy2 + 99) / 100) +
                                        parseInt((gy2 + 399) / 400) -
                                        80 +
                                        gdNew +
                                        g_d_m[gmNew - 1];
                                      jyNew += 33 * parseInt(daysNew / 12053);
                                      daysNew %= 12053;
                                      jyNew += 4 * parseInt(daysNew / 1461);
                                      daysNew %= 1461;
                                      jyNew += parseInt((daysNew - 1) / 365);
                                      if (daysNew > 365)
                                        daysNew = (daysNew - 1) % 365;
                                      var jmNew =
                                        daysNew < 186
                                          ? 1 + parseInt(daysNew / 31)
                                          : 7 + parseInt((daysNew - 186) / 30);
                                      var jdNew =
                                        1 +
                                        (daysNew < 186
                                          ? daysNew % 31
                                          : (daysNew - 186) % 30);
                                      return {
                                        day: jdNew,
                                        month: jmNew,
                                        year: jyNew
                                      };
                                    })()
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateLastTime"] != null &&
                            typeof $steps["updateLastTime"] === "object" &&
                            typeof $steps["updateLastTime"].then === "function"
                          ) {
                            $steps["updateLastTime"] = await $steps[
                              "updateLastTime"
                            ];
                          }

                          $steps["updateDateOfBirth2"] =
                            $state.typeInterDate == "lastTime"
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["dateOfBirth"]
                                    },
                                    operation: 0,
                                    value: (() => {
                                      var jy = $state.datePickers.value.year;
                                      var jm = $state.datePickers.value.month;
                                      var jd = $state.datePickers.value.day;
                                      var gy = jy <= 979 ? 621 : 1600;
                                      jy -= jy <= 979 ? 0 : 979;
                                      var days =
                                        365 * jy +
                                        parseInt(jy / 33) * 8 +
                                        parseInt(((jy % 33) + 3) / 4) +
                                        78 +
                                        jd +
                                        (jm < 7
                                          ? (jm - 1) * 31
                                          : (jm - 7) * 30 + 186);
                                      gy += 400 * parseInt(days / 146097);
                                      days %= 146097;
                                      if (days > 36524) {
                                        gy += 100 * parseInt(--days / 36524);
                                        days %= 36524;
                                        if (days >= 365) days++;
                                      }
                                      gy += 4 * parseInt(days / 1461);
                                      days %= 1461;
                                      gy += parseInt((days - 1) / 365);
                                      if (days > 365) days = (days - 1) % 365;
                                      var gd = days + 1;
                                      var sal_a = [
                                        0,
                                        31,
                                        (gy % 4 == 0 && gy % 100 != 0) ||
                                        gy % 400 == 0
                                          ? 29
                                          : 28,
                                        31,
                                        30,
                                        31,
                                        30,
                                        31,
                                        31,
                                        30,
                                        31,
                                        30,
                                        31
                                      ];

                                      var gm;
                                      for (gm = 0; gm < 13; gm++) {
                                        var v = sal_a[gm];
                                        if (gd <= v) break;
                                        gd -= v;
                                      }
                                      const [year, month, day] = [gy, gm, gd];

                                      var date = new Date(year, month - 1, day);
                                      date.setDate(date.getDate() + 280);
                                      var gyNew = date.getFullYear();
                                      var gmNew = date.getMonth() + 1;
                                      var gdNew = date.getDate();
                                      var g_d_m = [
                                        0, 31, 59, 90, 120, 151, 181, 212, 243,
                                        273, 304, 334
                                      ];

                                      var jyNew = gyNew <= 1600 ? 0 : 979;
                                      gyNew =
                                        gyNew - (gyNew <= 1600 ? 621 : 1600);
                                      var gy2 = gmNew > 2 ? gyNew + 1 : gyNew;
                                      var daysNew =
                                        365 * gyNew +
                                        parseInt((gy2 + 3) / 4) -
                                        parseInt((gy2 + 99) / 100) +
                                        parseInt((gy2 + 399) / 400) -
                                        80 +
                                        gdNew +
                                        g_d_m[gmNew - 1];
                                      jyNew += 33 * parseInt(daysNew / 12053);
                                      daysNew %= 12053;
                                      jyNew += 4 * parseInt(daysNew / 1461);
                                      daysNew %= 1461;
                                      jyNew += parseInt((daysNew - 1) / 365);
                                      if (daysNew > 365)
                                        daysNew = (daysNew - 1) % 365;
                                      var jmNew =
                                        daysNew < 186
                                          ? 1 + parseInt(daysNew / 31)
                                          : 7 + parseInt((daysNew - 186) / 30);
                                      var jdNew =
                                        1 +
                                        (daysNew < 186
                                          ? daysNew % 31
                                          : (daysNew - 186) % 30);
                                      return {
                                        day: jdNew,
                                        month: jmNew,
                                        year: jyNew
                                      };
                                    })()
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateDateOfBirth2"] != null &&
                            typeof $steps["updateDateOfBirth2"] === "object" &&
                            typeof $steps["updateDateOfBirth2"].then ===
                              "function"
                          ) {
                            $steps["updateDateOfBirth2"] = await $steps[
                              "updateDateOfBirth2"
                            ];
                          }

                          $steps["updateSlideinModalClick"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dateModal", "click"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSlideinModalClick"] != null &&
                            typeof $steps["updateSlideinModalClick"] ===
                              "object" &&
                            typeof $steps["updateSlideinModalClick"].then ===
                              "function"
                          ) {
                            $steps["updateSlideinModalClick"] = await $steps[
                              "updateSlideinModalClick"
                            ];
                          }

                          $steps["updateDuDate"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["duDate"]
                                  },
                                  operation: 0,
                                  value: (() => {
                                    var jy = $state.dateOfBirth.year;
                                    var jm = $state.dateOfBirth.month;
                                    var jd = $state.dateOfBirth.day;
                                    var gy = jy <= 979 ? 621 : 1600;
                                    jy -= jy <= 979 ? 0 : 979;
                                    var days =
                                      365 * jy +
                                      parseInt(jy / 33) * 8 +
                                      parseInt(((jy % 33) + 3) / 4) +
                                      78 +
                                      jd +
                                      (jm < 7
                                        ? (jm - 1) * 31
                                        : (jm - 7) * 30 + 186);
                                    gy += 400 * parseInt(days / 146097);
                                    days %= 146097;
                                    if (days > 36524) {
                                      gy += 100 * parseInt(--days / 36524);
                                      days %= 36524;
                                      if (days >= 365) days++;
                                    }
                                    gy += 4 * parseInt(days / 1461);
                                    days %= 1461;
                                    gy += parseInt((days - 1) / 365);
                                    if (days > 365) days = (days - 1) % 365;
                                    var gd = days + 1;
                                    var sal_a = [
                                      0,
                                      31,
                                      (gy % 4 == 0 && gy % 100 != 0) ||
                                      gy % 400 == 0
                                        ? 29
                                        : 28,
                                      31,
                                      30,
                                      31,
                                      30,
                                      31,
                                      31,
                                      30,
                                      31,
                                      30,
                                      31
                                    ];

                                    var gm;
                                    for (gm = 0; gm < 13; gm++) {
                                      var v = sal_a[gm];
                                      if (gd <= v) break;
                                      gd -= v;
                                    }
                                    return [gy, gm, gd];
                                  })()
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDuDate"] != null &&
                            typeof $steps["updateDuDate"] === "object" &&
                            typeof $steps["updateDuDate"].then === "function"
                          ) {
                            $steps["updateDuDate"] = await $steps[
                              "updateDuDate"
                            ];
                          }
                        }}
                        onColorChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button",
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        {"\u062a\u0627\u06cc\u06cc\u062f"}
                      </Button>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fMr9
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateSlideinModalClick"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dateModal", "click"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSlideinModalClick"] != null &&
                            typeof $steps["updateSlideinModalClick"] ===
                              "object" &&
                            typeof $steps["updateSlideinModalClick"].then ===
                              "function"
                          ) {
                            $steps["updateSlideinModalClick"] = await $steps[
                              "updateSlideinModalClick"
                            ];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___089Yg
                          )}
                        >
                          {"\u0628\u0633\u062a\u0646"}
                        </div>
                      </div>
                    </div>
                  </SlideinModal>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qutWj,
                      {
                        [sty.textdark__qutWjOOgpk]: hasVariant(
                          $state,
                          "dark",
                          "dark"
                        )
                      }
                    )}
                  >
                    {
                      "\u0628\u0631\u0627\u06cc \u0627\u06cc\u0646\u06a9\u0647 \u0628\u062f\u0648\u0646\u06cc \u06a9\u0648\u0686\u0648\u0644\u0648\u062a \u0627\u0644\u0627\u0646 \u062a\u0648\u06cc \u06a9\u062f\u0648\u0645 \u0647\u0641\u062a\u0647 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc\u0647\u060c \u06cc\u06a9\u06cc \u0627\u0632 \u0631\u0648\u0634\u200c\u0647\u0627\u06cc \u0632\u06cc\u0631 \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646 \u0648 \u0627\u0637\u0644\u0627\u0639\u0627\u062a\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646 \u062a\u0627 \u0645\u0627 \u0645\u062d\u0627\u0633\u0628\u0647 \u06a9\u0646\u06cc\u0645! \ud83d\ude0a"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3Tink
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $state.duDate[0] +
                            "-" +
                            $state.duDate[1] +
                            "-" +
                            $state.duDate[2] +
                            " 10:10:10"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__yuOqA)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7BmYn
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateTypeInterDate"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["typeInterDate"]
                                },
                                operation: 0,
                                value: "dateOfBirth"
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTypeInterDate"] != null &&
                          typeof $steps["updateTypeInterDate"] === "object" &&
                          typeof $steps["updateTypeInterDate"].then ===
                            "function"
                        ) {
                          $steps["updateTypeInterDate"] = await $steps[
                            "updateTypeInterDate"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uuEi
                        )}
                        style={(() => {
                          try {
                            return {
                              "background-color":
                                $state.typeInterDate == "dateOfBirth"
                                  ? "rgb(130, 84, 198 , 0.1)"
                                  : "rgb(130, 84, 198 , 0)",
                              color: "#7444BC"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        {
                          "\u062a\u0627\u0631\u06cc\u062e \u0632\u0627\u06cc\u0645\u0627\u0646"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__drCXr
                        )}
                      >
                        {
                          "\u062a\u0627\u0631\u06cc\u062e \u0632\u0627\u06cc\u0645\u0627\u0646"
                        }
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__h0Udw)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateTypeInterDate"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["typeInterDate"]
                                },
                                operation: 0,
                                value: "lastTime"
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTypeInterDate"] != null &&
                          typeof $steps["updateTypeInterDate"] === "object" &&
                          typeof $steps["updateTypeInterDate"].then ===
                            "function"
                        ) {
                          $steps["updateTypeInterDate"] = await $steps[
                            "updateTypeInterDate"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__srPlk
                        )}
                        style={(() => {
                          try {
                            return {
                              "background-color":
                                $state.typeInterDate == "lastTime"
                                  ? "rgb(130, 84, 198 , 0.1)"
                                  : "rgb(130, 84, 198 , 0)",
                              color: "#7444BC"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        {
                          "\u0622\u062e\u0631\u06cc\u0646 \u0642\u0627\u0639\u062f\u06af\u06cc"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eWTxl
                        )}
                      >
                        {
                          "\u062a\u0627\u0631\u06cc\u062e \u0632\u0627\u06cc\u0645\u0627\u0646"
                        }
                      </div>
                    </div>
                  </Stack__>
                  {(() => {
                    try {
                      return $state.typeInterDate == "dateOfBirth";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__atV2T)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hZqRx,
                          {
                            [sty.textdark__hZqRxOOgpk]: hasVariant(
                              $state,
                              "dark",
                              "dark"
                            )
                          }
                        )}
                      >
                        {
                          "\u062a\u0627\u0631\u06cc\u062e \u0632\u0627\u06cc\u0645\u0627\u0646\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646 :"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___8ZAzi,
                          hasVariant($state, "dark", "dark")
                            ? "input-dark"
                            : ``,
                          {
                            [sty.freeBoxdark___8ZAzioOgpk]: hasVariant(
                              $state,
                              "dark",
                              "dark"
                            )
                          }
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateSlideinModalClick"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dateModal", "click"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSlideinModalClick"] != null &&
                            typeof $steps["updateSlideinModalClick"] ===
                              "object" &&
                            typeof $steps["updateSlideinModalClick"].then ===
                              "function"
                          ) {
                            $steps["updateSlideinModalClick"] = await $steps[
                              "updateSlideinModalClick"
                            ];
                          }

                          $steps["updateTypeDate"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["typeInterDate"]
                                  },
                                  operation: 0,
                                  value: "dateOfBirth"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateTypeDate"] != null &&
                            typeof $steps["updateTypeDate"] === "object" &&
                            typeof $steps["updateTypeDate"].then === "function"
                          ) {
                            $steps["updateTypeDate"] = await $steps[
                              "updateTypeDate"
                            ];
                          }
                        }}
                      >
                        {(() => {
                          const child$Props = {
                            bordered: true,
                            className: classNames(
                              "__wab_instance",
                              sty.dateOfBirthBox,
                              {
                                [sty.dateOfBirthBoxdark]: hasVariant(
                                  $state,
                                  "dark",
                                  "dark"
                                )
                              }
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["dateOfBirthBox", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder:
                              "\u0645\u062b\u0644\u0627 7 \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a 1381",
                            readOnly: true,
                            value: generateStateValueProp($state, [
                              "dateOfBirthBox",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "dateOfBirthBox.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"dateOfBirthBox"}
                              data-plasmic-override={overrides.dateOfBirthBox}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                    </Stack__>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wcung, {
                      [sty.freeBoxdark__wcungoOgpk]: hasVariant(
                        $state,
                        "dark",
                        "dark"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rut6J
                      )}
                    >
                      {""}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ePtXp
                      )}
                    >
                      {"\u06cc\u0627"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oSoi7
                      )}
                    >
                      {""}
                    </div>
                  </div>
                  {(() => {
                    try {
                      return $state.typeInterDate == "lastTime";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__c4PA2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pZrDs,
                          {
                            [sty.textdark__pZrDsoOgpk]: hasVariant(
                              $state,
                              "dark",
                              "dark"
                            )
                          }
                        )}
                      >
                        {
                          "\u062a\u0627\u0631\u06cc\u062e \u0627\u0648\u0644\u06cc\u0646 \u0631\u0648\u0632 \u0627\u0632 \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646:"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sjniF,
                          hasVariant($state, "dark", "dark")
                            ? "input-dark"
                            : ``,
                          {
                            [sty.freeBoxdark__sjniFoOgpk]: hasVariant(
                              $state,
                              "dark",
                              "dark"
                            )
                          }
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateSlideinModalClick"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dateModal", "click"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSlideinModalClick"] != null &&
                            typeof $steps["updateSlideinModalClick"] ===
                              "object" &&
                            typeof $steps["updateSlideinModalClick"].then ===
                              "function"
                          ) {
                            $steps["updateSlideinModalClick"] = await $steps[
                              "updateSlideinModalClick"
                            ];
                          }

                          $steps["updateTypeDate"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["typeInterDate"]
                                  },
                                  operation: 0,
                                  value: "lastTime"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateTypeDate"] != null &&
                            typeof $steps["updateTypeDate"] === "object" &&
                            typeof $steps["updateTypeDate"].then === "function"
                          ) {
                            $steps["updateTypeDate"] = await $steps[
                              "updateTypeDate"
                            ];
                          }
                        }}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.lastTimeBox,
                              {
                                [sty.lastTimeBoxdark]: hasVariant(
                                  $state,
                                  "dark",
                                  "dark"
                                )
                              }
                            ),
                            onChange: async (...eventArgs: any) => {
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["lastTimeBox", "value"],
                                AntdInput_Helpers
                              ).apply(null, eventArgs);
                            },
                            placeholder:
                              "\u0645\u062b\u0644\u0627 3 \u0627\u0633\u0641\u0646\u062f 1403",
                            readOnly: true,
                            value: generateStateValueProp($state, [
                              "lastTimeBox",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "lastTimeBox.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"lastTimeBox"}
                              data-plasmic-override={overrides.lastTimeBox}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                    </Stack__>
                  ) : null}
                </div>
              </div>
            </div>
            {(() => {
              try {
                return $state.showResult;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__lqKXp)}>
                {(() => {
                  try {
                    return $state.showResult;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__xNcYl)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mf7Gd
                      )}
                    >
                      {
                        "\u0645\u062d\u0627\u0633\u0628\u0647 \u0633\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dv7KJ
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              return $state.agePregnant.week > 0
                                ? "سن بارداری شما " +
                                    $state.agePregnant.week +
                                    " هفته و " +
                                    $state.agePregnant.day +
                                    " روز می‌باشد."
                                : "سن بارداری شما " +
                                    $state.agePregnant.day +
                                    " روز می‌باشد.";
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0633\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc \u0634\u0645\u0627 18 \u0647\u0641\u062a\u0647 0 \u0631\u0648\u0632 \u0645\u06cc \u0628\u0627\u0634\u062f.\u200d";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Stack__>
                ) : null}
                <div className={classNames(projectcss.all, sty.freeBox__yM6Oo)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__czJKt)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__idZhp)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vCoKv
                        )}
                      >
                        {(() => {
                          try {
                            return true;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___3Wtof
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__cflMx
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___9Zcuz
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        " هفته " +
                                        ($state.agePregnant.week + 1) +
                                        " بارداری "
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          </div>
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lleoZ
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vZhWe
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    var emoji;
                                    var random = Math.floor(Math.random() * 4);
                                    switch (random) {
                                      case 0:
                                        emoji = "\uD83D\uDE0D";
                                        break;
                                      case 1:
                                        emoji = "\uD83D\uDE00";
                                        break;
                                      case 2:
                                        emoji = "\uD83D\uDE18";
                                        break;
                                      case 3:
                                        emoji = "\u2763️";
                                        break;
                                    }
                                    return (
                                      "فرزندت این هفته اندازه یک " +
                                      $state.sizeByFruit[
                                        $state.agePregnant.week + 1
                                      ] +
                                      " است " +
                                      emoji
                                    );
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__e6R80
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vxnLp
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "وزن فرزندت : " +
                                    $state.babySize[$state.agePregnant.week].w +
                                    ($state.agePregnant.week >= 27
                                      ? " کیلوگرم "
                                      : " گرم ")
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__luWzF
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "قد فرزندت : " +
                                    $state.babySize[$state.agePregnant.week].h +
                                    " سانتی متر "
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__p2Eoa
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__kqhO)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          height={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? "120"
                              : "150"
                          }
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return (() => {
                                var week;
                                if ($state.agePregnant.week + 1 < 10)
                                  week = "0" + ($state.agePregnant.week + 1);
                                else week = "" + ($state.agePregnant.week + 1);
                                return (
                                  "https://liom.storage.c2.liara.space/config/pregnancy/week" +
                                  week +
                                  ".png"
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          width={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? "120"
                              : "150"
                          }
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__oyxk)}>
              <div className={classNames(projectcss.all, sty.freeBox__g5QmI)}>
                <Button
                  data-plasmic-name={"button3"}
                  data-plasmic-override={overrides.button3}
                  className={classNames("__wab_instance", sty.button3)}
                  color={generateStateValueProp($state, ["button3", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateAgePregnant"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["agePregnant"]
                            },
                            operation: 0,
                            value: (() => {
                              const dueDateStr = "2025-08-01";
                              const dueDate = new Date(dueDateStr);
                              const today = new Date();
                              dueDate.setHours(0, 0, 0, 0);
                              today.setHours(0, 0, 0, 0);
                              const oneDay = 1000 * 60 * 60 * 24;
                              const daysRemaining = Math.floor(
                                (dueDate - today) / oneDay
                              );
                              const daysPassed = 280 - daysRemaining;
                              const safeDaysPassed = Math.max(
                                0,
                                Math.min(280, daysPassed)
                              );
                              const week = Math.floor(safeDaysPassed / 7);
                              const day = safeDaysPassed % 7;
                              $state.showResult = true;
                              return {
                                week: week,
                                day: day
                              };
                            })()
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateAgePregnant"] != null &&
                      typeof $steps["updateAgePregnant"] === "object" &&
                      typeof $steps["updateAgePregnant"].then === "function"
                    ) {
                      $steps["updateAgePregnant"] = await $steps[
                        "updateAgePregnant"
                      ];
                    }

                    $steps["invokeGlobalAction4"] = (() => {
                      if (
                        $ctx.query.userId.slice(
                          4,
                          $ctx.query.userId.length - 4
                        ) == "314149" ||
                        $ctx.query.userId.slice(
                          4,
                          $ctx.query.userId.length - 4
                        ) == "1"
                      ) {
                        return false;
                      }
                      var jy = $state.dateOfBirth.year;
                      var jm = $state.dateOfBirth.month;
                      var jd = $state.dateOfBirth.day;
                      var gy = jy <= 979 ? 621 : 1600;
                      jy -= jy <= 979 ? 0 : 979;
                      var days =
                        365 * jy +
                        parseInt(jy / 33) * 8 +
                        parseInt(((jy % 33) + 3) / 4) +
                        78 +
                        jd +
                        (jm < 7 ? (jm - 1) * 31 : (jm - 7) * 30 + 186);
                      gy += 400 * parseInt(days / 146097);
                      days %= 146097;
                      if (days > 36524) {
                        gy += 100 * parseInt(--days / 36524);
                        days %= 36524;
                        if (days >= 365) days++;
                      }
                      gy += 4 * parseInt(days / 1461);
                      days %= 1461;
                      gy += parseInt((days - 1) / 365);
                      if (days > 365) days = (days - 1) % 365;
                      var gd = days + 1;
                      var sal_a = [
                        0,
                        31,
                        (gy % 4 == 0 && gy % 100 != 0) || gy % 400 == 0
                          ? 29
                          : 28,
                        31,
                        30,
                        31,
                        30,
                        31,
                        31,
                        30,
                        31,
                        30,
                        31
                      ];

                      var gm;
                      for (gm = 0; gm < 13; gm++) {
                        var v = sal_a[gm];
                        if (gd <= v) break;
                        gd -= v;
                      }
                      const d =
                        gy +
                        "-" +
                        (gm <= 9 ? "0" : "") +
                        gm +
                        "-" +
                        (gd <= 9 ? "0" : "") +
                        gd +
                        "T10:10:10";
                      const specifiedDate = new Date(d);
                      const today = new Date();
                      if (today > specifiedDate) {
                        return false;
                      }
                      const diffTime = Math.abs(today - specifiedDate);
                      const diffDays = Math.ceil(
                        diffTime / (1000 * 60 * 60 * 24)
                      );
                      return diffDays > 280 ? false : true;
                    })()
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://api.liom.app/service/log",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    userId:
                                      $ctx.query.userId?.length > 0
                                        ? $ctx.query.userId.slice(
                                            4,
                                            $ctx.query.userId.length - 4
                                          )
                                        : "guest",
                                    pageName: "settingPage",
                                    action: "click-saveDate",
                                    extraData: {}
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              {
                                headers: {
                                  "Content-Type": "application/json",
                                  Authorization:
                                    "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjMiLCJuYW1lIjoicHJlZ25hbmN5In0.nE_MuQ821HUfFQAujqlhizJRCtnhZp4Y4DYHZzVGUe4"
                                }
                              }
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction4"] != null &&
                      typeof $steps["invokeGlobalAction4"] === "object" &&
                      typeof $steps["invokeGlobalAction4"].then === "function"
                    ) {
                      $steps["invokeGlobalAction4"] = await $steps[
                        "invokeGlobalAction4"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button3", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.showResult ? "محاسبه مجدد" : "محاسبه";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0645\u062d\u0627\u0633\u0628\u0647";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </Button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "dateModal",
    "datePickers",
    "button",
    "dateOfBirthBox",
    "lastTimeBox",
    "button3"
  ],
  dateModal: ["dateModal", "datePickers", "button"],
  datePickers: ["datePickers"],
  button: ["button"],
  dateOfBirthBox: ["dateOfBirthBox"],
  lastTimeBox: ["lastTimeBox"],
  button3: ["button3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dateModal: typeof SlideinModal;
  datePickers: typeof DatePickers;
  button: typeof Button;
  dateOfBirthBox: typeof AntdInput;
  lastTimeBox: typeof AntdInput;
  button3: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAgePregnant__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAgePregnant__VariantsArgs;
    args?: PlasmicAgePregnant__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAgePregnant__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAgePregnant__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAgePregnant__ArgProps,
          internalVariantPropNames: PlasmicAgePregnant__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAgePregnant__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAgePregnant";
  } else {
    func.displayName = `PlasmicAgePregnant.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicAgePregnant = Object.assign(
  // Top-level PlasmicAgePregnant renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    dateModal: makeNodeComponent("dateModal"),
    datePickers: makeNodeComponent("datePickers"),
    button: makeNodeComponent("button"),
    dateOfBirthBox: makeNodeComponent("dateOfBirthBox"),
    lastTimeBox: makeNodeComponent("lastTimeBox"),
    button3: makeNodeComponent("button3"),

    // Metadata about props expected for PlasmicAgePregnant
    internalVariantProps: PlasmicAgePregnant__VariantProps,
    internalArgProps: PlasmicAgePregnant__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAgePregnant;
/* prettier-ignore-end */
