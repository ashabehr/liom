/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: GCktZfOzFzbJ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import UploudeTime from "../../UploudeTime"; // plasmic-import: aUO_fJR7ceN4/component
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import Post2ForSocialMain from "../../Post2ForSocialMain"; // plasmic-import: eaFD2jwbxRPb/component
import ReactionBar2ForSocialMain from "../../ReactionBar2ForSocialMain"; // plasmic-import: H6dfyqWexG5G/component
import Like from "../../Like"; // plasmic-import: ARJf0DiYhPbe/component
import CommentNum from "../../CommentNum"; // plasmic-import: qNEIB2lcMLwU/component
import Save from "../../Save"; // plasmic-import: _x22uBJ4ZqC9/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicRepeatPost2.module.css"; // plasmic-import: GCktZfOzFzbJ/css

import Icon244Icon from "./icons/PlasmicIcon__Icon244"; // plasmic-import: xGc0UtorNcAW/icon
import Icon246Icon from "./icons/PlasmicIcon__Icon246"; // plasmic-import: ibkqt9GkPceD/icon
import Icon149Icon from "./icons/PlasmicIcon__Icon149"; // plasmic-import: bJ7kVZQK3ovZ/icon
import Icon147Icon from "./icons/PlasmicIcon__Icon147"; // plasmic-import: 2SO3BEHlRKXI/icon

createPlasmicElementProxy;

export type PlasmicRepeatPost2__VariantMembers = {
  type: "admin";
  main: "main";
};
export type PlasmicRepeatPost2__VariantsArgs = {
  type?: SingleChoiceArg<"admin">;
  main?: SingleBooleanChoiceArg<"main">;
};
type VariantPropType = keyof PlasmicRepeatPost2__VariantsArgs;
export const PlasmicRepeatPost2__VariantProps = new Array<VariantPropType>(
  "type",
  "main"
);

export type PlasmicRepeatPost2__ArgsType = {
  postData?: any;
  postToken?: string;
  onClickShere?: (event: any) => void;
  onMainChange?: (val: any) => void;
  comingSoon?: (event: any) => void;
  comment?: any;
  onCommentChange?: (val: string) => void;
  isMainPage?: boolean;
  user?: any;
};
type ArgPropType = keyof PlasmicRepeatPost2__ArgsType;
export const PlasmicRepeatPost2__ArgProps = new Array<ArgPropType>(
  "postData",
  "postToken",
  "onClickShere",
  "onMainChange",
  "comingSoon",
  "comment",
  "onCommentChange",
  "isMainPage",
  "user"
);

export type PlasmicRepeatPost2__OverridesType = {
  root?: Flex__<"div">;
  uploudeTime?: Flex__<typeof UploudeTime>;
  timer?: Flex__<typeof Timer>;
  post2ForSocialMain?: Flex__<typeof Post2ForSocialMain>;
  reactionBar2ForSocialMain?: Flex__<typeof ReactionBar2ForSocialMain>;
  like2?: Flex__<typeof Like>;
  commentNum?: Flex__<typeof CommentNum>;
  save?: Flex__<typeof Save>;
};

export interface DefaultRepeatPost2Props {
  postData?: any;
  postToken?: string;
  onClickShere?: (event: any) => void;
  onMainChange?: (val: any) => void;
  comingSoon?: (event: any) => void;
  comment?: any;
  onCommentChange?: (val: string) => void;
  isMainPage?: boolean;
  user?: any;
  type?: SingleChoiceArg<"admin">;
  main?: SingleBooleanChoiceArg<"main">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRepeatPost2__RenderFunc(props: {
  variants: PlasmicRepeatPost2__VariantsArgs;
  args: PlasmicRepeatPost2__ArgsType;
  overrides: PlasmicRepeatPost2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isMainPage: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "like2.islike",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.postData.isLiked;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      },
      {
        path: "main",
        type: "writable",
        variableType: "variant",

        valueProp: "main",
        onChangeProp: "onMainChange"
      },
      {
        path: "pinTime",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "time",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.postData.time;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "comment",
        type: "writable",
        variableType: "object",

        valueProp: "comment",
        onChangeProp: "onCommentChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root,
        { [sty.roottype_admin]: hasVariant($state, "type", "admin") }
      )}
      style={
        hasVariant($state, "type", "admin")
          ? (() => {
              try {
                return {
                  background:
                    "linear-gradient(white, white) padding-box, linear-gradient(45deg, #7242BA, #EF6FB7) border-box",
                  border: "2px solid transparent"
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()
          : undefined
      }
    >
      <div
        className={classNames(projectcss.all, sty.freeBox___4Xnj5, {
          [sty.freeBoxtype_admin___4Xnj5WnK]: hasVariant(
            $state,
            "type",
            "admin"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__iPnQv, {
            [sty.freeBoxmain__iPnQvn7Uvj]: hasVariant($state, "main", "main"),
            [sty.freeBoxtype_admin__iPnQvWnK]: hasVariant(
              $state,
              "type",
              "admin"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox___4FUx1, {
              [sty.freeBoxtype_admin___4FUx1WnK]: hasVariant(
                $state,
                "type",
                "admin"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__sgkzB, {
                [sty.freeBoxtype_admin__sgkzBWnK]: hasVariant(
                  $state,
                  "type",
                  "admin"
                )
              })}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__dw3Yi, {
                  [sty.imgtype_admin__dw3YiWnK]: hasVariant(
                    $state,
                    "type",
                    "admin"
                  )
                })}
                displayHeight={"48px"}
                displayMaxHeight={"100%"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"48px"}
                height={``}
                loading={"lazy"}
                src={(() => {
                  try {
                    return $props.postData.user.image;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                width={``}
              />
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__bNaDh, {
                [sty.freeBoxtype_admin__bNaDhWnK]: hasVariant(
                  $state,
                  "type",
                  "admin"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox___94NM2, {
                  [sty.freeBoxtype_admin___94NM2WnK]: hasVariant(
                    $state,
                    "type",
                    "admin"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___68L9,
                    {
                      [sty.texttype_admin___68L9WnK]: hasVariant(
                        $state,
                        "type",
                        "admin"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.postData.user.name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0627\u0645\u06cc\u0631 \u062d\u0633\u06cc\u0646";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                {(() => {
                  try {
                    return $props.postData.user.premiumStatus;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__usFGs, {
                      [sty.imgtype_admin__usFGsWnK]: hasVariant(
                        $state,
                        "type",
                        "admin"
                      )
                    })}
                    displayHeight={"15px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"15px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liom_hamyar/images/image99.svg",
                      fullWidth: 307.1,
                      fullHeight: 306.78,
                      aspectRatio: 1.001043
                    }}
                  />
                ) : null}
                {(() => {
                  try {
                    return $props.postData.user.goldenTick;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__dr8Pg, {
                      [sty.imgtype_admin__dr8PgWnK]: hasVariant(
                        $state,
                        "type",
                        "admin"
                      )
                    })}
                    displayHeight={"15px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"15px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liom_hamyar/images/image100.svg",
                      fullWidth: 307.1,
                      fullHeight: 306.78,
                      aspectRatio: 1.001043
                    }}
                  />
                ) : null}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7Jz
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.postData.user.username;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "amir__@";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__fDjo, {
              [sty.freeBoxtype_admin__fDjoWnK]: hasVariant(
                $state,
                "type",
                "admin"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__iwDcY, {
                [sty.freeBoxtype_admin__iwDcYWnK]: hasVariant(
                  $state,
                  "type",
                  "admin"
                )
              })}
            >
              <UploudeTime
                data-plasmic-name={"uploudeTime"}
                data-plasmic-override={overrides.uploudeTime}
                className={classNames("__wab_instance", sty.uploudeTime, {
                  [sty.uploudeTimemain]: hasVariant($state, "main", "main"),
                  [sty.uploudeTimetype_admin]: hasVariant(
                    $state,
                    "type",
                    "admin"
                  )
                })}
                posttime={(() => {
                  try {
                    return (() => {
                      function addTime(original, addHours, addMinutes) {
                        let date = new Date(
                          original.year,
                          original.month - 1,
                          original.day,
                          original.hour,
                          original.minute,
                          original.second
                        );
                        date.setHours(date.getHours() + addHours);
                        date.setMinutes(date.getMinutes() + addMinutes);
                        return {
                          year: date.getFullYear(),
                          month: date.getMonth() + 1,
                          day: date.getDate(),
                          hour: date.getHours(),
                          minute: date.getMinutes(),
                          second: date.getSeconds(),
                          nanosecond: original.nanosecond,
                          timeZoneOffsetSeconds: original.timeZoneOffsetSeconds
                        };
                      }
                      const newCreatedAt = addTime(
                        $props.postData.post.updatedAt,
                        3,
                        30
                      );
                      return newCreatedAt;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__wkz8)}>
              {(() => {
                try {
                  return $props.postData.post.pin;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__ceA3X)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ltPu,
                      {
                        [sty.texttype_admin__ltPuWnK]: hasVariant(
                          $state,
                          "type",
                          "admin"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "type", "admin") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.pinTime;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.pinTime;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    )}
                  </div>
                  <Timer
                    data-plasmic-name={"timer"}
                    data-plasmic-override={overrides.timer}
                    className={classNames("__wab_instance", sty.timer, {
                      [sty.timertype_admin]: hasVariant($state, "type", "admin")
                    })}
                    intervalSeconds={1}
                    isRunning={true}
                    onTick={async () => {
                      const $steps = {};

                      $steps["updatePinTime"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["pinTime"]
                              },
                              operation: 0,
                              value: (() => {
                                function convertSeconds(seconds) {
                                  const hrs = Math.floor(seconds / 3600);
                                  const mins = Math.floor(
                                    (seconds % 3600) / 60
                                  );
                                  const secs = seconds % 60;
                                  const h = String(hrs).padStart(2, "0");
                                  const m = String(mins).padStart(2, "0");
                                  const s = String(secs).padStart(2, "0");
                                  return `${h}:${m}:${s}`;
                                }
                                $state.time = $state.time - 1;
                                return convertSeconds($state.time);
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePinTime"] != null &&
                        typeof $steps["updatePinTime"] === "object" &&
                        typeof $steps["updatePinTime"].then === "function"
                      ) {
                        $steps["updatePinTime"] = await $steps["updatePinTime"];
                      }
                    }}
                    runWhileEditing={false}
                  />

                  <Icon244Icon
                    className={classNames(projectcss.all, sty.svg__mqBgz)}
                    role={"img"}
                  />
                </div>
              ) : null}
              {(() => {
                try {
                  return $props.postData.post.reposted;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__ihgDl)}>
                  <Icon246Icon
                    className={classNames(projectcss.all, sty.svg__cqCo5)}
                    role={"img"}
                  />
                </div>
              ) : null}
            </div>
          </div>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__thBzR, {
          [sty.freeBoxmain__thBzRn7Uvj]: hasVariant($state, "main", "main"),
          [sty.freeBoxtype_admin__thBzRWnK]: hasVariant($state, "type", "admin")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["runCode"] =
            $props.isMainPage == true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        return window.open(
                          `/post?post=${$props.postData.post.id}`,
                          "_self"
                        );
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
      >
        <Post2ForSocialMain
          data-plasmic-name={"post2ForSocialMain"}
          data-plasmic-override={overrides.post2ForSocialMain}
          audioLinkInPost={(() => {
            try {
              return (
                $props.postData.post.action ||
                $props.postData.attachments[0]?.url ||
                ""
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          className={classNames("__wab_instance", sty.post2ForSocialMain, {
            [sty.post2ForSocialMainmain]: hasVariant($state, "main", "main"),
            [sty.post2ForSocialMaintype_admin]: hasVariant(
              $state,
              "type",
              "admin"
            )
          })}
          data={(() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          image2={(() => {
            try {
              return (
                $props.postData.post.action ||
                $props.postData.attachments[0]?.url ||
                ""
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
          main={
            hasVariant($state, "main", "main")
              ? (() => {
                  try {
                    return $state.main;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return $state.main;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
          }
          postType={(() => {
            try {
              return (
                $props.postData.attachments[0]?.type ||
                ($props.postData.post.actionText === "بازکردن تصویر"
                  ? "image"
                  : $props.postData.post.actionText === "بازکردن صدا"
                  ? "audio"
                  : $props.postData.post.actionText === "نمایش ویدیو"
                  ? "video"
                  : $props.postData.post.actionText === "دانلود لوگو"
                  ? "file"
                  : "jastText")
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "jastText";
              }
              throw e;
            }
          })()}
          text={
            hasVariant($state, "main", "main")
              ? (() => {
                  try {
                    return $props.postData.post.text.replace(/\n/g, " ");
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return $props.postData.post.text;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
          }
          title={(() => {
            try {
              return $props.postData.post.title;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          video={(() => {
            try {
              return (
                $props.postData.post.action ||
                $props.postData.attachments[0]?.url ||
                ""
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </div>
      <ReactionBar2ForSocialMain
        data-plasmic-name={"reactionBar2ForSocialMain"}
        data-plasmic-override={overrides.reactionBar2ForSocialMain}
        className={classNames("__wab_instance", sty.reactionBar2ForSocialMain, {
          [sty.reactionBar2ForSocialMainmain]: hasVariant(
            $state,
            "main",
            "main"
          ),
          [sty.reactionBar2ForSocialMaintype_admin]: hasVariant(
            $state,
            "type",
            "admin"
          )
        })}
      >
        <Like
          data-plasmic-name={"like2"}
          data-plasmic-override={overrides.like2}
          className={classNames("__wab_instance", sty.like2, {
            [sty.like2main]: hasVariant($state, "main", "main")
          })}
          isMain={(() => {
            try {
              return $props.isMainPage;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()}
          islike={generateStateValueProp($state, ["like2", "islike"])}
          likeCountForBar={(() => {
            try {
              return $props.postData.likeCount;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          main={
            hasVariant($state, "main", "main")
              ? (() => {
                  try {
                    return $state.main;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              : undefined
          }
          onIslikeChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["like2", "islike"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          postIdForLike={(() => {
            try {
              return $props.postData.post.id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          tokenForPostLike={(() => {
            try {
              return $props.postToken;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          user={(() => {
            try {
              return $props.user;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />

        <CommentNum
          data-plasmic-name={"commentNum"}
          data-plasmic-override={overrides.commentNum}
          active={(() => {
            try {
              return $state.comment.active;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
          className={classNames("__wab_instance", sty.commentNum, {
            [sty.commentNummain]: hasVariant($state, "main", "main")
          })}
          main={
            hasVariant($state, "main", "main")
              ? true
              : (() => {
                  try {
                    return $state.main;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
          }
          number={(() => {
            try {
              return $props.postData.commentCount;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          postId={(() => {
            try {
              return $props.postData.post.id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox__bo5, {
            [sty.freeBoxmain__bo5N7Uvj]: hasVariant($state, "main", "main"),
            [sty.freeBoxtype_admin__bo5WnK]: hasVariant($state, "type", "admin")
          })}
          onClick={args.onClickShere}
        >
          <Icon149Icon
            className={classNames(projectcss.all, sty.svg___8HN3, {
              [sty.svgmain___8HN3N7Uvj]: hasVariant($state, "main", "main")
            })}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__afh8,
              { [sty.textmain__afh8N7Uvj]: hasVariant($state, "main", "main") }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.postData.shareCount;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "32";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <Save
          data-plasmic-name={"save"}
          data-plasmic-override={overrides.save}
          bokmarkcount={(() => {
            try {
              return $props.postData.bookmarkCount;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          className={classNames("__wab_instance", sty.save, {
            [sty.savemain]: hasVariant($state, "main", "main")
          })}
          isBooookMarked={(() => {
            try {
              return $props.postData.isBookmarked;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()}
          isMain={(() => {
            try {
              return $props.isMainPage;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()}
          main={
            hasVariant($state, "main", "main")
              ? (() => {
                  try {
                    return $state.main;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              : undefined
          }
          postIdBookmark={(() => {
            try {
              return $props.postData.post.id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          tokenbookmark={(() => {
            try {
              return $props.postToken;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          user={(() => {
            try {
              return $props.user;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox__oHo7W, {
            [sty.freeBoxmain__oHo7Wn7Uvj]: hasVariant($state, "main", "main")
          })}
          onClick={async event => {
            const $steps = {};

            $steps["goToPage"] = true
              ? (() => {
                  const actionArgs = {
                    destination: (() => {
                      try {
                        return `/post?post=${$props.postData.post.id}`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToPage"] != null &&
              typeof $steps["goToPage"] === "object" &&
              typeof $steps["goToPage"].then === "function"
            ) {
              $steps["goToPage"] = await $steps["goToPage"];
            }
          }}
        >
          <Icon147Icon
            className={classNames(projectcss.all, sty.svg___3Uqp6, {
              [sty.svgmain___3Uqp6N7Uvj]: hasVariant($state, "main", "main")
            })}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__j0Vsn,
              { [sty.textmain__j0Vsnn7Uvj]: hasVariant($state, "main", "main") }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.postData.viewCount;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "143";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </ReactionBar2ForSocialMain>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "uploudeTime",
    "timer",
    "post2ForSocialMain",
    "reactionBar2ForSocialMain",
    "like2",
    "commentNum",
    "save"
  ],
  uploudeTime: ["uploudeTime"],
  timer: ["timer"],
  post2ForSocialMain: ["post2ForSocialMain"],
  reactionBar2ForSocialMain: [
    "reactionBar2ForSocialMain",
    "like2",
    "commentNum",
    "save"
  ],
  like2: ["like2"],
  commentNum: ["commentNum"],
  save: ["save"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  uploudeTime: typeof UploudeTime;
  timer: typeof Timer;
  post2ForSocialMain: typeof Post2ForSocialMain;
  reactionBar2ForSocialMain: typeof ReactionBar2ForSocialMain;
  like2: typeof Like;
  commentNum: typeof CommentNum;
  save: typeof Save;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRepeatPost2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRepeatPost2__VariantsArgs;
    args?: PlasmicRepeatPost2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRepeatPost2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRepeatPost2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRepeatPost2__ArgProps,
          internalVariantPropNames: PlasmicRepeatPost2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRepeatPost2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRepeatPost2";
  } else {
    func.displayName = `PlasmicRepeatPost2.${nodeName}`;
  }
  return func;
}

export const PlasmicRepeatPost2 = Object.assign(
  // Top-level PlasmicRepeatPost2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    uploudeTime: makeNodeComponent("uploudeTime"),
    timer: makeNodeComponent("timer"),
    post2ForSocialMain: makeNodeComponent("post2ForSocialMain"),
    reactionBar2ForSocialMain: makeNodeComponent("reactionBar2ForSocialMain"),
    like2: makeNodeComponent("like2"),
    commentNum: makeNodeComponent("commentNum"),
    save: makeNodeComponent("save"),

    // Metadata about props expected for PlasmicRepeatPost2
    internalVariantProps: PlasmicRepeatPost2__VariantProps,
    internalArgProps: PlasmicRepeatPost2__ArgProps
  }
);

export default PlasmicRepeatPost2;
/* prettier-ignore-end */
