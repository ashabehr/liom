/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: h7ceF9lBthFF

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Dialog3 from "../../Dialog3"; // plasmic-import: j5op3vcM_4hJ/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import TextInput from "../../TextInput"; // plasmic-import: cOSV4CnhD7mN/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Timer } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicMobileDialog.module.css"; // plasmic-import: h7ceF9lBthFF/css

import Icon157Icon from "./icons/PlasmicIcon__Icon157"; // plasmic-import: pYMHtMPOTSpB/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: Hrcd2gLhG27X/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: rjflJ2D4OoXB/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicMobileDialog__VariantMembers = {};
export type PlasmicMobileDialog__VariantsArgs = {};
type VariantPropType = keyof PlasmicMobileDialog__VariantsArgs;
export const PlasmicMobileDialog__VariantProps = new Array<VariantPropType>();

export type PlasmicMobileDialog__ArgsType = {
  type?: string;
  token?: string;
  desc?: string;
  redirectUrl?: string;
  onSelectShopChange?: (val: string) => void;
  open?: boolean;
  onOpenChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicMobileDialog__ArgsType;
export const PlasmicMobileDialog__ArgProps = new Array<ArgPropType>(
  "type",
  "token",
  "desc",
  "redirectUrl",
  "onSelectShopChange",
  "open",
  "onOpenChange"
);

export type PlasmicMobileDialog__OverridesType = {
  root?: Flex__<"div">;
  dialog?: Flex__<typeof Dialog3>;
  reveal?: Flex__<typeof Reveal>;
  textInput?: Flex__<typeof TextInput>;
  antdInput?: Flex__<typeof Input>;
  button9?: Flex__<typeof Button>;
  mobileCode?: Flex__<typeof Reveal>;
  textInput3?: Flex__<typeof TextInput>;
  antdInput4?: Flex__<typeof Input>;
  embedHtml?: Flex__<typeof Embed>;
  timer?: Flex__<typeof Timer>;
  button11?: Flex__<typeof Button>;
  button10?: Flex__<typeof Button>;
};

export interface DefaultMobileDialogProps {
  type?: string;
  token?: string;
  desc?: string;
  redirectUrl?: string;
  onSelectShopChange?: (val: string) => void;
  open?: boolean;
  onOpenChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMobileDialog__RenderFunc(props: {
  variants: PlasmicMobileDialog__VariantsArgs;
  args: PlasmicMobileDialog__ArgsType;
  overrides: PlasmicMobileDialog__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          type: "pregnancy_danger_sub",
          token:
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjU3MWNlZWYxLWM3YTgtNDllMC1hZjc4LWE4YzdiZjk4ZTdiMyIsInR5cGUiOiJ1c2VyIiwiaWF0IjoxNzQ4NDMyMTc5fQ.ZkLMiVv4juiTMBADoLVhPGOZm92gNsWEXOFs-drE_zE",
          desc: "\u0628\u0631\u0627\u06cc \u062f\u0633\u062a\u0631\u0633\u06cc \u0648 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0627\u06cc\u0646 \u0627\u0628\u0632\u0627\u0631\u060c \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647 \u062a\u0647\u06cc\u0647 \u0646\u0645\u0627\u06cc\u06cc\u062f."
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selectShop",
        type: "readonly",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.shopDialog.data.result.shopList.length == 1
                ? $state.shopDialog.data.result.shopList[0]
                : $state.shopDialog.data.result.shopList.find(
                    item => item.selected == 1
                  );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })(),

        onChangeProp: "onSelectShopChange"
      },
      {
        path: "dialog.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.open;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "open",
        type: "writable",
        variableType: "boolean",

        valueProp: "open",
        onChangeProp: "onOpenChange"
      },
      {
        path: "topShop",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.shopDialog.data.result.shopList.length == 1
                ? $state.shopDialog.data.result.shopList[0]
                : $state.shopDialog.data.result.shopList.find(
                    item => item.selected == 1
                  );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "button9.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.mobile;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "button10.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "mobile",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "loadedbtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "code",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "time",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "codeNumber",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "button11.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "message",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      style={{ position: "absolute", "z-index": 300 }}
    >
      <Dialog3
        data-plasmic-name={"dialog"}
        data-plasmic-override={overrides.dialog}
        className={classNames("__wab_instance", sty.dialog)}
        onOpendialogChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialog", "opendialog"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }

          (async val => {
            const $steps = {};

            $steps["updateOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["open"]
                    },
                    operation: 0,
                    value: $state.dialog.opendialog
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateOpen"] != null &&
              typeof $steps["updateOpen"] === "object" &&
              typeof $steps["updateOpen"].then === "function"
            ) {
              $steps["updateOpen"] = await $steps["updateOpen"];
            }
          }).apply(null, eventArgs);
        }}
        opendialog={generateStateValueProp($state, ["dialog", "opendialog"])}
      >
        {(() => {
          try {
            return !$state.code;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Reveal
            data-plasmic-name={"reveal"}
            data-plasmic-override={overrides.reveal}
            className={classNames("__wab_instance", sty.reveal)}
            effect={"fade"}
            triggerOnce={true}
          >
            <div className={classNames(projectcss.all, sty.freeBox___8Et9V)}>
              <div className={classNames(projectcss.all, sty.freeBox___9Upw)}>
                <Icon157Icon
                  className={classNames(projectcss.all, sty.svg___4TkLy)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xfyiC
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.desc;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__d9Fmj)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xBjX
                  )}
                >
                  {
                    "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__oUlC,
                    "negative"
                  )}
                >
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    antdInput2={(() => {
                      const child$Props = {
                        "aria-label": ``,
                        bordered: false,
                        className: classNames("__wab_instance", sty.antdInput),
                        id: "inputMobile1",
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["antdInput", "value"],
                            Input_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder: "9123456789",
                        size: "large",
                        type: "tel",
                        value: generateStateValueProp($state, [
                          "antdInput",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "antdInput.value"
                          }
                        ],
                        [],
                        Input_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <Input
                          data-plasmic-name={"antdInput"}
                          data-plasmic-override={overrides.antdInput}
                          {...child$Props}
                        />
                      );
                    })()}
                    className={classNames("__wab_instance", sty.textInput)}
                    endIcon={
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__h9Yns
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vyaz9,
                            "negative"
                          )}
                        >
                          {"+98 "}
                        </div>
                        <Icon111Icon
                          className={classNames(projectcss.all, sty.svg__jBddZ)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"09123456789"}
                    showEndIcon={true}
                    type={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "tel"
                        : "tel"
                    }
                    value={
                      generateStateValueProp($state, ["textInput", "value"]) ??
                      ""
                    }
                  />
                </div>
              </div>
              <section
                className={classNames(projectcss.all, sty.section___6JIru)}
              >
                <Button
                  data-plasmic-name={"button9"}
                  data-plasmic-override={overrides.button9}
                  className={classNames("__wab_instance", sty.button9)}
                  color={generateStateValueProp($state, ["button9", "color"])}
                  endIcon={
                    <Icon115Icon
                      className={classNames(projectcss.all, sty.svg__wy4Lx)}
                      role={"img"}
                    />
                  }
                  isDisabled={(() => {
                    try {
                      return (
                        !(
                          $state.antdInput.value.length === 10 ||
                          $state.antdInput.value.length === 11
                        ) || $state.loadedbtn
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  loading={(() => {
                    try {
                      return $state.loadedbtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadedbtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn"] != null &&
                      typeof $steps["updateLoadedbtn"] === "object" &&
                      typeof $steps["updateLoadedbtn"].then === "function"
                    ) {
                      $steps["updateLoadedbtn"] = await $steps[
                        "updateLoadedbtn"
                      ];
                    }

                    $steps["updateMobile"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["mobile"]
                            },
                            operation: 0,
                            value: $state.antdInput.value.startsWith("0")
                              ? $state.antdInput.value
                              : "0" + $state.antdInput.value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateMobile"] != null &&
                      typeof $steps["updateMobile"] === "object" &&
                      typeof $steps["updateMobile"].then === "function"
                    ) {
                      $steps["updateMobile"] = await $steps["updateMobile"];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://api.liom.app/rest/user/setMobileSendCode",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    data: $state.mobile,
                                    smsType: "sms"
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return {
                                    headers: {
                                      Authorization: "Bearer " + $props.token
                                    }
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateCode"] =
                      $steps.invokeGlobalAction?.data?.success == true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["code"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateCode"] != null &&
                      typeof $steps["updateCode"] === "object" &&
                      typeof $steps["updateCode"].then === "function"
                    ) {
                      $steps["updateCode"] = await $steps["updateCode"];
                    }

                    $steps["updateTime"] =
                      $steps.invokeGlobalAction?.data?.success == true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["time"]
                              },
                              operation: 0,
                              value: 60
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateTime"] != null &&
                      typeof $steps["updateTime"] === "object" &&
                      typeof $steps["updateTime"].then === "function"
                    ) {
                      $steps["updateTime"] = await $steps["updateTime"];
                    }

                    $steps["updateLoadedbtn2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadedbtn"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadedbtn2"] != null &&
                      typeof $steps["updateLoadedbtn2"] === "object" &&
                      typeof $steps["updateLoadedbtn2"].then === "function"
                    ) {
                      $steps["updateLoadedbtn2"] = await $steps[
                        "updateLoadedbtn2"
                      ];
                    }

                    $steps["updateMessage"] =
                      $steps.invokeGlobalAction?.data?.success == false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["message"]
                              },
                              operation: 0,
                              value:
                                $steps.invokeGlobalAction?.data?.error?.message
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateMessage"] != null &&
                      typeof $steps["updateMessage"] === "object" &&
                      typeof $steps["updateMessage"].then === "function"
                    ) {
                      $steps["updateMessage"] = await $steps["updateMessage"];
                    }

                    $steps["invokeGlobalAction2"] =
                      $steps.invokeGlobalAction?.data?.success == false
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                (() => {
                                  try {
                                    return $state.message;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button9", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zoyc4
                    )}
                  >
                    {
                      "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                    }
                  </div>
                </Button>
              </section>
            </div>
          </Reveal>
        ) : null}
        {(() => {
          try {
            return $state.code;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Reveal
            data-plasmic-name={"mobileCode"}
            data-plasmic-override={overrides.mobileCode}
            className={classNames("__wab_instance", sty.mobileCode)}
            effect={"fade"}
            triggerOnce={true}
          >
            <div className={classNames(projectcss.all, sty.freeBox__mqb6)}>
              <div className={classNames(projectcss.all, sty.freeBox__tNvUu)}>
                <div className={classNames(projectcss.all, sty.freeBox__d7Hkr)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8QpuF
                    )}
                  >
                    {
                      "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d0J18
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateCode"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["code"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCode"] != null &&
                        typeof $steps["updateCode"] === "object" &&
                        typeof $steps["updateCode"].then === "function"
                      ) {
                        $steps["updateCode"] = await $steps["updateCode"];
                      }
                    }}
                  >
                    {
                      "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0634\u0645\u0627\u0631\u0647"
                    }
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__mSxQp,
                    "negative"
                  )}
                >
                  <TextInput
                    data-plasmic-name={"textInput3"}
                    data-plasmic-override={overrides.textInput3}
                    antdInput2={(() => {
                      const child$Props = {
                        "aria-label": ``,
                        bordered: false,
                        className: classNames("__wab_instance", sty.antdInput4),
                        disabled: true,
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["antdInput4", "value"],
                            Input_Helpers
                          ).apply(null, eventArgs);
                        },
                        size: "large",
                        type: "tel",
                        value: generateStateValueProp($state, [
                          "antdInput4",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "antdInput4.value"
                          }
                        ],
                        [],
                        Input_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <Input
                          data-plasmic-name={"antdInput4"}
                          data-plasmic-override={overrides.antdInput4}
                          {...child$Props}
                        />
                      );
                    })()}
                    className={classNames("__wab_instance", sty.textInput3)}
                    endIcon={
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mrgVe
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vr5Dj,
                            "negative"
                          )}
                        >
                          {"+98 "}
                        </div>
                        <Icon111Icon
                          className={classNames(projectcss.all, sty.svg__peleq)}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "textInput3",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"09123456789"}
                    showEndIcon={true}
                    type={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? "tel"
                        : "tel"
                    }
                    value={
                      generateStateValueProp($state, ["textInput3", "value"]) ??
                      ""
                    }
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__e3NXd)}>
                  <Embed
                    data-plasmic-name={"embedHtml"}
                    data-plasmic-override={overrides.embedHtml}
                    className={classNames("__wab_instance", sty.embedHtml)}
                    code={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? '<div style="display: flex; justify-content: space-between; align-items: center; width: 100%; box-sizing: border-box;">\r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit1" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="moveToNext(this, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit2" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="moveToNext(this, \'digit3\')" onkeydown="moveToPrev(event, \'digit1\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit3" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="moveToNext(this, \'digit4\')" onkeydown="moveToPrev(event, \'digit2\')">\r\n           \r\n    <input type="text" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 5px; background-color: transparent; outline: none;" \r\n           id="digit4" onfocus="this.style.borderColor=\'#800080\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           onkeydown="moveToPrev(event, \'digit3\')">\r\n</div>\r\n\r\n<script>\r\n    function moveToNext(current, nextFieldId) {\r\n        if (current.value.length === 1) {\r\n            document.getElementById(nextFieldId).focus();\r\n        }\r\n    }\r\n\r\n    function moveToPrev(event, prevFieldId) {\r\n        if (event.key === "Backspace" && !event.target.value) {\r\n            document.getElementById(prevFieldId).focus();\r\n        }\r\n    }\r\n</script>\r\n'
                        : '<div style="display: flex; justify-content: space-between; align-items: center; width: 100%; box-sizing: border-box; direction: ltr;">\r\n    <input type="number" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit1" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 0, \'digit2\')">\r\n           \r\n    <input type="number" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit2" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 1, \'digit3\')" onkeydown="moveToPrev(event, \'digit1\')">\r\n           \r\n    <input type="number" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit3" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 2, \'digit4\')" onkeydown="moveToPrev(event, \'digit2\')">\r\n           \r\n    <input type="number" maxlength="1" \r\n           style="width: 60px; height: 60px; font-size: 24px; text-align: center; border: 2px solid #ccc; border-radius: 8px; background-color: transparent; outline: none;" \r\n           id="digit4" onfocus="this.style.borderColor=\'#8254C6\'" onblur="this.style.borderColor=\'#ccc\'" \r\n           oninput="handleInput(this, 3)" onkeydown="moveToPrev(event, \'digit3\')">\r\n</div>\r\n\r\n<script>\r\n    // \u0622\u0631\u0627\u06cc\u0647 \u0628\u0631\u0627\u06cc \u0630\u062e\u06cc\u0631\u0647 \u0645\u0642\u0627\u062f\u06cc\u0631 \u0648\u0631\u0648\u062f\u06cc\r\n    window.inputValues = ["", "", "", ""];\r\n\r\n    function handleInput(current, index, nextFieldId) {\r\n        // \u0630\u062e\u06cc\u0631\u0647 \u0645\u0642\u062f\u0627\u0631 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u062f\u0631 \u0622\u0631\u0627\u06cc\u0647\r\n        window.inputValues[index] = current.value;\r\n        \r\n        // \u062d\u0631\u06a9\u062a \u0628\u0647 \u0641\u06cc\u0644\u062f \u0628\u0639\u062f\u06cc \u062f\u0631 \u0635\u0648\u0631\u062a \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0646 \u0645\u0642\u062f\u0627\u0631\r\n        if (current.value.length === 1 && nextFieldId) {\r\n            document.getElementById(nextFieldId).focus();\r\n        }\r\n        \r\n        // \u0648\u0642\u062a\u06cc \u0647\u0645\u0647 \u0641\u06cc\u0644\u062f\u0647\u0627 \u0645\u0642\u062f\u0627\u0631 \u06af\u0631\u0641\u062a\u0646\u062f \u062f\u06a9\u0645\u0647 \u0645\u0631\u0628\u0648\u0637\u0647 \u0631\u0627 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646\r\n        if (window.inputValues.every(val => val !== "")) {\r\n            var parentElement = document.getElementById(\'codeButten\');\r\n            var firstChild = parentElement ? parentElement.children[0] : null; // \u0627\u0646\u062a\u062e\u0627\u0628 \u0627\u0648\u0644\u06cc\u0646 \u0641\u0631\u0632\u0646\u062f\r\n              if (firstChild) {\r\n                  firstChild.style.color = "red"; // \u062a\u063a\u06cc\u06cc\u0631 \u0631\u0646\u06af \u0645\u062a\u0646 \u0628\u0647 \u0642\u0631\u0645\u0632\r\n                  firstChild.click(); // \u0627\u062c\u0631\u0627\u06cc \u06a9\u0644\u06cc\u06a9 \u0631\u0648\u06cc \u0627\u0648\u0644\u06cc\u0646 \u0641\u0631\u0632\u0646\u062f\r\n              }                  \r\n        }\r\n    }\r\n\r\n    function moveToPrev(event, prevFieldId) {\r\n        // \u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u0641\u06cc\u0644\u062f \u0642\u0628\u0644\u06cc \u062f\u0631 \u0635\u0648\u0631\u062a \u062e\u0627\u0644\u06cc \u0628\u0648\u062f\u0646 \u0648 \u0641\u0634\u0627\u0631 Backspace\r\n        if (event.key === "Backspace" && !event.target.value) {\r\n            document.getElementById(prevFieldId).focus();\r\n        }\r\n    }\r\n</script>\r\n'
                    }
                  />
                </div>
                {(() => {
                  try {
                    return $state.time != 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ogvCb)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6Mor2
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.time;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oyGuB
                      )}
                    >
                      {
                        "\u062a\u0627 \u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f \u06a9\u062f \u0645\u0627\u0646\u062f\u0647 \u0627\u0633\u062a"
                      }
                    </div>
                    <Timer
                      data-plasmic-name={"timer"}
                      data-plasmic-override={overrides.timer}
                      className={classNames("__wab_instance", sty.timer)}
                      intervalSeconds={1}
                      isRunning={true}
                      onTick={async () => {
                        const $steps = {};

                        $steps["updateTime"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["time"]
                                },
                                operation: 0,
                                value: $state.time--
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTime"] != null &&
                          typeof $steps["updateTime"] === "object" &&
                          typeof $steps["updateTime"].then === "function"
                        ) {
                          $steps["updateTime"] = await $steps["updateTime"];
                        }
                      }}
                      runWhileEditing={false}
                    />
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.time == 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cf3KY)}
                  >
                    <Button
                      data-plasmic-name={"button11"}
                      data-plasmic-override={overrides.button11}
                      className={classNames("__wab_instance", sty.button11)}
                      color={generateStateValueProp($state, [
                        "button11",
                        "color"
                      ])}
                      endIcon={
                        <Icon115Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___3Fjcf
                          )}
                          role={"img"}
                        />
                      }
                      isDisabled={(() => {
                        try {
                          return (
                            !(
                              $state.antdInput.value.length === 10 ||
                              $state.antdInput.value.length === 11
                            ) || $state.loadedbtn
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      loading={(() => {
                        try {
                          return $state.loadedbtn;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoadedbtn"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadedbtn"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadedbtn"] != null &&
                          typeof $steps["updateLoadedbtn"] === "object" &&
                          typeof $steps["updateLoadedbtn"].then === "function"
                        ) {
                          $steps["updateLoadedbtn"] = await $steps[
                            "updateLoadedbtn"
                          ];
                        }

                        $steps["updateMobile"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["mobile"]
                                },
                                operation: 0,
                                value: $state.antdInput.value.startsWith("0")
                                  ? $state.antdInput.value
                                  : "0" + $state.antdInput.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateMobile"] != null &&
                          typeof $steps["updateMobile"] === "object" &&
                          typeof $steps["updateMobile"].then === "function"
                        ) {
                          $steps["updateMobile"] = await $steps["updateMobile"];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://api.liom.app/rest/user/setMobileSendCode",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        data: $state.mobile,
                                        smsType: "sms"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  (() => {
                                    try {
                                      return {
                                        headers: {
                                          Authorization:
                                            "Bearer " + $props.token
                                        }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["updateCode"] =
                          $steps.invokeGlobalAction?.data?.success == true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["code"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateCode"] != null &&
                          typeof $steps["updateCode"] === "object" &&
                          typeof $steps["updateCode"].then === "function"
                        ) {
                          $steps["updateCode"] = await $steps["updateCode"];
                        }

                        $steps["updateTime"] =
                          $steps.invokeGlobalAction?.data?.success == true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["time"]
                                  },
                                  operation: 0,
                                  value: 60
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateTime"] != null &&
                          typeof $steps["updateTime"] === "object" &&
                          typeof $steps["updateTime"].then === "function"
                        ) {
                          $steps["updateTime"] = await $steps["updateTime"];
                        }

                        $steps["updateLoadedbtn2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadedbtn"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadedbtn2"] != null &&
                          typeof $steps["updateLoadedbtn2"] === "object" &&
                          typeof $steps["updateLoadedbtn2"].then === "function"
                        ) {
                          $steps["updateLoadedbtn2"] = await $steps[
                            "updateLoadedbtn2"
                          ];
                        }
                      }}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button11",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      size={"minimal"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zyndu
                        )}
                      >
                        {
                          "\u062f\u0631\u06cc\u0627\u0641\u062a \u0645\u062c\u062f\u062f \u06a9\u062f"
                        }
                      </div>
                    </Button>
                  </div>
                ) : null}
              </div>
              <section
                className={classNames(projectcss.all, sty.section___3Xn7C)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__yQKsa)}
                  id={"codeButten"}
                >
                  <Button
                    data-plasmic-name={"button10"}
                    data-plasmic-override={overrides.button10}
                    className={classNames("__wab_instance", sty.button10)}
                    color={generateStateValueProp($state, [
                      "button10",
                      "color"
                    ])}
                    endIcon={
                      <Icon115Icon
                        className={classNames(projectcss.all, sty.svg__goTpn)}
                        role={"img"}
                      />
                    }
                    isDisabled={(() => {
                      try {
                        return $state.loadedbtn;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    loading={(() => {
                      try {
                        return $state.loadedbtn;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadedbtn"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn"] != null &&
                        typeof $steps["updateLoadedbtn"] === "object" &&
                        typeof $steps["updateLoadedbtn"].then === "function"
                      ) {
                        $steps["updateLoadedbtn"] = await $steps[
                          "updateLoadedbtn"
                        ];
                      }

                      $steps["updateCodeNumber"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["codeNumber"]
                              },
                              operation: 0,
                              value: parseInt(window.inputValues.join(""))
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCodeNumber"] != null &&
                        typeof $steps["updateCodeNumber"] === "object" &&
                        typeof $steps["updateCodeNumber"].then === "function"
                      ) {
                        $steps["updateCodeNumber"] = await $steps[
                          "updateCodeNumber"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://api.liom.app/rest/user/setMobileValidate",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      data: $state.mobile,
                                      gateway: "calender",
                                      type: "mobile",
                                      code: $state.codeNumber
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        Authorization: "Bearer " + $props.token
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateLoadedbtn2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadedbtn"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadedbtn2"] != null &&
                        typeof $steps["updateLoadedbtn2"] === "object" &&
                        typeof $steps["updateLoadedbtn2"].then === "function"
                      ) {
                        $steps["updateLoadedbtn2"] = await $steps[
                          "updateLoadedbtn2"
                        ];
                      }

                      $steps["invokeGlobalAction2"] =
                        $steps.invokeGlobalAction4?.data?.success === false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u06a9\u062f \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0635\u062d\u06cc\u062d \u0646\u06cc\u0633\u062a."
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["updateDialogOpendialog"] =
                        $steps.invokeGlobalAction?.data?.success === true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog", "opendialog"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateDialogOpendialog"] != null &&
                        typeof $steps["updateDialogOpendialog"] === "object" &&
                        typeof $steps["updateDialogOpendialog"].then ===
                          "function"
                      ) {
                        $steps["updateDialogOpendialog"] = await $steps[
                          "updateDialogOpendialog"
                        ];
                      }

                      $steps["invokeGlobalAction3"] =
                        $steps.invokeGlobalAction?.data?.success === true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u0634\u0645\u0627\u0631\u0647 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f."
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }

                      $steps["runCode"] =
                        $steps.invokeGlobalAction?.data?.success === true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    return window.location.reload();
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button10",
                          "color"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qgDvm
                      )}
                    >
                      {
                        "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u062f\u0627\u0645\u0647"
                      }
                    </div>
                  </Button>
                </div>
              </section>
            </div>
          </Reveal>
        ) : null}
      </Dialog3>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "dialog",
    "reveal",
    "textInput",
    "antdInput",
    "button9",
    "mobileCode",
    "textInput3",
    "antdInput4",
    "embedHtml",
    "timer",
    "button11",
    "button10"
  ],
  dialog: [
    "dialog",
    "reveal",
    "textInput",
    "antdInput",
    "button9",
    "mobileCode",
    "textInput3",
    "antdInput4",
    "embedHtml",
    "timer",
    "button11",
    "button10"
  ],
  reveal: ["reveal", "textInput", "antdInput", "button9"],
  textInput: ["textInput", "antdInput"],
  antdInput: ["antdInput"],
  button9: ["button9"],
  mobileCode: [
    "mobileCode",
    "textInput3",
    "antdInput4",
    "embedHtml",
    "timer",
    "button11",
    "button10"
  ],
  textInput3: ["textInput3", "antdInput4"],
  antdInput4: ["antdInput4"],
  embedHtml: ["embedHtml"],
  timer: ["timer"],
  button11: ["button11"],
  button10: ["button10"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dialog: typeof Dialog3;
  reveal: typeof Reveal;
  textInput: typeof TextInput;
  antdInput: typeof Input;
  button9: typeof Button;
  mobileCode: typeof Reveal;
  textInput3: typeof TextInput;
  antdInput4: typeof Input;
  embedHtml: typeof Embed;
  timer: typeof Timer;
  button11: typeof Button;
  button10: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMobileDialog__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMobileDialog__VariantsArgs;
    args?: PlasmicMobileDialog__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMobileDialog__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMobileDialog__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMobileDialog__ArgProps,
          internalVariantPropNames: PlasmicMobileDialog__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMobileDialog__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMobileDialog";
  } else {
    func.displayName = `PlasmicMobileDialog.${nodeName}`;
  }
  return func;
}

export const PlasmicMobileDialog = Object.assign(
  // Top-level PlasmicMobileDialog renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dialog: makeNodeComponent("dialog"),
    reveal: makeNodeComponent("reveal"),
    textInput: makeNodeComponent("textInput"),
    antdInput: makeNodeComponent("antdInput"),
    button9: makeNodeComponent("button9"),
    mobileCode: makeNodeComponent("mobileCode"),
    textInput3: makeNodeComponent("textInput3"),
    antdInput4: makeNodeComponent("antdInput4"),
    embedHtml: makeNodeComponent("embedHtml"),
    timer: makeNodeComponent("timer"),
    button11: makeNodeComponent("button11"),
    button10: makeNodeComponent("button10"),

    // Metadata about props expected for PlasmicMobileDialog
    internalVariantProps: PlasmicMobileDialog__VariantProps,
    internalArgProps: PlasmicMobileDialog__ArgProps
  }
);

export default PlasmicMobileDialog;
/* prettier-ignore-end */
