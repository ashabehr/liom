/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: esrmcWMeqrsz

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import MenuIcon from "../../MenuIcon"; // plasmic-import: JBF-V8Q5mpWl/component
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import ReminderShop from "../../ReminderShop"; // plasmic-import: 3q6J_8ClWpvX/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Tariff2 from "../../Tariff2"; // plasmic-import: xZTBh-jwY-OV/component
import Report from "../../../src/pages/report"; // plasmic-import: 4wEldhsM09tv/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicMojodi.module.css"; // plasmic-import: esrmcWMeqrsz/css

import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon364Icon from "./icons/PlasmicIcon__Icon364"; // plasmic-import: 8Oju6Tf9Jd65/icon
import Icon365Icon from "./icons/PlasmicIcon__Icon365"; // plasmic-import: CQv_uXPCughx/icon
import Icon358Icon from "./icons/PlasmicIcon__Icon358"; // plasmic-import: NYKoHXeHd50r/icon
import Icon366Icon from "./icons/PlasmicIcon__Icon366"; // plasmic-import: VnKEMM0pySS5/icon
import Icon143Icon from "./icons/PlasmicIcon__Icon143"; // plasmic-import: 0Mqc9-aoNYUO/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: Wm-tjDMQJVfn/icon
import Icon144Icon from "./icons/PlasmicIcon__Icon144"; // plasmic-import: 1DQk0pCQHybZ/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon367Icon from "./icons/PlasmicIcon__Icon367"; // plasmic-import: 9EVbJgSegdgi/icon
import Icon290Icon from "./icons/PlasmicIcon__Icon290"; // plasmic-import: jLdE-DKzPlst/icon
import Icon291Icon from "./icons/PlasmicIcon__Icon291"; // plasmic-import: U9F0Jow4owN9/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon

createPlasmicElementProxy;

export type PlasmicMojodi__VariantMembers = {
  full2: "full2";
  page: "tariff" | "report";
};
export type PlasmicMojodi__VariantsArgs = {
  full2?: SingleBooleanChoiceArg<"full2">;
  page?: SingleChoiceArg<"tariff" | "report">;
};
type VariantPropType = keyof PlasmicMojodi__VariantsArgs;
export const PlasmicMojodi__VariantProps = new Array<VariantPropType>(
  "full2",
  "page"
);

export type PlasmicMojodi__ArgsType = {};
type ArgPropType = keyof PlasmicMojodi__ArgsType;
export const PlasmicMojodi__ArgProps = new Array<ArgPropType>();

export type PlasmicMojodi__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  history?: Flex__<typeof ApiRequest>;
  button?: Flex__<typeof Button>;
  button2?: Flex__<typeof Button>;
  menuIcon?: Flex__<typeof MenuIcon>;
  headerLiom?: Flex__<typeof HeaderLiom>;
  reminderShop?: Flex__<typeof ReminderShop>;
  tariff2?: Flex__<typeof Tariff2>;
  report?: Flex__<typeof Report>;
};

export interface DefaultMojodiProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMojodi__RenderFunc(props: {
  variants: PlasmicMojodi__VariantsArgs;
  args: PlasmicMojodi__ArgsType;
  overrides: PlasmicMojodi__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "history.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "history.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "history.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "full",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "full2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.full;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.full2
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ["line", "white"]
      },
      {
        path: "button2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button2.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "page",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.params.home;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.page
      },
      {
        path: "reminderShop.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEiLCJ0eXBlIjoidXNlciIsImlhdCI6MTc2MTc0MDUyNn0.zABSPblXM-e17_bHDdw-0Hl7LiivKgbA_d8BI2nCqyQ"
      },
      {
        path: "report.active",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.params.home == "report";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "tariff2.active",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.params.home == "tariff";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames,
          sty.root,
          {
            [sty.rootfull2]: hasVariant($state, "full2", "full2"),
            [sty.rootpage_report]: hasVariant($state, "page", "report"),
            [sty.rootpage_tariff]: hasVariant($state, "page", "tariff")
          }
        )}
      >
        <SideEffect
          data-plasmic-name={"sideEffect"}
          data-plasmic-override={overrides.sideEffect}
          className={classNames("__wab_instance", sty.sideEffect, {
            [sty.sideEffectpage_tariff]: hasVariant($state, "page", "tariff")
          })}
          onMount={async () => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        var getCookie = name => {
                          const cookies = document.cookie.split("; ");
                          for (let cookie of cookies) {
                            const [key, value] = cookie.split("=");
                            if (key === name) return JSON.parse(value)[0];
                          }
                          return "";
                        };
                        return ($state.token = getCookie("token"));
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox__eUsCf, {
            [sty.freeBoxfull2__eUsCfIXwbM]: hasVariant(
              $state,
              "full2",
              "full2"
            ),
            [sty.freeBoxpage_report__eUsCftxlqB]: hasVariant(
              $state,
              "page",
              "report"
            ),
            [sty.freeBoxpage_tariff__eUsCfwNoaK]: hasVariant(
              $state,
              "page",
              "tariff"
            )
          })}
        >
          <ApiRequest
            data-plasmic-name={"history"}
            data-plasmic-override={overrides.history}
            className={classNames("__wab_instance", sty.history, {
              [sty.historyfull2]: hasVariant($state, "full2", "full2"),
              [sty.historypage_tariff]: hasVariant($state, "page", "tariff")
            })}
            config={(() => {
              try {
                return {
                  headers: {
                    authorization: $state.token
                  }
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            errorDisplay={
              <div className={classNames(projectcss.all, sty.freeBox__z5V5X)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___8Ba4Q)}
                >
                  <Icon143Icon
                    className={classNames(projectcss.all, sty.svg___6Nw44)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iKelK
                    )}
                  >
                    {
                      "\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                    }
                  </div>
                </div>
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={generateStateValueProp($state, ["button", "color"])}
                  endIcon={
                    <Icon144Icon
                      className={classNames(projectcss.all, sty.svg__riJfH)}
                      role={"img"}
                    />
                  }
                  load={generateStateValueProp($state, ["button", "load"])}
                  loading={generateStateValueProp($state, [
                    "button",
                    "loading"
                  ])}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button", "load"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadingChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button", "loading"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  shape={"rounded"}
                  showEndIcon={true}
                  startIcon={
                    <ChevronRightIcon
                      className={classNames(projectcss.all, sty.svg__s3CdR)}
                      role={"img"}
                    />
                  }
                />
              </div>
            }
            loadingDisplay={
              <React.Fragment>
                <div
                  className={classNames(projectcss.all, sty.freeBox___916Te, {
                    [sty.freeBoxfull2___916TeIXwbM]: hasVariant(
                      $state,
                      "full2",
                      "full2"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sbghq)}
                  >
                    <Icon115Icon
                      className={classNames(projectcss.all, sty.svg__gsp29)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ldpl9,
                      {
                        [sty.textfull2__ldpl9IXwbM]: hasVariant(
                          $state,
                          "full2",
                          "full2"
                        )
                      }
                    )}
                  >
                    {"\u0627\u0639\u062a\u0628\u0627\u0631 \u0634\u0645\u0627"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__j75Ls)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__phNiN)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wyXzD
                        )}
                      >
                        <Icon364Icon
                          className={classNames(projectcss.all, sty.svg__gsoeL)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__shrUf
                        )}
                      >
                        {"\u0634\u0627\u0631\u0698 \u062d\u0633\u0627\u0628"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__uWSpn)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__eZf41
                        )}
                      >
                        <Icon365Icon
                          className={classNames(projectcss.all, sty.svg__ktA4D)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gr8Gv
                        )}
                      >
                        {"\u067e\u06cc\u0634\u200c\u0628\u06cc\u0646\u06cc "}
                      </div>
                    </div>
                  </div>
                  <Icon358Icon
                    className={classNames(projectcss.all, sty.svg___3ECBe)}
                    role={"img"}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__xeSqh)}
                  >
                    <Icon366Icon
                      className={classNames(projectcss.all, sty.svg__c864W)}
                      role={"img"}
                    />
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___20000, {
                    [sty.freeBoxfull2___20000IXwbM]: hasVariant(
                      $state,
                      "full2",
                      "full2"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__corSz, {
                      [sty.freeBoxfull2__corSzIXwbM]: hasVariant(
                        $state,
                        "full2",
                        "full2"
                      )
                    })}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return [1, 2, 3, 4, 5, 6];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bcFud,
                            {
                              [sty.freeBoxfull2__bcFudIXwbM]: hasVariant(
                                $state,
                                "full2",
                                "full2"
                              )
                            }
                          )}
                          key={currentIndex}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__up0VK,
                              "shimmer"
                            )}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ajPib,
                              "shimmer",
                              {
                                [sty.freeBoxfull2__ajPibIXwbM]: hasVariant(
                                  $state,
                                  "full2",
                                  "full2"
                                )
                              }
                            )}
                          />
                        </div>
                      );
                    })}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yJQqX, {
                      [sty.freeBoxfull2__yJQqXiXwbM]: hasVariant(
                        $state,
                        "full2",
                        "full2"
                      )
                    })}
                  />
                </div>
              </React.Fragment>
            }
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["history", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["history", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["history", "data"]).apply(
                null,
                eventArgs
              );
            }}
            shouldFetch={(() => {
              try {
                return $state.token != "";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/walletHistory"}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__ibhO4, {
                [sty.freeBoxfull2__ibhO4IXwbM]: hasVariant(
                  $state,
                  "full2",
                  "full2"
                )
              })}
            >
              <Button
                data-plasmic-name={"button2"}
                data-plasmic-override={overrides.button2}
                className={classNames("__wab_instance", sty.button2)}
                color={generateStateValueProp($state, ["button2", "color"])}
                endIcon={
                  <Icon367Icon
                    className={classNames(projectcss.all, sty.svg___8Ruo8)}
                    role={"img"}
                  />
                }
                load={generateStateValueProp($state, ["button2", "load"])}
                loading={generateStateValueProp($state, ["button2", "loading"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToMojodi"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/mojod/${"tariff"}`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToMojodi"] != null &&
                    typeof $steps["goToMojodi"] === "object" &&
                    typeof $steps["goToMojodi"].then === "function"
                  ) {
                    $steps["goToMojodi"] = await $steps["goToMojodi"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button2", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button2", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadingChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button2", "loading"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                shape={"rounded"}
                showEndIcon={true}
                size={"compact"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__h9Cu0
                  )}
                >
                  {
                    "\u062a\u0639\u0631\u0641\u0647 \u0627\u0631\u0633\u0627\u0644"
                  }
                </div>
              </Button>
              <div className={classNames(projectcss.all, sty.freeBox__nOtqh)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vftRm,
                    "swiper-ltr",
                    {
                      [sty.textfull2__vftRmiXwbM]: hasVariant(
                        $state,
                        "full2",
                        "full2"
                      )
                    }
                  )}
                  style={(() => {
                    try {
                      return {
                        color: $state.history.data.balance < 0 ? "#ff4d6d" : ""
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          $state.history.data.balance.toLocaleString() +
                          " تومان "
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__j9W2A,
                  {
                    [sty.textfull2__j9W2AIXwbM]: hasVariant(
                      $state,
                      "full2",
                      "full2"
                    )
                  }
                )}
              >
                {"\u0627\u0639\u062a\u0628\u0627\u0631 \u0634\u0645\u0627"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___1ZVcl)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__nZ7YP)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return ($state.reminderShop.opendialog = true);
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zbaKg)}
                  >
                    <Icon364Icon
                      className={classNames(projectcss.all, sty.svg__o5LF4)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wSHkG
                    )}
                  >
                    {"\u0634\u0627\u0631\u0698 \u062d\u0633\u0627\u0628"}
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__ok9S, {
                    [sty.freeBoxpage_report__ok9STxlqB]: hasVariant(
                      $state,
                      "page",
                      "report"
                    )
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToMojodi"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: `/mojod/${"report"}`
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToMojodi"] != null &&
                      typeof $steps["goToMojodi"] === "object" &&
                      typeof $steps["goToMojodi"].then === "function"
                    ) {
                      $steps["goToMojodi"] = await $steps["goToMojodi"];
                    }
                  }}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cpsHd)}
                  >
                    <Icon365Icon
                      className={classNames(projectcss.all, sty.svg__e8CQc, {
                        [sty.svgfull2__e8CQcIXwbM]: hasVariant(
                          $state,
                          "full2",
                          "full2"
                        ),
                        [sty.svgpage_tariff__e8CQcwNoaK]: hasVariant(
                          $state,
                          "page",
                          "tariff"
                        )
                      })}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yMlJ7
                    )}
                  >
                    {"\u067e\u06cc\u0634\u200c\u0628\u06cc\u0646\u06cc "}
                  </div>
                </div>
              </div>
              <Icon358Icon
                className={classNames(projectcss.all, sty.svg__bGIek)}
                role={"img"}
              />

              <div className={classNames(projectcss.all, sty.freeBox__mDtp)}>
                <Icon366Icon
                  className={classNames(projectcss.all, sty.svg__nf6Aw)}
                  role={"img"}
                />
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox___8JsV3,
                hasVariant($state, "full2", "full2") ? "fade-in" : undefined,
                {
                  [sty.freeBoxfull2___8JsV3IXwbM]: hasVariant(
                    $state,
                    "full2",
                    "full2"
                  )
                }
              )}
              onScroll={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            var scrollTop = event.currentTarget.scrollTop;
                            var chatBox = event.currentTarget;
                            window.chatBox = chatBox;
                            if (scrollTop > 50) {
                              return ($state.full = true);
                            } else if (scrollTop <= 0) {
                              return ($state.full = false);
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return (() => {
                      const data = $state.history.data.list;
                      const groupedArray = Object.values(
                        data.reduce((acc, item) => {
                          const date = item.timestamp.split(" ")[0];
                          if (!acc[date])
                            acc[date] = {
                              date,
                              items: []
                            };
                          acc[date].items.push(item);
                          return acc;
                        }, {})
                      ).sort((a, b) => new Date(b.date) - new Date(a.date));
                      return groupedArray;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sas6P, {
                      [sty.freeBoxfull2__sas6PiXwbM]: hasVariant(
                        $state,
                        "full2",
                        "full2"
                      )
                    })}
                    key={currentIndex}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___47Dj4,
                        {
                          [sty.freeBoxfull2___47Dj4IXwbM]: hasVariant(
                            $state,
                            "full2",
                            "full2"
                          )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vTitB,
                          {
                            [sty.textfull2__vTitBiXwbM]: hasVariant(
                              $state,
                              "full2",
                              "full2"
                            )
                          }
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                const date = new Date(currentItem.date);
                                const options = {
                                  month: "long",
                                  year: "numeric",
                                  day: "numeric",
                                  timeZone: "Asia/Tehran",
                                  calendar: "persian"
                                };
                                const persianDate = date.toLocaleString(
                                  "fa-IR-u-ca-persian",
                                  options
                                );
                                return persianDate;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return currentItem.items;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_1, __plasmic_idx_1) => {
                      const currentItem = __plasmic_item_1;
                      const currentIndex = __plasmic_idx_1;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__fnZO,
                            {
                              [sty.freeBoxfull2__fnZOIXwbM]: hasVariant(
                                $state,
                                "full2",
                                "full2"
                              )
                            }
                          )}
                          key={currentIndex}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qhhWh
                            )}
                          >
                            <MenuIcon
                              data-plasmic-name={"menuIcon"}
                              data-plasmic-override={overrides.menuIcon}
                              className={classNames(
                                "__wab_instance",
                                sty.menuIcon
                              )}
                              icons={(() => {
                                try {
                                  return (() => {
                                    let source = "";
                                    if (
                                      currentItem.origin.includes(
                                        "Notification"
                                      )
                                    ) {
                                      return (source = "notification");
                                    } else if (
                                      currentItem.origin.includes("Telegram")
                                    ) {
                                      return (source = "telegram");
                                    } else if (
                                      currentItem.origin.includes("Sms")
                                    ) {
                                      return (source = "sms");
                                    } else {
                                      return (source = "unknown");
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()}
                              outline={true}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lmeU1,
                              {
                                [sty.freeBoxfull2__lmeU1IXwbM]: hasVariant(
                                  $state,
                                  "full2",
                                  "full2"
                                )
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__bfGsA,
                                {
                                  [sty.freeBoxfull2__bfGsAiXwbM]: hasVariant(
                                    $state,
                                    "full2",
                                    "full2"
                                  )
                                }
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__otxJz
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return `${currentItem.name}`;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u062a\u0633\u062a adhd";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__i1ADb,
                                  "swiper-ltr",
                                  {
                                    [sty.textfull2__i1ADbiXwbM]: hasVariant(
                                      $state,
                                      "full2",
                                      "full2"
                                    )
                                  }
                                )}
                              >
                                <div
                                  className={projectcss.__wab_expr_html_text}
                                  dangerouslySetInnerHTML={{
                                    __html: (() => {
                                      try {
                                        return `${
                                          currentItem.val === 0
                                            ? '<span class="swiper-ltr" style="background-color:rgba(34,197,94,0.2); padding:2px 6px; border-radius:6px; font-weight:bold;">رایگان</span>'
                                            : currentItem.val < 0
                                              ? '<span class="swiper-ltr" style="background-color:rgba(239,68,68,0.2); padding:2px 6px; border-radius:6px; font-weight:bold;">' +
                                                currentItem.val.toLocaleString() +
                                                " تومان</span>"
                                              : '<span class="swiper-ltr">' +
                                                currentItem.val.toLocaleString() +
                                                " تومان</span>"
                                        }`;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "2865so \u062a\u0648\u0645\u0646";
                                        }
                                        throw e;
                                      }
                                    })()
                                  }}
                                />
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__gRdwO
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__hgU8Y
                                )}
                              >
                                <Icon290Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__laFc
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__cIqm1,
                                    {
                                      [sty.textfull2__cIqm1IXwbM]: hasVariant(
                                        $state,
                                        "full2",
                                        "full2"
                                      )
                                    }
                                  )}
                                  style={(() => {
                                    try {
                                      return { direction: "ltr" };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (() => {
                                          const date = new Date(
                                            currentItem.timestamp
                                          );
                                          const options = {
                                            weekday: "long",
                                            month: "long",
                                            day: "numeric",
                                            timeZone: "Asia/Tehran",
                                            calendar: "persian"
                                          };
                                          const persianDate =
                                            date.toLocaleString(
                                              "fa-IR-u-ca-persian",
                                              options
                                            );
                                          return persianDate;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u067e\u0646\u062c \u0634\u0646\u0628\u0647 \u0641\u0644\u0627\u0646";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__hKBw2
                                )}
                              >
                                <Icon291Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__izIJh
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__z6KsZ,
                                    {
                                      [sty.textfull2__z6KsZiXwbM]: hasVariant(
                                        $state,
                                        "full2",
                                        "full2"
                                      )
                                    }
                                  )}
                                  style={(() => {
                                    try {
                                      return { direction: "ltr" };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (() => {
                                          const date = new Date(
                                            currentItem.timestamp
                                          );
                                          const options = {
                                            hour: "2-digit",
                                            minute: "2-digit",
                                            hour12: false,
                                            timeZone: "Asia/Tehran",
                                            calendar: "persian"
                                          };
                                          const persianDate =
                                            date.toLocaleString(
                                              "fa-IR-u-ca-persian",
                                              options
                                            );
                                          return persianDate;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u067e\u0646\u062c \u0634\u0646\u0628\u0647 \u0641\u0644\u0627\u0646";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                );
              })}
              <div
                className={classNames(projectcss.all, sty.freeBox__uEw17, {
                  [sty.freeBoxfull2__uEw17IXwbM]: hasVariant(
                    $state,
                    "full2",
                    "full2"
                  )
                })}
              />
            </div>
          </ApiRequest>
        </div>
        <HeaderLiom
          data-plasmic-name={"headerLiom"}
          data-plasmic-override={overrides.headerLiom}
          className={classNames("__wab_instance", sty.headerLiom, {
            [sty.headerLiompage_report]: hasVariant($state, "page", "report"),
            [sty.headerLiompage_tariff]: hasVariant($state, "page", "tariff")
          })}
          slot={null}
        >
          <div className={classNames(projectcss.all, sty.freeBox__yUzVo)}>
            <XIcon
              className={classNames(projectcss.all, sty.svg___2VehZ)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.history.back();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bGjB
              )}
            >
              {
                "\u0627\u0639\u062a\u0628\u0627\u0631 \u06cc\u0627\u062f \u0622\u0648\u0631\u06cc \u0647\u0627"
              }
            </div>
          </div>
        </HeaderLiom>
        <ReminderShop
          data-plasmic-name={"reminderShop"}
          data-plasmic-override={overrides.reminderShop}
          className={classNames("__wab_instance", sty.reminderShop)}
          onOpendialogChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "reminderShop",
              "opendialog"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          opendialog={generateStateValueProp($state, [
            "reminderShop",
            "opendialog"
          ])}
        />

        <Reveal
          className={classNames("__wab_instance", sty.reveal__ef9Vr, {
            [sty.revealpage_tariff__ef9VRwNoaK]: hasVariant(
              $state,
              "page",
              "tariff"
            )
          })}
          triggerOnce={true}
        >
          {(() => {
            const child$Props = {
              active: generateStateValueProp($state, ["tariff2", "active"]),
              className: classNames("__wab_instance", sty.tariff2, {
                [sty.tariff2page_report]: hasVariant($state, "page", "report"),
                [sty.tariff2page_tariff]: hasVariant($state, "page", "tariff")
              }),
              onActiveChange: async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["tariff2", "active"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              },
              token: (() => {
                try {
                  return $state.token;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            };

            initializePlasmicStates(
              $state,
              [
                {
                  name: "tariff2.active",
                  initFunc: ({ $props, $state, $queries }) =>
                    (() => {
                      try {
                        return $ctx.params.home == "tariff";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()
                }
              ],
              []
            );
            return (
              <Tariff2
                data-plasmic-name={"tariff2"}
                data-plasmic-override={overrides.tariff2}
                {...child$Props}
              />
            );
          })()}
        </Reveal>
        <Reveal
          className={classNames("__wab_instance", sty.reveal__kUpWd, {
            [sty.revealpage_report__kUpWDtxlqB]: hasVariant(
              $state,
              "page",
              "report"
            ),
            [sty.revealpage_tariff__kUpWDwNoaK]: hasVariant(
              $state,
              "page",
              "tariff"
            )
          })}
          triggerOnce={true}
        >
          {(() => {
            const child$Props = {
              active: generateStateValueProp($state, ["report", "active"]),
              className: classNames("__wab_instance", sty.report, {
                [sty.reportpage_report]: hasVariant($state, "page", "report"),
                [sty.reportpage_tariff]: hasVariant($state, "page", "tariff")
              }),
              onActiveChange: async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["report", "active"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              },
              token2: (() => {
                try {
                  return $state.token;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            };

            initializePlasmicStates(
              $state,
              [
                {
                  name: "report.active",
                  initFunc: ({ $props, $state, $queries }) =>
                    (() => {
                      try {
                        return $ctx.params.home == "report";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()
                }
              ],
              []
            );
            return (
              <Report
                data-plasmic-name={"report"}
                data-plasmic-override={overrides.report}
                {...child$Props}
              />
            );
          })()}
        </Reveal>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "history",
    "button",
    "button2",
    "menuIcon",
    "headerLiom",
    "reminderShop",
    "tariff2",
    "report"
  ],
  sideEffect: ["sideEffect"],
  history: ["history", "button", "button2", "menuIcon"],
  button: ["button"],
  button2: ["button2"],
  menuIcon: ["menuIcon"],
  headerLiom: ["headerLiom"],
  reminderShop: ["reminderShop"],
  tariff2: ["tariff2"],
  report: ["report"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  history: typeof ApiRequest;
  button: typeof Button;
  button2: typeof Button;
  menuIcon: typeof MenuIcon;
  headerLiom: typeof HeaderLiom;
  reminderShop: typeof ReminderShop;
  tariff2: typeof Tariff2;
  report: typeof Report;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMojodi__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMojodi__VariantsArgs;
    args?: PlasmicMojodi__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicMojodi__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicMojodi__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMojodi__ArgProps,
          internalVariantPropNames: PlasmicMojodi__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMojodi__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMojodi";
  } else {
    func.displayName = `PlasmicMojodi.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicMojodi = Object.assign(
  // Top-level PlasmicMojodi renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    history: makeNodeComponent("history"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    menuIcon: makeNodeComponent("menuIcon"),
    headerLiom: makeNodeComponent("headerLiom"),
    reminderShop: makeNodeComponent("reminderShop"),
    tariff2: makeNodeComponent("tariff2"),
    report: makeNodeComponent("report"),

    // Metadata about props expected for PlasmicMojodi
    internalVariantProps: PlasmicMojodi__VariantProps,
    internalArgProps: PlasmicMojodi__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMojodi;
/* prettier-ignore-end */
