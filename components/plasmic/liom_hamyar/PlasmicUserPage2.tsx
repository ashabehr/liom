/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 3UGIP49FNSVo

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import DataUser from "../../DataUser"; // plasmic-import: FUDO69vr4clr/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicUserPage2.module.css"; // plasmic-import: 3UGIP49FNSVo/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import LetterOpenedSvgrepoComSvgIcon from "./icons/PlasmicIcon__LetterOpenedSvgrepoComSvg"; // plasmic-import: Up_IU2WZLnua/icon
import Icons8NotificationSvgIcon from "./icons/PlasmicIcon__Icons8NotificationSvg"; // plasmic-import: uQSfUo_9mVxb/icon
import Icon47Icon from "./icons/PlasmicIcon__Icon47"; // plasmic-import: 4mROOlMjOzhC/icon
import Line3Icon from "./icons/PlasmicIcon__Line3"; // plasmic-import: cDBsZfQFOOWa/icon

createPlasmicElementProxy;

export type PlasmicUserPage2__VariantMembers = {};
export type PlasmicUserPage2__VariantsArgs = {};
type VariantPropType = keyof PlasmicUserPage2__VariantsArgs;
export const PlasmicUserPage2__VariantProps = new Array<VariantPropType>();

export type PlasmicUserPage2__ArgsType = {
  header?: any;
  data?: any;
  onBack?: (event: any) => void;
  loading?: boolean;
  onClick?: (event: any) => void;
  onUserdataChange?: (val: string) => void;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicUserPage2__ArgsType;
export const PlasmicUserPage2__ArgProps = new Array<ArgPropType>(
  "header",
  "data",
  "onBack",
  "loading",
  "onClick",
  "onUserdataChange",
  "children"
);

export type PlasmicUserPage2__OverridesType = {
  frame49?: Flex__<"div">;
  frame25?: Flex__<"div">;
  frame48?: Flex__<"div">;
  dataUser?: Flex__<typeof DataUser>;
};

export interface DefaultUserPage2Props {
  header?: any;
  data?: any;
  onBack?: (event: any) => void;
  loading?: boolean;
  onClick?: (event: any) => void;
  onUserdataChange?: (val: string) => void;
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUserPage2__RenderFunc(props: {
  variants: PlasmicUserPage2__VariantsArgs;
  args: PlasmicUserPage2__ArgsType;
  overrides: PlasmicUserPage2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          header: [
            { field: "id", label_fa: "#", width: 80, type: "number" },
            {
              field: "username",
              label_fa:
                "\u0646\u0627\u0645 \u06a9\u0627\u0631\u0628\u0631\u06cc",
              width: 150,
              type: "text"
            },
            {
              field: "mobile",
              label_fa:
                "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644",
              width: 170,
              type: "text"
            },
            {
              field: "refcode",
              label_fa: "\u06a9\u062f \u0645\u0639\u0631\u0641",
              width: 100,
              type: "text"
            },
            {
              field: "activeTel",
              label_fa:
                "\u062a\u0644\u06af\u0631\u0627\u0645 \u0641\u0639\u0627\u0644",
              width: 90,
              type: "bool"
            },
            {
              field: "countBuyHusbandSms",
              label_fa:
                "\u062a\u0639\u062f\u0627\u062f \u062e\u0631\u06cc\u062f \u0647\u0645\u06cc\u0627\u0631 \u0622\u0642\u0627",
              width: 120,
              type: "number"
            },
            {
              field: "countBuySelfSms",
              label_fa:
                "\u062a\u0639\u062f\u0627\u062f \u062e\u0631\u06cc\u062f \u0647\u0645\u06cc\u0627\u0631 \u062e\u0648\u062f",
              width: 120,
              type: "number"
            },
            {
              field: "lastActivity",
              label_fa:
                "\u0622\u062e\u0631\u06cc\u0646 \u0641\u0639\u0627\u0644\u06cc\u062a",
              width: 160,
              type: "datetime"
            },
            {
              field: "husbandSmsSubTime",
              label_fa:
                "\u067e\u0627\u06cc\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0647\u0645\u06cc\u0627\u0631 \u0622\u0642\u0627",
              width: 160,
              type: "datetime"
            },
            {
              field: "selfHamyarSmsSubTime",
              label_fa:
                "\u067e\u0627\u06cc\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0647\u0645\u06cc\u0627\u0631 \u062e\u0648\u062f",
              width: 160,
              type: "datetime"
            },
            {
              field: "hamyarData",
              label_fa:
                "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0647\u0645\u06cc\u0627\u0631\u0647\u0627",
              width: 220,
              type: "array"
            }
          ],
          data: {
            success: true,
            result: {
              total: 881,
              list: [
                {
                  user: {
                    countBuyBreastCancer: 3,
                    countBuyHamyarStatus: 1,
                    countBuyHusbandSms: 3,
                    countBuyPregnancySubStatus: 5,
                    countBuySelfSms: 1,
                    countBuySpecialAdvice: 1,
                    activeTel: true,
                    breastCancerSmsSubTime: {
                      year: 2026,
                      month: 2,
                      day: 3,
                      hour: 4,
                      minute: 3,
                      second: 11,
                      nanosecond: 141000000,
                      timeZoneOffsetSeconds: 0
                    },
                    pregnancySubTime: {
                      year: 2027,
                      month: 11,
                      day: 27,
                      hour: 0,
                      minute: 36,
                      second: 38,
                      nanosecond: 358000000,
                      timeZoneOffsetSeconds: 0
                    },
                    hamyarTime: {
                      year: 2025,
                      month: 5,
                      day: 21,
                      hour: 22,
                      minute: 22,
                      second: 35,
                      nanosecond: 336000000,
                      timeZoneOffsetSeconds: 0
                    },
                    husbandSmsSubTime: {
                      year: 2025,
                      month: 10,
                      day: 7,
                      hour: 8,
                      minute: 39,
                      second: 22,
                      nanosecond: 886000000,
                      timeZoneOffsetSeconds: 0
                    },
                    pregnancyBabyGrowthTime: {
                      year: 2027,
                      month: 11,
                      day: 27,
                      hour: 0,
                      minute: 36,
                      second: 38,
                      nanosecond: 463000000,
                      timeZoneOffsetSeconds: 0
                    },
                    pregnancyBecomeFatherTime: {
                      year: 2027,
                      month: 11,
                      day: 27,
                      hour: 0,
                      minute: 36,
                      second: 38,
                      nanosecond: 463000000,
                      timeZoneOffsetSeconds: 0
                    },
                    pregnancyBetterRelationTime: {
                      year: 2027,
                      month: 11,
                      day: 27,
                      hour: 0,
                      minute: 36,
                      second: 38,
                      nanosecond: 463000000,
                      timeZoneOffsetSeconds: 0
                    },
                    pregnancyDangerTime: {
                      year: 2027,
                      month: 11,
                      day: 27,
                      hour: 0,
                      minute: 36,
                      second: 38,
                      nanosecond: 463000000,
                      timeZoneOffsetSeconds: 0
                    },
                    pregnancySelfSmsTime: {
                      year: 2027,
                      month: 11,
                      day: 27,
                      hour: 0,
                      minute: 36,
                      second: 38,
                      nanosecond: 463000000,
                      timeZoneOffsetSeconds: 0
                    },
                    selfHamyarSmsSubTime: {
                      year: 2025,
                      month: 12,
                      day: 6,
                      hour: 10,
                      minute: 33,
                      second: 20,
                      nanosecond: 363000000,
                      timeZoneOffsetSeconds: 0
                    },
                    specialAdviceSubTim: {
                      year: 2025,
                      month: 3,
                      day: 9,
                      hour: 16,
                      minute: 11,
                      second: 12,
                      nanosecond: 839000000,
                      timeZoneOffsetSeconds: 0
                    },
                    mobile: "",
                    id: "265149",
                    lastActivity: {
                      year: 2025,
                      month: 9,
                      day: 12,
                      hour: 18,
                      minute: 23,
                      second: 34,
                      nanosecond: 707000000,
                      timeZoneOffsetSeconds: 0
                    },
                    username: "melika",
                    refcode: "3d8fb3"
                  }
                },
                {
                  user: {
                    countBuyHusbandSms: 1,
                    activeTel: false,
                    husbandSmsSubTime: {
                      year: 2025,
                      month: 9,
                      day: 13,
                      hour: 5,
                      minute: 49,
                      second: 2,
                      nanosecond: 612000000,
                      timeZoneOffsetSeconds: 0
                    },
                    mobile: "09139140864",
                    id: "f0afd250-6395-4253-b257-e167262cdd3d",
                    lastActivity: {
                      year: 2025,
                      month: 9,
                      day: 7,
                      hour: 3,
                      minute: 48,
                      second: 36,
                      nanosecond: 74000000,
                      timeZoneOffsetSeconds: 0
                    },
                    username: "guest_M8KxaugoDA",
                    refcode: "fGC3sVlYv"
                  }
                }
              ]
            }
          },
          loading: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "userdata",
        type: "readonly",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({}),

        onChangeProp: "onUserdataChange"
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"frame49"}
      data-plasmic-override={overrides.frame49}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.frame49
      )}
    >
      <div
        data-plasmic-name={"frame25"}
        data-plasmic-override={overrides.frame25}
        className={classNames(projectcss.all, sty.frame25)}
      >
        <ChevronRightIcon
          className={classNames(projectcss.all, sty.svg__mI4Mm)}
          onClick={args.onBack}
          role={"img"}
        />

        <div className={classNames(projectcss.all, sty.freeBox___29EE)}>
          {renderPlasmicSlot({
            defaultContents: "\u0627\u0637\u0644\u0627\u0639\u0627\u062a",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___3X6Nt)}>
          <LetterOpenedSvgrepoComSvgIcon
            className={classNames(projectcss.all, sty.svg__fkilX)}
            role={"img"}
          />

          <Icons8NotificationSvgIcon
            className={classNames(projectcss.all, sty.svg__nKSoo)}
            role={"img"}
          />

          <Icon47Icon
            className={classNames(projectcss.all, sty.svg__mIaRa)}
            role={"img"}
          />
        </div>
      </div>
      <div
        data-plasmic-name={"frame48"}
        data-plasmic-override={overrides.frame48}
        className={classNames(projectcss.all, sty.frame48)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___5Zz74)}>
          <Line3Icon
            className={classNames(projectcss.all, sty.svg___9WpV)}
            role={"img"}
          />
        </div>
      </div>
      <DataUser
        data-plasmic-name={"dataUser"}
        data-plasmic-override={overrides.dataUser}
        className={classNames("__wab_instance", sty.dataUser)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame49: ["frame49", "frame25", "frame48", "dataUser"],
  frame25: ["frame25"],
  frame48: ["frame48"],
  dataUser: ["dataUser"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame49: "div";
  frame25: "div";
  frame48: "div";
  dataUser: typeof DataUser;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUserPage2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUserPage2__VariantsArgs;
    args?: PlasmicUserPage2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUserPage2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUserPage2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUserPage2__ArgProps,
          internalVariantPropNames: PlasmicUserPage2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUserPage2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame49") {
    func.displayName = "PlasmicUserPage2";
  } else {
    func.displayName = `PlasmicUserPage2.${nodeName}`;
  }
  return func;
}

export const PlasmicUserPage2 = Object.assign(
  // Top-level PlasmicUserPage2 renders the root element
  makeNodeComponent("frame49"),
  {
    // Helper components rendering sub-elements
    frame25: makeNodeComponent("frame25"),
    frame48: makeNodeComponent("frame48"),
    dataUser: makeNodeComponent("dataUser"),

    // Metadata about props expected for PlasmicUserPage2
    internalVariantProps: PlasmicUserPage2__VariantProps,
    internalArgProps: PlasmicUserPage2__ArgProps
  }
);

export default PlasmicUserPage2;
/* prettier-ignore-end */
