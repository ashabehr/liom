/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: PIFHnFLcunkZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LineClomp from "../../LineClomp"; // plasmic-import: XsM8QG4wUKlk/component
import { Video } from "@plasmicpkgs/plasmic-basic-components";
import AudioPlayer from "../../AudioPlayer"; // plasmic-import: 8TLNkR4k2mrN/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicPost.module.css"; // plasmic-import: PIFHnFLcunkZ/css

createPlasmicElementProxy;

export type PlasmicPost__VariantMembers = {
  postType: "image" | "voise" | "video" | "jastText" | "file";
};
export type PlasmicPost__VariantsArgs = {
  postType?: SingleChoiceArg<"image" | "voise" | "video" | "jastText" | "file">;
};
type VariantPropType = keyof PlasmicPost__VariantsArgs;
export const PlasmicPost__VariantProps = new Array<VariantPropType>("postType");

export type PlasmicPost__ArgsType = {
  data?: string;
  text?: string;
  image2?: string;
  video?: string;
  audioLinkInPost?: string;
  fail?: string;
  failName?: string;
  textForBottum?: string;
  linkForAction?: string;
  title?: string;
};
type ArgPropType = keyof PlasmicPost__ArgsType;
export const PlasmicPost__ArgProps = new Array<ArgPropType>(
  "data",
  "text",
  "image2",
  "video",
  "audioLinkInPost",
  "fail",
  "failName",
  "textForBottum",
  "linkForAction",
  "title"
);

export type PlasmicPost__OverridesType = {
  root?: Flex__<"div">;
  lineClompTitle?: Flex__<typeof LineClomp>;
  lineClompText?: Flex__<typeof LineClomp>;
  image3?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  htmlVideo?: Flex__<typeof Video>;
  audioPlayer?: Flex__<typeof AudioPlayer>;
};

export interface DefaultPostProps {
  data?: string;
  text?: string;
  image2?: string;
  video?: string;
  audioLinkInPost?: string;
  fail?: string;
  failName?: string;
  textForBottum?: string;
  linkForAction?: string;
  title?: string;
  postType?: SingleChoiceArg<"image" | "voise" | "video" | "jastText" | "file">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPost__RenderFunc(props: {
  variants: PlasmicPost__VariantsArgs;
  args: PlasmicPost__ArgsType;
  overrides: PlasmicPost__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          image2:
            "https://teh-1.s3.poshtiban.com/liom/2025-03/post/2025-03-28-38fa0b71-308d-49f8-87e0-290a8573a25c.mp4\n"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "postType",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.postType
      },
      {
        path: "lineClompText.line",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "lineClompTitle.line",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootpostType_file]: hasVariant($state, "postType", "file"),
          [sty.rootpostType_image]: hasVariant($state, "postType", "image"),
          [sty.rootpostType_jastText]: hasVariant(
            $state,
            "postType",
            "jastText"
          ),
          [sty.rootpostType_video]: hasVariant($state, "postType", "video"),
          [sty.rootpostType_voise]: hasVariant($state, "postType", "voise")
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__tjGb4)}>
        <LineClomp
          data-plasmic-name={"lineClompTitle"}
          data-plasmic-override={overrides.lineClompTitle}
          className={classNames("__wab_instance", sty.lineClompTitle)}
          numberOfLine={1}
          onLineChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["lineClompTitle", "line"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__g7I9D
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </LineClomp>
        <LineClomp
          data-plasmic-name={"lineClompText"}
          data-plasmic-override={overrides.lineClompText}
          className={classNames("__wab_instance", sty.lineClompText, {
            [sty.lineClompTextpostType_jastText]: hasVariant(
              $state,
              "postType",
              "jastText"
            )
          })}
          more={true}
          numberOfLine={4}
          onLineChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["lineClompText", "line"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rkw2,
              {
                [sty.textpostType_image__rkw22TCWu]: hasVariant(
                  $state,
                  "postType",
                  "image"
                ),
                [sty.textpostType_voise__rkw2Vlsyu]: hasVariant(
                  $state,
                  "postType",
                  "voise"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.text;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "text";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </LineClomp>
        <div
          data-plasmic-name={"image3"}
          data-plasmic-override={overrides.image3}
          className={classNames(projectcss.all, sty.image3, {
            [sty.image3postType_file]: hasVariant($state, "postType", "file"),
            [sty.image3postType_image]: hasVariant($state, "postType", "image"),
            [sty.image3postType_jastText]: hasVariant(
              $state,
              "postType",
              "jastText"
            ),
            [sty.image3postType_video]: hasVariant($state, "postType", "video"),
            [sty.image3postType_voise]: hasVariant($state, "postType", "voise")
          })}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img, {
              [sty.imgpostType_image]: hasVariant($state, "postType", "image")
            })}
            displayHeight={"auto"}
            displayMaxHeight={"50%"}
            displayMaxWidth={"50%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={(() => {
              try {
                return $props.image2;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__tbwA, {
            [sty.freeBoxpostType_file__tbwASc5R]: hasVariant(
              $state,
              "postType",
              "file"
            ),
            [sty.freeBoxpostType_image__tbwA2TCWu]: hasVariant(
              $state,
              "postType",
              "image"
            ),
            [sty.freeBoxpostType_jastText__tbwAGp8JF]: hasVariant(
              $state,
              "postType",
              "jastText"
            ),
            [sty.freeBoxpostType_voise__tbwAVlsyu]: hasVariant(
              $state,
              "postType",
              "voise"
            )
          })}
          onClick={async event => {
            const $steps = {};

            $steps["goToPage"] = true
              ? (() => {
                  const actionArgs = {
                    destination: (() => {
                      try {
                        return (
                          "https://tools.liom.app/video-player/?title=" +
                          $props.title +
                          "&url=" +
                          currentItem.url
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToPage"] != null &&
              typeof $steps["goToPage"] === "object" &&
              typeof $steps["goToPage"].then === "function"
            ) {
              $steps["goToPage"] = await $steps["goToPage"];
            }
          }}
        >
          <Video
            data-plasmic-name={"htmlVideo"}
            data-plasmic-override={overrides.htmlVideo}
            className={classNames("__wab_instance", sty.htmlVideo, {
              [sty.htmlVideopostType_file]: hasVariant(
                $state,
                "postType",
                "file"
              ),
              [sty.htmlVideopostType_image]: hasVariant(
                $state,
                "postType",
                "image"
              )
            })}
            controls={true}
            src={(() => {
              try {
                return $props.video;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__fbVqi, {
            [sty.freeBoxpostType_file__fbVqiSc5R]: hasVariant(
              $state,
              "postType",
              "file"
            ),
            [sty.freeBoxpostType_image__fbVqi2TCWu]: hasVariant(
              $state,
              "postType",
              "image"
            ),
            [sty.freeBoxpostType_jastText__fbVqiGp8JF]: hasVariant(
              $state,
              "postType",
              "jastText"
            ),
            [sty.freeBoxpostType_video__fbVqi1UrG6]: hasVariant(
              $state,
              "postType",
              "video"
            ),
            [sty.freeBoxpostType_voise__fbVqiVlsyu]: hasVariant(
              $state,
              "postType",
              "voise"
            )
          })}
        >
          <AudioPlayer
            data-plasmic-name={"audioPlayer"}
            data-plasmic-override={overrides.audioPlayer}
            audioLink={(() => {
              try {
                return $props.audioLinkInPost;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.audioPlayer, {
              [sty.audioPlayerpostType_image]: hasVariant(
                $state,
                "postType",
                "image"
              ),
              [sty.audioPlayerpostType_voise]: hasVariant(
                $state,
                "postType",
                "voise"
              )
            })}
          />
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__uxQPe, {
            [sty.freeBoxpostType_image__uxQPe2TCWu]: hasVariant(
              $state,
              "postType",
              "image"
            ),
            [sty.freeBoxpostType_jastText__uxQPeGp8JF]: hasVariant(
              $state,
              "postType",
              "jastText"
            )
          })}
          onClick={async event => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return window.open($props.linkForAction);
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__v2Gn
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.textForBottum;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "lineClompTitle",
    "lineClompText",
    "image3",
    "img",
    "htmlVideo",
    "audioPlayer"
  ],
  lineClompTitle: ["lineClompTitle"],
  lineClompText: ["lineClompText"],
  image3: ["image3", "img"],
  img: ["img"],
  htmlVideo: ["htmlVideo"],
  audioPlayer: ["audioPlayer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  lineClompTitle: typeof LineClomp;
  lineClompText: typeof LineClomp;
  image3: "div";
  img: typeof PlasmicImg__;
  htmlVideo: typeof Video;
  audioPlayer: typeof AudioPlayer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPost__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPost__VariantsArgs;
    args?: PlasmicPost__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPost__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPost__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPost__ArgProps,
          internalVariantPropNames: PlasmicPost__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPost__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPost";
  } else {
    func.displayName = `PlasmicPost.${nodeName}`;
  }
  return func;
}

export const PlasmicPost = Object.assign(
  // Top-level PlasmicPost renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    lineClompTitle: makeNodeComponent("lineClompTitle"),
    lineClompText: makeNodeComponent("lineClompText"),
    image3: makeNodeComponent("image3"),
    img: makeNodeComponent("img"),
    htmlVideo: makeNodeComponent("htmlVideo"),
    audioPlayer: makeNodeComponent("audioPlayer"),

    // Metadata about props expected for PlasmicPost
    internalVariantProps: PlasmicPost__VariantProps,
    internalArgProps: PlasmicPost__ArgProps
  }
);

export default PlasmicPost;
/* prettier-ignore-end */
