/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: zfK6Jl7yJcHY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicMention.module.css"; // plasmic-import: zfK6Jl7yJcHY/css

import Group4Icon from "./icons/PlasmicIcon__Group4"; // plasmic-import: lxp2dspszq0H/icon
import Icon128Icon from "./icons/PlasmicIcon__Icon128"; // plasmic-import: lhDsBzp9RUo8/icon
import ShareIcon from "./icons/PlasmicIcon__Share"; // plasmic-import: mkp8vNnpF4sP/icon
import Icon130Icon from "./icons/PlasmicIcon__Icon130"; // plasmic-import: PnCbB59mTGwR/icon
import Icon131Icon from "./icons/PlasmicIcon__Icon131"; // plasmic-import: Jz65nAr3a4vL/icon

createPlasmicElementProxy;

export type PlasmicMention__VariantMembers = {
  selected: "selected";
};
export type PlasmicMention__VariantsArgs = {
  selected?: SingleBooleanChoiceArg<"selected">;
};
type VariantPropType = keyof PlasmicMention__VariantsArgs;
export const PlasmicMention__VariantProps = new Array<VariantPropType>(
  "selected"
);

export type PlasmicMention__ArgsType = {
  onClick?: (event: any) => void;
  children?: React.ReactNode;
  value?: any;
};
type ArgPropType = keyof PlasmicMention__ArgsType;
export const PlasmicMention__ArgProps = new Array<ArgPropType>(
  "onClick",
  "children",
  "value"
);

export type PlasmicMention__OverridesType = {
  group40?: Flex__<"div">;
  rectangle21?: Flex__<"div">;
  group20?: Flex__<"div">;
  frame39?: Flex__<"div">;
  frame4?: Flex__<"div">;
  group4?: Flex__<"div">;
  page3?: Flex__<"div">;
  frame5?: Flex__<"div">;
  group5?: Flex__<"div">;
  page4?: Flex__<"div">;
  frame6?: Flex__<"div">;
  group6?: Flex__<"div">;
  layer3?: Flex__<"div">;
  bookmark2?: Flex__<"div">;
};

export interface DefaultMentionProps {
  onClick?: (event: any) => void;
  children?: React.ReactNode;
  value?: any;
  selected?: SingleBooleanChoiceArg<"selected">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMention__RenderFunc(props: {
  variants: PlasmicMention__VariantsArgs;
  args: PlasmicMention__ArgsType;
  overrides: PlasmicMention__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          value: { a: "kdckd", b: "ckdcndn", c: "cdcddcdc", d: "csdcdscscsd" }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.selected
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"group40"}
      data-plasmic-override={overrides.group40}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.group40,
        { [sty.group40selected]: hasVariant($state, "selected", "selected") }
      )}
      onClick={args.onClick}
    >
      <div className={classNames(projectcss.all, sty.freeBox__arOz4)}>
        <div
          data-plasmic-name={"rectangle21"}
          data-plasmic-override={overrides.rectangle21}
          className={classNames(projectcss.all, sty.rectangle21)}
        />
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__xfiwk, {
          [sty.freeBoxselected__xfiwKcNw0J]: hasVariant(
            $state,
            "selected",
            "selected"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__pXj6R, {
            [sty.freeBoxselected__pXj6RcNw0J]: hasVariant(
              $state,
              "selected",
              "selected"
            )
          })}
        >
          <div
            data-plasmic-name={"group20"}
            data-plasmic-override={overrides.group20}
            className={classNames(projectcss.all, sty.group20, {
              [sty.group20selected]: hasVariant($state, "selected", "selected")
            })}
          >
            <PlasmicIcon__
              PlasmicIconType={
                hasVariant($state, "selected", "selected")
                  ? Icon128Icon
                  : Group4Icon
              }
              className={classNames(projectcss.all, sty.svg___2Nl9Z, {
                [sty.svgselected___2Nl9ZcNw0J]: hasVariant(
                  $state,
                  "selected",
                  "selected"
                )
              })}
              role={"img"}
            />

            <div
              className={classNames(projectcss.all, sty.freeBox__hzvwh, {
                [sty.freeBoxselected__hzvwhcNw0J]: hasVariant(
                  $state,
                  "selected",
                  "selected"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: "1",
                value: args.children,
                className: classNames(sty.slotTargetChildren, {
                  [sty.slotTargetChildrenselected]: hasVariant(
                    $state,
                    "selected",
                    "selected"
                  )
                })
              })}
            </div>
          </div>
          {(hasVariant($state, "selected", "selected") ? true : false) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tEfRt,
                {
                  [sty.textselected__tEfRtcNw0J]: hasVariant(
                    $state,
                    "selected",
                    "selected"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return `ذکر :   ${$props.value.a}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u06cc\u0627 \u0648\u0627\u062d\u0628";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
          {(hasVariant($state, "selected", "selected") ? true : false) ? (
            <div
              data-plasmic-name={"frame39"}
              data-plasmic-override={overrides.frame39}
              className={classNames(projectcss.all, sty.frame39, {
                [sty.frame39selected]: hasVariant(
                  $state,
                  "selected",
                  "selected"
                )
              })}
            >
              <div
                data-plasmic-name={"frame4"}
                data-plasmic-override={overrides.frame4}
                className={classNames(projectcss.all, sty.frame4)}
              >
                <div
                  data-plasmic-name={"group4"}
                  data-plasmic-override={overrides.group4}
                  className={classNames(projectcss.all, sty.group4)}
                >
                  <div
                    data-plasmic-name={"page3"}
                    data-plasmic-override={overrides.page3}
                    className={classNames(projectcss.all, sty.page3)}
                  >
                    <ShareIcon
                      className={classNames(projectcss.all, sty.svg__vCufz, {
                        [sty.svgselected__vCufZcNw0J]: hasVariant(
                          $state,
                          "selected",
                          "selected"
                        )
                      })}
                      role={"img"}
                    />
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"frame5"}
                data-plasmic-override={overrides.frame5}
                className={classNames(projectcss.all, sty.frame5)}
              >
                <div
                  data-plasmic-name={"group5"}
                  data-plasmic-override={overrides.group5}
                  className={classNames(projectcss.all, sty.group5)}
                >
                  <div
                    data-plasmic-name={"page4"}
                    data-plasmic-override={overrides.page4}
                    className={classNames(projectcss.all, sty.page4)}
                  >
                    <Icon130Icon
                      className={classNames(projectcss.all, sty.svg__eoKUf, {
                        [sty.svgselected__eoKUfcNw0J]: hasVariant(
                          $state,
                          "selected",
                          "selected"
                        )
                      })}
                      role={"img"}
                    />
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"frame6"}
                data-plasmic-override={overrides.frame6}
                className={classNames(projectcss.all, sty.frame6)}
              >
                <div
                  data-plasmic-name={"group6"}
                  data-plasmic-override={overrides.group6}
                  className={classNames(projectcss.all, sty.group6)}
                >
                  <div
                    data-plasmic-name={"layer3"}
                    data-plasmic-override={overrides.layer3}
                    className={classNames(projectcss.all, sty.layer3)}
                  >
                    <div
                      data-plasmic-name={"bookmark2"}
                      data-plasmic-override={overrides.bookmark2}
                      className={classNames(projectcss.all, sty.bookmark2)}
                    >
                      <Icon131Icon
                        className={classNames(projectcss.all, sty.svg__g0O4G, {
                          [sty.svgselected__g0O4GcNw0J]: hasVariant(
                            $state,
                            "selected",
                            "selected"
                          )
                        })}
                        role={"img"}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ) : null}
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__hgUbL, {
            [sty.freeBoxselected__hgUbLcNw0J]: hasVariant(
              $state,
              "selected",
              "selected"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yGxNs,
              {
                [sty.textselected__yGxNscNw0J]: hasVariant(
                  $state,
                  "selected",
                  "selected"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return `ذکر :   ${$props.value.a}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u06cc\u0627 \u0648\u0627\u062d\u0628";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___3T0U0,
              {
                [sty.textselected___3T0U0CNw0J]: hasVariant(
                  $state,
                  "selected",
                  "selected"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return `معنی :   ${$props.value.b}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0628\u062e\u0634\u0646\u062f\u0647 \u0648 \u0639\u0637\u0627 \u06a9\u0646\u0646\u062f\u0647";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ttPi6,
              {
                [sty.textselected__ttPi6CNw0J]: hasVariant(
                  $state,
                  "selected",
                  "selected"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return `تعداد تکرار :   ${$props.value.c}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u062b\u0631\u0648\u062a \u0648 \u0631\u0648\u0632\u06cc\u060c \u062c\u0644\u0628 \u0645\u0646\u0641\u0639\u062a";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bJqRr,
              {
                [sty.textselected__bJqRrcNw0J]: hasVariant(
                  $state,
                  "selected",
                  "selected"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return `فواید ذکر  :   ${$props.value.d}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u062b\u0631\u0648\u062a \u0648 \u0631\u0648\u0632\u06cc\u060c \u062c\u0644\u0628 \u0645\u0646\u0641\u0639\u062a";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  group40: [
    "group40",
    "rectangle21",
    "group20",
    "frame39",
    "frame4",
    "group4",
    "page3",
    "frame5",
    "group5",
    "page4",
    "frame6",
    "group6",
    "layer3",
    "bookmark2"
  ],
  rectangle21: ["rectangle21"],
  group20: ["group20"],
  frame39: [
    "frame39",
    "frame4",
    "group4",
    "page3",
    "frame5",
    "group5",
    "page4",
    "frame6",
    "group6",
    "layer3",
    "bookmark2"
  ],
  frame4: ["frame4", "group4", "page3"],
  group4: ["group4", "page3"],
  page3: ["page3"],
  frame5: ["frame5", "group5", "page4"],
  group5: ["group5", "page4"],
  page4: ["page4"],
  frame6: ["frame6", "group6", "layer3", "bookmark2"],
  group6: ["group6", "layer3", "bookmark2"],
  layer3: ["layer3", "bookmark2"],
  bookmark2: ["bookmark2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  group40: "div";
  rectangle21: "div";
  group20: "div";
  frame39: "div";
  frame4: "div";
  group4: "div";
  page3: "div";
  frame5: "div";
  group5: "div";
  page4: "div";
  frame6: "div";
  group6: "div";
  layer3: "div";
  bookmark2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMention__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMention__VariantsArgs;
    args?: PlasmicMention__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMention__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMention__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMention__ArgProps,
          internalVariantPropNames: PlasmicMention__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMention__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "group40") {
    func.displayName = "PlasmicMention";
  } else {
    func.displayName = `PlasmicMention.${nodeName}`;
  }
  return func;
}

export const PlasmicMention = Object.assign(
  // Top-level PlasmicMention renders the root element
  makeNodeComponent("group40"),
  {
    // Helper components rendering sub-elements
    rectangle21: makeNodeComponent("rectangle21"),
    group20: makeNodeComponent("group20"),
    frame39: makeNodeComponent("frame39"),
    frame4: makeNodeComponent("frame4"),
    group4: makeNodeComponent("group4"),
    page3: makeNodeComponent("page3"),
    frame5: makeNodeComponent("frame5"),
    group5: makeNodeComponent("group5"),
    page4: makeNodeComponent("page4"),
    frame6: makeNodeComponent("frame6"),
    group6: makeNodeComponent("group6"),
    layer3: makeNodeComponent("layer3"),
    bookmark2: makeNodeComponent("bookmark2"),

    // Metadata about props expected for PlasmicMention
    internalVariantProps: PlasmicMention__VariantProps,
    internalArgProps: PlasmicMention__ArgProps
  }
);

export default PlasmicMention;
/* prettier-ignore-end */
