/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: TGSOhksfnMdG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import TabWidget from "../../TabWidget"; // plasmic-import: 5oNm4PTVAr6q/component
import DirectDialog2 from "../../DirectDialog2"; // plasmic-import: TQdexUKMB_Ec/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicToolsComponent.module.css"; // plasmic-import: TGSOhksfnMdG/css

createPlasmicElementProxy;

export type PlasmicToolsComponent__VariantMembers = {};
export type PlasmicToolsComponent__VariantsArgs = {};
type VariantPropType = keyof PlasmicToolsComponent__VariantsArgs;
export const PlasmicToolsComponent__VariantProps = new Array<VariantPropType>();

export type PlasmicToolsComponent__ArgsType = {
  token?: string;
  inApp?: string;
  theme?: string;
};
type ArgPropType = keyof PlasmicToolsComponent__ArgsType;
export const PlasmicToolsComponent__ArgProps = new Array<ArgPropType>(
  "token",
  "inApp",
  "theme"
);

export type PlasmicToolsComponent__OverridesType = {
  root?: Flex__<"div">;
  lottie?: Flex__<typeof LottieWrapper>;
  getUserInfo?: Flex__<typeof ApiRequest>;
  tabWidget?: Flex__<typeof TabWidget>;
  img?: Flex__<typeof PlasmicImg__>;
  directDialog2?: Flex__<typeof DirectDialog2>;
};

export interface DefaultToolsComponentProps {
  token?: string;
  inApp?: string;
  theme?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicToolsComponent__RenderFunc(props: {
  variants: PlasmicToolsComponent__VariantsArgs;
  args: PlasmicToolsComponent__ArgsType;
  overrides: PlasmicToolsComponent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "index",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "sub2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                subscription_features: {
                  services: [
                    {
                      category: "مادر",
                      items: [
                        {
                          title: "",
                          items: [
                            {
                              text: "وضعیت امروز",
                              description: "",
                              action: "#statusToday",
                              shopType: "",
                              icon: "https://liom.storage.c2.liara.space/tools/mainPage/today_status.png"
                            },
                            {
                              text: "ویدیو آموزشی",
                              description:
                                "مجموعه ویدیوهای آموزشی مرتبط با بارداری و مراقبت‌ها.",
                              action: "#video",
                              shopType: "",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/videoOutlined.png"
                            },
                            {
                              text: "کنترل وزن",
                              description:
                                "برنامه کنترل وزن مادر و نوزاد در دوران بارداری.",
                              action: "#weight",
                              shopType: "",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/bmiOutlined.png"
                            },
                            {
                              text: "روتین مو",
                              description:
                                "برنامه مراقبت و نگهداری از موها در دوران بارداری.",
                              action: "#hair_care",
                              shopType: "hair_car",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/hairCareOutlined.png"
                            },
                            {
                              text: "روتین پوست",
                              description:
                                "راهنمای مراقبت از پوست در دوران بارداری برای حفظ زیبایی و سلامت.",
                              action: "#skinCare",
                              shopType: "skinCare",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/skinCareOutlined.png"
                            },
                            {
                              text: "پیشگیری از ترک پوستی",
                              description:
                                "روش‌های جلوگیری از ایجاد ترک‌های پوستی در بارداری.",
                              action: "#stretch_marks",
                              shopType: "stretch_marks_sub",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/stretchMarkOutlined.png"
                            },
                            {
                              text: "درمان  ADHD ",
                              action: "#adhd_treatment_sub",
                              shopType: "adhd_treatment_sub",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/adhdOutlined.png"
                            },
                            {
                              text: "تست نیاز به تراپی دارم",
                              description:
                                "ارزیابی نیاز به خدمات تراپی روانشناسی و درمانی.",
                              action: "#need_therapy",
                              shopType: "need_therapy_sub",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/therapyOutlined.png"
                            },
                            {
                              text: "تست افسردگی",
                              description:
                                "ارزیابی سلامت روان و تشخیص علائم افسردگی.",
                              action: "#depression",
                              shopType: "",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/depressionNew.png"
                            },
                            {
                              text: "تست ADHD",
                              description:
                                "آزمون و ارزیابی اختلال نقص توجه و بیش‌فعالی.",
                              action: "#adhd",
                              shopType: "adhd_sub",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/adhdOutlined.png"
                            },
                            {
                              text: "تست دیابت بارداری (GD)",
                              action: "#pregnancyDiabetes",
                              shopType: "pregnancy_diabetes",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/diabetOutlined.png"
                            },
                            {
                              text: "تست مسمومیت بارداری",
                              action: "#preeclampsia",
                              shopType: "preeclampsia",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/preeclampsiaOutlined.png"
                            },
                            {
                              text: "تست اختلال تیروئید",
                              action: "#thyroid",
                              shopType: "thyroid",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/therapyOutlined.png"
                            },
                            {
                              text: "همیار بارداری",
                              shopType: "",
                              action: "#hamyarInfo",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/hamyarOutlined.png"
                            },
                            {
                              text: "کلینیک",
                              action: "#clinic",
                              shopType: "",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/clinicOutlined.png"
                            },
                            {
                              text: "بیوریتم",
                              description:
                                "برنامه بیوریتم و چرخه‌های طبیعی بدن در دوران بارداری.",
                              action: "#biorhythm",
                              shopType: "",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/biorhythmOutlined.png"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      category: "فرزند",
                      items: [
                        {
                          title: "",
                          items: [
                            {
                              text: "تست پیش‌بینی جنسیت",
                              shopType: "",
                              description:
                                "آزمون و بررسی احتمالات جنسیت نوزاد.",
                              action: "#genderDetection",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/genderTestOutlined.png"
                            },
                            {
                              text: "چک‌لیست ایمنی و علائم هشدار",
                              action: "#danger",
                              shopType: "",
                              icon: "https://liom.storage.c2.liara.space/config/self_care/dangerOutlined.png"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "getUserInfo.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getUserInfo.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getUserInfo.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "typeBuy",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "pregnancySub"
      },
      {
        path: "directDialog2.selectShop",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "directDialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "newvieww",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return window.localStorage.getItem("newView") || "false";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
      onLoad={async event => {
        const $steps = {};

        $steps["updateLoading"] = true
          ? (() => {
              const actionArgs = {
                variable: {
                  objRoot: $state,
                  variablePath: ["loading"]
                },
                operation: 0,
                value: false
              };
              return (({ variable, value, startIndex, deleteCount }) => {
                if (!variable) {
                  return;
                }
                const { objRoot, variablePath } = variable;

                $stateSet(objRoot, variablePath, value);
                return value;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateLoading"] != null &&
          typeof $steps["updateLoading"] === "object" &&
          typeof $steps["updateLoading"].then === "function"
        ) {
          $steps["updateLoading"] = await $steps["updateLoading"];
        }
      }}
    >
      {(() => {
        try {
          return $state.loading;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return false;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__derEy)}>
          <div className={classNames(projectcss.all, sty.freeBox__sDcVk)}>
            <LottieWrapper
              data-plasmic-name={"lottie"}
              data-plasmic-override={overrides.lottie}
              animationData={(() => {
                try {
                  return {
                    nm: "Loading Dots",
                    ddd: 0,
                    h: 50,
                    w: 100,
                    meta: {
                      g: "@lottiefiles/toolkit-js 0.33.2"
                    },
                    layers: [
                      {
                        ty: 4,
                        nm: "Dot4",
                        sr: 1,
                        st: 0,
                        op: 360,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: false,
                        ao: 0,
                        ks: {
                          a: {
                            a: 0,
                            k: [-284, 92, 0],

                            ix: 1
                          },
                          s: {
                            a: 1,
                            k: [
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [2.61, 2.32, 100],

                                t: 25
                              },
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [3.91, 3.47, 100],

                                t: 39
                              },
                              {
                                s: [2.61, 2.32, 100],

                                t: 55
                              }
                            ],

                            ix: 6
                          },
                          sk: {
                            a: 0,
                            k: 0
                          },
                          p: {
                            a: 1,
                            k: [
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [59.48, 25, 0],

                                t: 25
                              },
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [59.48, 23.15, 0],

                                t: 39
                              },
                              {
                                s: [59.48, 25, 0],

                                t: 55
                              }
                            ],

                            ix: 2
                          },
                          r: {
                            a: 0,
                            k: 0,
                            ix: 10
                          },
                          sa: {
                            a: 0,
                            k: 0
                          },
                          o: {
                            a: 1,
                            k: [
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [25],

                                t: 25
                              },
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [100],

                                t: 39
                              },
                              {
                                s: [25],

                                t: 55
                              }
                            ],

                            ix: 11
                          }
                        },
                        ef: [],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Ellipse 1",
                            ix: 1,
                            cix: 2,
                            np: 3,
                            it: [
                              {
                                ty: "el",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Ellipse",
                                nm: "Ellipse Path 1",
                                d: 1,
                                p: {
                                  a: 0,
                                  k: [0, 0],

                                  ix: 3
                                },
                                s: {
                                  a: 0,
                                  k: [120, 120],

                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Fill 1",
                                c: {
                                  a: 0,
                                  k:
                                    $state.newvieww == "true"
                                      ? [0.0706, 0.3922, 0.8196]
                                      : [0.5098, 0.3294, 0.7765],

                                  ix: 4
                                },
                                r: 1,
                                o: {
                                  a: 0,
                                  k: 100,
                                  ix: 5
                                }
                              },
                              {
                                ty: "tr",
                                a: {
                                  a: 0,
                                  k: [0, 0],

                                  ix: 1
                                },
                                s: {
                                  a: 0,
                                  k: [100, 100],

                                  ix: 3
                                },
                                sk: {
                                  a: 0,
                                  k: 0,
                                  ix: 4
                                },
                                p: {
                                  a: 0,
                                  k: [-284, 92],

                                  ix: 2
                                },
                                r: {
                                  a: 0,
                                  k: 0,
                                  ix: 6
                                },
                                sa: {
                                  a: 0,
                                  k: 0,
                                  ix: 5
                                },
                                o: {
                                  a: 0,
                                  k: 100,
                                  ix: 7
                                }
                              }
                            ]
                          }
                        ],

                        ind: 1
                      },
                      {
                        ty: 4,
                        nm: "Dot3",
                        sr: 1,
                        st: 0,
                        op: 360,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: false,
                        ao: 0,
                        ks: {
                          a: {
                            a: 0,
                            k: [-284, 92, 0],

                            ix: 1
                          },
                          s: {
                            a: 1,
                            k: [
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [2.61, 2.32, 100],

                                t: 17
                              },
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [3.91, 3.47, 100],

                                t: 31
                              },
                              {
                                s: [2.61, 2.32, 100],

                                t: 47
                              }
                            ],

                            ix: 6
                          },
                          sk: {
                            a: 0,
                            k: 0
                          },
                          p: {
                            a: 1,
                            k: [
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [53.23, 25, 0],

                                t: 17
                              },
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [53.23, 23.15, 0],

                                t: 31
                              },
                              {
                                s: [53.23, 25, 0],

                                t: 47
                              }
                            ],

                            ix: 2
                          },
                          r: {
                            a: 0,
                            k: 0,
                            ix: 10
                          },
                          sa: {
                            a: 0,
                            k: 0
                          },
                          o: {
                            a: 1,
                            k: [
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [25],

                                t: 17
                              },
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [100],

                                t: 31
                              },
                              {
                                s: [25],

                                t: 47
                              }
                            ],

                            ix: 11
                          }
                        },
                        ef: [],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Ellipse 1",
                            ix: 1,
                            cix: 2,
                            np: 3,
                            it: [
                              {
                                ty: "el",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Ellipse",
                                nm: "Ellipse Path 1",
                                d: 1,
                                p: {
                                  a: 0,
                                  k: [0, 0],

                                  ix: 3
                                },
                                s: {
                                  a: 0,
                                  k: [120, 120],

                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Fill 1",
                                c: {
                                  a: 0,
                                  k:
                                    $state.newvieww == "true"
                                      ? [0.0706, 0.3922, 0.8196]
                                      : [0.5098, 0.3294, 0.7765],

                                  ix: 4
                                },
                                r: 1,
                                o: {
                                  a: 0,
                                  k: 100,
                                  ix: 5
                                }
                              },
                              {
                                ty: "tr",
                                a: {
                                  a: 0,
                                  k: [0, 0],

                                  ix: 1
                                },
                                s: {
                                  a: 0,
                                  k: [100, 100],

                                  ix: 3
                                },
                                sk: {
                                  a: 0,
                                  k: 0,
                                  ix: 4
                                },
                                p: {
                                  a: 0,
                                  k: [-284, 92],

                                  ix: 2
                                },
                                r: {
                                  a: 0,
                                  k: 0,
                                  ix: 6
                                },
                                sa: {
                                  a: 0,
                                  k: 0,
                                  ix: 5
                                },
                                o: {
                                  a: 0,
                                  k: 100,
                                  ix: 7
                                }
                              }
                            ]
                          }
                        ],

                        ind: 2
                      },
                      {
                        ty: 4,
                        nm: "Dot2",
                        sr: 1,
                        st: 0,
                        op: 360,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: false,
                        ao: 0,
                        ks: {
                          a: {
                            a: 0,
                            k: [-284, 92, 0],

                            ix: 1
                          },
                          s: {
                            a: 1,
                            k: [
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [2.61, 2.32, 100],

                                t: 9
                              },
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [3.91, 3.47, 100],

                                t: 23
                              },
                              {
                                s: [2.61, 2.32, 100],

                                t: 39
                              }
                            ],

                            ix: 6
                          },
                          sk: {
                            a: 0,
                            k: 0
                          },
                          p: {
                            a: 1,
                            k: [
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [46.98, 25, 0],

                                t: 9
                              },
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [46.98, 23.15, 0],

                                t: 23
                              },
                              {
                                s: [46.98, 25, 0],

                                t: 39
                              }
                            ],

                            ix: 2
                          },
                          r: {
                            a: 0,
                            k: 0,
                            ix: 10
                          },
                          sa: {
                            a: 0,
                            k: 0
                          },
                          o: {
                            a: 1,
                            k: [
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [25],

                                t: 9
                              },
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [100],

                                t: 23
                              },
                              {
                                s: [25],

                                t: 39
                              }
                            ],

                            ix: 11
                          }
                        },
                        ef: [],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Ellipse 1",
                            ix: 1,
                            cix: 2,
                            np: 3,
                            it: [
                              {
                                ty: "el",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Ellipse",
                                nm: "Ellipse Path 1",
                                d: 1,
                                p: {
                                  a: 0,
                                  k: [0, 0],

                                  ix: 3
                                },
                                s: {
                                  a: 0,
                                  k: [120, 120],

                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Fill 1",
                                c: {
                                  a: 0,
                                  k:
                                    $state.newvieww == "true"
                                      ? [0.0706, 0.3922, 0.8196]
                                      : [0.5098, 0.3294, 0.7765],

                                  ix: 4
                                },
                                r: 1,
                                o: {
                                  a: 0,
                                  k: 100,
                                  ix: 5
                                }
                              },
                              {
                                ty: "tr",
                                a: {
                                  a: 0,
                                  k: [0, 0],

                                  ix: 1
                                },
                                s: {
                                  a: 0,
                                  k: [100, 100],

                                  ix: 3
                                },
                                sk: {
                                  a: 0,
                                  k: 0,
                                  ix: 4
                                },
                                p: {
                                  a: 0,
                                  k: [-284, 92],

                                  ix: 2
                                },
                                r: {
                                  a: 0,
                                  k: 0,
                                  ix: 6
                                },
                                sa: {
                                  a: 0,
                                  k: 0,
                                  ix: 5
                                },
                                o: {
                                  a: 0,
                                  k: 100,
                                  ix: 7
                                }
                              }
                            ]
                          }
                        ],

                        ind: 3
                      },
                      {
                        ty: 4,
                        nm: "Dot1",
                        sr: 1,
                        st: 0,
                        op: 360,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: false,
                        ao: 0,
                        ks: {
                          a: {
                            a: 0,
                            k: [-284, 92, 0],

                            ix: 1
                          },
                          s: {
                            a: 1,
                            k: [
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [2.61, 2.32, 100],

                                t: 0
                              },
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [3.91, 3.47, 100],

                                t: 14
                              },
                              {
                                s: [2.61, 2.32, 100],

                                t: 30
                              }
                            ],

                            ix: 6
                          },
                          sk: {
                            a: 0,
                            k: 0
                          },
                          p: {
                            a: 1,
                            k: [
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [40.73, 25, 0],

                                t: 0
                              },
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [40.73, 23.15, 0],

                                t: 14
                              },
                              {
                                s: [40.73, 25, 0],

                                t: 30
                              }
                            ],

                            ix: 2
                          },
                          r: {
                            a: 0,
                            k: 0,
                            ix: 10
                          },
                          sa: {
                            a: 0,
                            k: 0
                          },
                          o: {
                            a: 1,
                            k: [
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [25],

                                t: 0
                              },
                              {
                                o: {
                                  x: 0.333,
                                  y: 0
                                },
                                i: {
                                  x: 0.667,
                                  y: 1
                                },
                                s: [100],

                                t: 14
                              },
                              {
                                s: [25],

                                t: 30
                              }
                            ],

                            ix: 11
                          }
                        },
                        ef: [],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Ellipse 1",
                            ix: 1,
                            cix: 2,
                            np: 3,
                            it: [
                              {
                                ty: "el",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Ellipse",
                                nm: "Ellipse Path 1",
                                d: 1,
                                p: {
                                  a: 0,
                                  k: [0, 0],

                                  ix: 3
                                },
                                s: {
                                  a: 0,
                                  k: [120, 120],

                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Fill 1",
                                c: {
                                  a: 0,
                                  k:
                                    $state.newvieww == "true"
                                      ? [0.0706, 0.3922, 0.8196]
                                      : [0.5098, 0.3294, 0.7765],

                                  ix: 4
                                },
                                r: 1,
                                o: {
                                  a: 0,
                                  k: 100,
                                  ix: 5
                                }
                              },
                              {
                                ty: "tr",
                                a: {
                                  a: 0,
                                  k: [0, 0],

                                  ix: 1
                                },
                                s: {
                                  a: 0,
                                  k: [100, 100],

                                  ix: 3
                                },
                                sk: {
                                  a: 0,
                                  k: 0,
                                  ix: 4
                                },
                                p: {
                                  a: 0,
                                  k: [-284, 92],

                                  ix: 2
                                },
                                r: {
                                  a: 0,
                                  k: 0,
                                  ix: 6
                                },
                                sa: {
                                  a: 0,
                                  k: 0,
                                  ix: 5
                                },
                                o: {
                                  a: 0,
                                  k: 100,
                                  ix: 7
                                }
                              }
                            ]
                          }
                        ],

                        ind: 4
                      }
                    ],

                    v: "5.7.11",
                    fr: 60,
                    op: 81,
                    ip: 0,
                    assets: []
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      nm: "Loading Dots",
                      ddd: 0,
                      h: 50,
                      w: 100,
                      meta: { g: "@lottiefiles/toolkit-js 0.33.2" },
                      layers: [
                        {
                          ty: 4,
                          nm: "Dot4",
                          sr: 1,
                          st: 0,
                          op: 360,
                          ip: 0,
                          hd: false,
                          ddd: 0,
                          bm: 0,
                          hasMask: false,
                          ao: 0,
                          ks: {
                            a: { a: 0, k: [-284, 92, 0], ix: 1 },
                            s: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [2.61, 2.32, 100],
                                  t: 25
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [3.91, 3.47, 100],
                                  t: 39
                                },
                                { s: [2.61, 2.32, 100], t: 55 }
                              ],
                              ix: 6
                            },
                            sk: { a: 0, k: 0 },
                            p: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [59.48, 25, 0],
                                  t: 25
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [59.48, 23.15, 0],
                                  t: 39
                                },
                                { s: [59.48, 25, 0], t: 55 }
                              ],
                              ix: 2
                            },
                            r: { a: 0, k: 0, ix: 10 },
                            sa: { a: 0, k: 0 },
                            o: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [25],
                                  t: 25
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [100],
                                  t: 39
                                },
                                { s: [25], t: 55 }
                              ],
                              ix: 11
                            }
                          },
                          ef: [],
                          shapes: [
                            {
                              ty: "gr",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Group",
                              nm: "Ellipse 1",
                              ix: 1,
                              cix: 2,
                              np: 3,
                              it: [
                                {
                                  ty: "el",
                                  bm: 0,
                                  hd: false,
                                  mn: "ADBE Vector Shape - Ellipse",
                                  nm: "Ellipse Path 1",
                                  d: 1,
                                  p: { a: 0, k: [0, 0], ix: 3 },
                                  s: { a: 0, k: [120, 120], ix: 2 }
                                },
                                {
                                  ty: "fl",
                                  bm: 0,
                                  hd: false,
                                  mn: "ADBE Vector Graphic - Fill",
                                  nm: "Fill 1",
                                  c: {
                                    a: 0,
                                    k: [0.5098, 0.3294, 0.7765],
                                    ix: 4
                                  },
                                  r: 1,
                                  o: { a: 0, k: 100, ix: 5 }
                                },
                                {
                                  ty: "tr",
                                  a: { a: 0, k: [0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100], ix: 3 },
                                  sk: { a: 0, k: 0, ix: 4 },
                                  p: { a: 0, k: [-284, 92], ix: 2 },
                                  r: { a: 0, k: 0, ix: 6 },
                                  sa: { a: 0, k: 0, ix: 5 },
                                  o: { a: 0, k: 100, ix: 7 }
                                }
                              ]
                            }
                          ],
                          ind: 1
                        },
                        {
                          ty: 4,
                          nm: "Dot3",
                          sr: 1,
                          st: 0,
                          op: 360,
                          ip: 0,
                          hd: false,
                          ddd: 0,
                          bm: 0,
                          hasMask: false,
                          ao: 0,
                          ks: {
                            a: { a: 0, k: [-284, 92, 0], ix: 1 },
                            s: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [2.61, 2.32, 100],
                                  t: 17
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [3.91, 3.47, 100],
                                  t: 31
                                },
                                { s: [2.61, 2.32, 100], t: 47 }
                              ],
                              ix: 6
                            },
                            sk: { a: 0, k: 0 },
                            p: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [53.23, 25, 0],
                                  t: 17
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [53.23, 23.15, 0],
                                  t: 31
                                },
                                { s: [53.23, 25, 0], t: 47 }
                              ],
                              ix: 2
                            },
                            r: { a: 0, k: 0, ix: 10 },
                            sa: { a: 0, k: 0 },
                            o: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [25],
                                  t: 17
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [100],
                                  t: 31
                                },
                                { s: [25], t: 47 }
                              ],
                              ix: 11
                            }
                          },
                          ef: [],
                          shapes: [
                            {
                              ty: "gr",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Group",
                              nm: "Ellipse 1",
                              ix: 1,
                              cix: 2,
                              np: 3,
                              it: [
                                {
                                  ty: "el",
                                  bm: 0,
                                  hd: false,
                                  mn: "ADBE Vector Shape - Ellipse",
                                  nm: "Ellipse Path 1",
                                  d: 1,
                                  p: { a: 0, k: [0, 0], ix: 3 },
                                  s: { a: 0, k: [120, 120], ix: 2 }
                                },
                                {
                                  ty: "fl",
                                  bm: 0,
                                  hd: false,
                                  mn: "ADBE Vector Graphic - Fill",
                                  nm: "Fill 1",
                                  c: {
                                    a: 0,
                                    k: [0.5098, 0.3294, 0.7765],
                                    ix: 4
                                  },
                                  r: 1,
                                  o: { a: 0, k: 100, ix: 5 }
                                },
                                {
                                  ty: "tr",
                                  a: { a: 0, k: [0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100], ix: 3 },
                                  sk: { a: 0, k: 0, ix: 4 },
                                  p: { a: 0, k: [-284, 92], ix: 2 },
                                  r: { a: 0, k: 0, ix: 6 },
                                  sa: { a: 0, k: 0, ix: 5 },
                                  o: { a: 0, k: 100, ix: 7 }
                                }
                              ]
                            }
                          ],
                          ind: 2
                        },
                        {
                          ty: 4,
                          nm: "Dot2",
                          sr: 1,
                          st: 0,
                          op: 360,
                          ip: 0,
                          hd: false,
                          ddd: 0,
                          bm: 0,
                          hasMask: false,
                          ao: 0,
                          ks: {
                            a: { a: 0, k: [-284, 92, 0], ix: 1 },
                            s: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [2.61, 2.32, 100],
                                  t: 9
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [3.91, 3.47, 100],
                                  t: 23
                                },
                                { s: [2.61, 2.32, 100], t: 39 }
                              ],
                              ix: 6
                            },
                            sk: { a: 0, k: 0 },
                            p: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [46.98, 25, 0],
                                  t: 9
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [46.98, 23.15, 0],
                                  t: 23
                                },
                                { s: [46.98, 25, 0], t: 39 }
                              ],
                              ix: 2
                            },
                            r: { a: 0, k: 0, ix: 10 },
                            sa: { a: 0, k: 0 },
                            o: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [25],
                                  t: 9
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [100],
                                  t: 23
                                },
                                { s: [25], t: 39 }
                              ],
                              ix: 11
                            }
                          },
                          ef: [],
                          shapes: [
                            {
                              ty: "gr",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Group",
                              nm: "Ellipse 1",
                              ix: 1,
                              cix: 2,
                              np: 3,
                              it: [
                                {
                                  ty: "el",
                                  bm: 0,
                                  hd: false,
                                  mn: "ADBE Vector Shape - Ellipse",
                                  nm: "Ellipse Path 1",
                                  d: 1,
                                  p: { a: 0, k: [0, 0], ix: 3 },
                                  s: { a: 0, k: [120, 120], ix: 2 }
                                },
                                {
                                  ty: "fl",
                                  bm: 0,
                                  hd: false,
                                  mn: "ADBE Vector Graphic - Fill",
                                  nm: "Fill 1",
                                  c: {
                                    a: 0,
                                    k: [0.5098, 0.3294, 0.7765],
                                    ix: 4
                                  },
                                  r: 1,
                                  o: { a: 0, k: 100, ix: 5 }
                                },
                                {
                                  ty: "tr",
                                  a: { a: 0, k: [0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100], ix: 3 },
                                  sk: { a: 0, k: 0, ix: 4 },
                                  p: { a: 0, k: [-284, 92], ix: 2 },
                                  r: { a: 0, k: 0, ix: 6 },
                                  sa: { a: 0, k: 0, ix: 5 },
                                  o: { a: 0, k: 100, ix: 7 }
                                }
                              ]
                            }
                          ],
                          ind: 3
                        },
                        {
                          ty: 4,
                          nm: "Dot1",
                          sr: 1,
                          st: 0,
                          op: 360,
                          ip: 0,
                          hd: false,
                          ddd: 0,
                          bm: 0,
                          hasMask: false,
                          ao: 0,
                          ks: {
                            a: { a: 0, k: [-284, 92, 0], ix: 1 },
                            s: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [2.61, 2.32, 100],
                                  t: 0
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [3.91, 3.47, 100],
                                  t: 14
                                },
                                { s: [2.61, 2.32, 100], t: 30 }
                              ],
                              ix: 6
                            },
                            sk: { a: 0, k: 0 },
                            p: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [40.73, 25, 0],
                                  t: 0
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [40.73, 23.15, 0],
                                  t: 14
                                },
                                { s: [40.73, 25, 0], t: 30 }
                              ],
                              ix: 2
                            },
                            r: { a: 0, k: 0, ix: 10 },
                            sa: { a: 0, k: 0 },
                            o: {
                              a: 1,
                              k: [
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [25],
                                  t: 0
                                },
                                {
                                  o: { x: 0.333, y: 0 },
                                  i: { x: 0.667, y: 1 },
                                  s: [100],
                                  t: 14
                                },
                                { s: [25], t: 30 }
                              ],
                              ix: 11
                            }
                          },
                          ef: [],
                          shapes: [
                            {
                              ty: "gr",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Group",
                              nm: "Ellipse 1",
                              ix: 1,
                              cix: 2,
                              np: 3,
                              it: [
                                {
                                  ty: "el",
                                  bm: 0,
                                  hd: false,
                                  mn: "ADBE Vector Shape - Ellipse",
                                  nm: "Ellipse Path 1",
                                  d: 1,
                                  p: { a: 0, k: [0, 0], ix: 3 },
                                  s: { a: 0, k: [120, 120], ix: 2 }
                                },
                                {
                                  ty: "fl",
                                  bm: 0,
                                  hd: false,
                                  mn: "ADBE Vector Graphic - Fill",
                                  nm: "Fill 1",
                                  c: {
                                    a: 0,
                                    k: [0.5098, 0.3294, 0.7765],
                                    ix: 4
                                  },
                                  r: 1,
                                  o: { a: 0, k: 100, ix: 5 }
                                },
                                {
                                  ty: "tr",
                                  a: { a: 0, k: [0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100], ix: 3 },
                                  sk: { a: 0, k: 0, ix: 4 },
                                  p: { a: 0, k: [-284, 92], ix: 2 },
                                  r: { a: 0, k: 0, ix: 6 },
                                  sa: { a: 0, k: 0, ix: 5 },
                                  o: { a: 0, k: 100, ix: 7 }
                                }
                              ]
                            }
                          ],
                          ind: 4
                        }
                      ],
                      v: "5.7.11",
                      fr: 60,
                      op: 81,
                      ip: 0,
                      assets: []
                    };
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.lottie)}
            />
          </div>
        </div>
      ) : null}
      <ApiRequest
        data-plasmic-name={"getUserInfo"}
        data-plasmic-override={overrides.getUserInfo}
        className={classNames("__wab_instance", sty.getUserInfo)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__pwY0R
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <div className={classNames(projectcss.all, sty.freeBox__bzUdq)}>
            <div className={classNames(projectcss.all, sty.freeBox__cD1Xw)}>
              <div className={classNames(projectcss.all, sty.freeBox___4T5R)}>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__dmXxO,
                    "shimmer"
                  )}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__smM4R,
                    "shimmer"
                  )}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__kLkS6)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return [1, 2, 3, 4, 5];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nutSr)}
                      key={currentIndex}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yE5Q,
                          "shimmer"
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__r5Zzw
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return [1, 2, 3, 4, 5, 6];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_1, __plasmic_idx_1) => {
                          const currentItem = __plasmic_item_1;
                          const currentIndex = __plasmic_idx_1;
                          return (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___9IMj
                              )}
                              key={currentIndex}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__kjAws,
                                  "shimmer"
                                )}
                              />
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["getUserInfo", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["getUserInfo", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["getUserInfo", "data"]).apply(
            null,
            eventArgs
          );

          (async data => {
            const $steps = {};
          }).apply(null, eventArgs);
        }}
        params={(() => {
          try {
            return { token: $props.token };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        shouldFetch={true}
        url={"https://n8n.staas.ir/webhook/userInfo_v2"}
      >
        <div className={classNames(projectcss.all, sty.freeBox__n8BaS)}>
          <div className={classNames(projectcss.all, sty.freeBox__djpR)}>
            <div className={classNames(projectcss.all, sty.freeBox__vZrTl)}>
              <div className={classNames(projectcss.all, sty.freeBox__gnQiY)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.sub2.subscription_features.services.length >
                        0
                        ? $state.sub2.subscription_features.services
                        : [];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <TabWidget
                      data-plasmic-name={"tabWidget"}
                      data-plasmic-override={overrides.tabWidget}
                      className={classNames("__wab_instance", sty.tabWidget)}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateIndex"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["index"]
                                },
                                operation: 0,
                                value: currentIndex
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateIndex"] != null &&
                          typeof $steps["updateIndex"] === "object" &&
                          typeof $steps["updateIndex"].then === "function"
                        ) {
                          $steps["updateIndex"] = await $steps["updateIndex"];
                        }
                      }}
                      selected={(() => {
                        try {
                          return $state.index == currentIndex;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      title={(() => {
                        try {
                          return currentItem.category;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  );
                })}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qnb4X
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateIndex"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["index"]
                            },
                            operation: 0,
                            value: 0
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateIndex"] != null &&
                      typeof $steps["updateIndex"] === "object" &&
                      typeof $steps["updateIndex"].then === "function"
                    ) {
                      $steps["updateIndex"] = await $steps["updateIndex"];
                    }
                  }}
                  style={(() => {
                    try {
                      return {
                        "background-color":
                          $state.index == 0
                            ? "var(--plasmic-token-primary)"
                            : "#00000000",
                        color: $state.index == 0 ? "#ffffff" : "#535353"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  {"\u0645\u0627\u062f\u0631"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hj9D
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateIndex"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["index"]
                            },
                            operation: 0,
                            value: 1
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateIndex"] != null &&
                      typeof $steps["updateIndex"] === "object" &&
                      typeof $steps["updateIndex"].then === "function"
                    ) {
                      $steps["updateIndex"] = await $steps["updateIndex"];
                    }
                  }}
                  style={(() => {
                    try {
                      return {
                        "background-color":
                          $state.index == 1
                            ? "var(--plasmic-token-primary)"
                            : "#00000000",
                        color: $state.index == 1 ? "#ffffff" : "#535353"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  {"\u0641\u0631\u0632\u0646\u062f"}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__e95J2)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.sub2.subscription_features.services[
                      $state.index
                    ].items.length > 0
                      ? $state.sub2.subscription_features.services[$state.index]
                          .items
                      : [];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gKw8B)}
                    key={currentIndex}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wPzap
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vxmTb)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return currentItem.items.length > 0
                              ? currentItem.items
                              : [];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_1, __plasmic_idx_1) => {
                        const currentItem = __plasmic_item_1;
                        const currentIndex = __plasmic_idx_1;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__tk15X
                            )}
                            key={currentIndex}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateLoading"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["loading"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateLoading"] != null &&
                                typeof $steps["updateLoading"] === "object" &&
                                typeof $steps["updateLoading"].then ===
                                  "function"
                              ) {
                                $steps["updateLoading"] =
                                  await $steps["updateLoading"];
                              }

                              $steps["invokeGlobalAction"] = (() => {
                                const allowance =
                                  $state?.getUserInfo?.data?.[0]?.result
                                    ?.allowance || [];
                                const filteredItem = allowance.find(item =>
                                  item.type.includes(currentItem.shopType)
                                );
                                const active = filteredItem
                                  ? filteredItem.active
                                  : false;
                                return active || currentItem.shopType == "";
                              })()
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        (() => {
                                          try {
                                            return currentItem.action;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })(),
                                        (() => {
                                          try {
                                            return $props.token;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })(),
                                        (() => {
                                          try {
                                            return $state.paramsObject.userId;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })(),
                                        (() => {
                                          try {
                                            return $props.inApp;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })(),
                                        (() => {
                                          try {
                                            return $props.theme;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })(),
                                        undefined,
                                        (() => {
                                          try {
                                            return (() => {
                                              if (
                                                currentItem.action == "#selfSms"
                                              ) {
                                                return { status: "pregnancy" };
                                              } else {
                                                return {
                                                  origin: "liomSelfCare"
                                                };
                                              }
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.deepLink"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] =
                                  await $steps["invokeGlobalAction"];
                              }

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          const allowance =
                                            $state?.getUserInfo?.data?.[0]
                                              ?.result?.allowance || [];
                                          const filteredItem = allowance.find(
                                            item =>
                                              item.type.includes(
                                                currentItem.shopType
                                              )
                                          );
                                          const active = filteredItem
                                            ? filteredItem.active
                                            : false;
                                          if (
                                            !active &&
                                            currentItem.shopType != ""
                                          ) {
                                            $state.loading = false;
                                            if ($props.inApp != "true") {
                                              $state.typeBuy = "pregnancySub";
                                              return ($state.directDialog2.open = true);
                                            } else {
                                              return window.FlutterChannel.postMessage(
                                                "#healthSubscription"
                                              );
                                            }
                                          }
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }}
                            style={(() => {
                              try {
                                return {
                                  "background-color": "#ffffff" //currentItem.color
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <PlasmicImg__
                              data-plasmic-name={"img"}
                              data-plasmic-override={overrides.img}
                              alt={""}
                              className={classNames(sty.img)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={currentItem.icon}
                              width={"30"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pqhTg
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.text;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </ApiRequest>
      <DirectDialog2
        data-plasmic-name={"directDialog2"}
        data-plasmic-override={overrides.directDialog2}
        className={classNames("__wab_instance", sty.directDialog2)}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["directDialog2", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onSelectShopChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "directDialog2",
            "selectShop"
          ]).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["directDialog2", "open"])}
        redirectUrl={(() => {
          try {
            return `https://tools.liom.app/shopResult?buyId=${$state.directDialog2.selectShop.id}&?offCode=&token=${$props.token}&redirectUrl=${encodeURIComponent(window.location.href)}`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        token={(() => {
          try {
            return $props.token;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        type={(() => {
          try {
            return $state.typeBuy;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "lottie", "getUserInfo", "tabWidget", "img", "directDialog2"],
  lottie: ["lottie"],
  getUserInfo: ["getUserInfo", "tabWidget", "img"],
  tabWidget: ["tabWidget"],
  img: ["img"],
  directDialog2: ["directDialog2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  lottie: typeof LottieWrapper;
  getUserInfo: typeof ApiRequest;
  tabWidget: typeof TabWidget;
  img: typeof PlasmicImg__;
  directDialog2: typeof DirectDialog2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicToolsComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicToolsComponent__VariantsArgs;
    args?: PlasmicToolsComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicToolsComponent__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicToolsComponent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicToolsComponent__ArgProps,
          internalVariantPropNames: PlasmicToolsComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicToolsComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicToolsComponent";
  } else {
    func.displayName = `PlasmicToolsComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicToolsComponent = Object.assign(
  // Top-level PlasmicToolsComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    lottie: makeNodeComponent("lottie"),
    getUserInfo: makeNodeComponent("getUserInfo"),
    tabWidget: makeNodeComponent("tabWidget"),
    img: makeNodeComponent("img"),
    directDialog2: makeNodeComponent("directDialog2"),

    // Metadata about props expected for PlasmicToolsComponent
    internalVariantProps: PlasmicToolsComponent__VariantProps,
    internalArgProps: PlasmicToolsComponent__ArgProps
  }
);

export default PlasmicToolsComponent;
/* prettier-ignore-end */
