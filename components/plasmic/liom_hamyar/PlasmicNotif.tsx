/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: IXmGfNM_xVW3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TabPage from "../../TabPage"; // plasmic-import: YjjiCvkREMP5/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicNotif.module.css"; // plasmic-import: IXmGfNM_xVW3/css

createPlasmicElementProxy;

export type PlasmicNotif__VariantMembers = {
  page: "reports" | "tabPage" | "notifs";
};
export type PlasmicNotif__VariantsArgs = {
  page?: SingleChoiceArg<"reports" | "tabPage" | "notifs">;
};
type VariantPropType = keyof PlasmicNotif__VariantsArgs;
export const PlasmicNotif__VariantProps = new Array<VariantPropType>("page");

export type PlasmicNotif__ArgsType = {};
type ArgPropType = keyof PlasmicNotif__ArgsType;
export const PlasmicNotif__ArgProps = new Array<ArgPropType>();

export type PlasmicNotif__OverridesType = {
  tabPage?: Flex__<typeof TabPage>;
};

export interface DefaultNotifProps {
  page?: SingleChoiceArg<"reports" | "tabPage" | "notifs">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNotif__RenderFunc(props: {
  variants: PlasmicNotif__VariantsArgs;
  args: PlasmicNotif__ArgsType;
  overrides: PlasmicNotif__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "page",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.page
      },
      {
        path: "tabPage.reportsSelect",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "tabPage.selectedTab",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "tabPage.tabList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647 \u0647\u0645\u0633\u0631",
            type: "husband-sms"
          },
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647 \u062e\u0648\u062f",
            type: "self-sms"
          },
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0633\u0631\u0637\u0627\u0646 \u0633\u06cc\u0646\u0647",
            type: "breast-canser-sms"
          },
          {
            title:
              "\u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647 \u0645\u0627\u062f\u0631",
            type: "mather-sms"
          },
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0622\u0642\u0627\u06cc\u0627\u0646",
            type: "husband-sub"
          },
          {
            title:
              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u062a\u0648\u0635\u06cc\u0647 \u0647\u0627",
            type: "special-advice"
          }
        ]
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <TabPage
      data-plasmic-name={"tabPage"}
      data-plasmic-override={overrides.tabPage}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.tabPage, {
        [sty.tabPagepage_tabPage]: hasVariant($state, "page", "tabPage")
      })}
      onReportsSelectChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["tabPage", "reportsSelect"]).apply(
          null,
          eventArgs
        );

        if (
          eventArgs.length > 1 &&
          eventArgs[1] &&
          eventArgs[1]._plasmic_state_init_
        ) {
          return;
        }
      }}
      onSelectedTabChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["tabPage", "selectedTab"]).apply(
          null,
          eventArgs
        );

        if (
          eventArgs.length > 1 &&
          eventArgs[1] &&
          eventArgs[1]._plasmic_state_init_
        ) {
          return;
        }
      }}
      onTabListChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["tabPage", "tabList"]).apply(
          null,
          eventArgs
        );

        if (
          eventArgs.length > 1 &&
          eventArgs[1] &&
          eventArgs[1]._plasmic_state_init_
        ) {
          return;
        }
      }}
      reportsSelect={generateStateValueProp($state, [
        "tabPage",
        "reportsSelect"
      ])}
      selectedTab={generateStateValueProp($state, ["tabPage", "selectedTab"])}
      tabList={generateStateValueProp($state, ["tabPage", "tabList"])}
    />
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  tabPage: ["tabPage"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  tabPage: typeof TabPage;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNotif__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNotif__VariantsArgs;
    args?: PlasmicNotif__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNotif__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNotif__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNotif__ArgProps,
          internalVariantPropNames: PlasmicNotif__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNotif__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "tabPage") {
    func.displayName = "PlasmicNotif";
  } else {
    func.displayName = `PlasmicNotif.${nodeName}`;
  }
  return func;
}

export const PlasmicNotif = Object.assign(
  // Top-level PlasmicNotif renders the root element
  makeNodeComponent("tabPage"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicNotif
    internalVariantProps: PlasmicNotif__VariantProps,
    internalArgProps: PlasmicNotif__ArgProps
  }
);

export default PlasmicNotif;
/* prettier-ignore-end */
