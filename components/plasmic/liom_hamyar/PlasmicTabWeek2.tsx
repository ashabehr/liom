/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: -tuOknPDFuNb

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicTabWeek2.module.css"; // plasmic-import: -tuOknPDFuNb/css

createPlasmicElementProxy;

export type PlasmicTabWeek2__VariantMembers = {
  selected: "selected";
  dark: "dark";
  darkSelected: "darkSelected";
  currentWeek: "currentWeek";
  haveData: "haveData";
  color: "_null" | "red" | "yellow" | "pms";
  startend: "start" | "end";
  size: "small";
  report: "report";
};
export type PlasmicTabWeek2__VariantsArgs = {
  selected?: SingleBooleanChoiceArg<"selected">;
  dark?: SingleBooleanChoiceArg<"dark">;
  darkSelected?: SingleBooleanChoiceArg<"darkSelected">;
  currentWeek?: SingleBooleanChoiceArg<"currentWeek">;
  haveData?: SingleBooleanChoiceArg<"haveData">;
  color?: SingleChoiceArg<"_null" | "red" | "yellow" | "pms">;
  startend?: SingleChoiceArg<"start" | "end">;
  size?: SingleChoiceArg<"small">;
  report?: SingleBooleanChoiceArg<"report">;
};
type VariantPropType = keyof PlasmicTabWeek2__VariantsArgs;
export const PlasmicTabWeek2__VariantProps = new Array<VariantPropType>(
  "selected",
  "dark",
  "darkSelected",
  "currentWeek",
  "haveData",
  "color",
  "startend",
  "size",
  "report"
);

export type PlasmicTabWeek2__ArgsType = {
  currentItem?: any;
  onClick?: (event: any) => void;
  slot?: React.ReactNode;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicTabWeek2__ArgsType;
export const PlasmicTabWeek2__ArgProps = new Array<ArgPropType>(
  "currentItem",
  "onClick",
  "slot",
  "children"
);

export type PlasmicTabWeek2__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultTabWeek2Props {
  currentItem?: any;
  onClick?: (event: any) => void;
  slot?: React.ReactNode;
  children?: React.ReactNode;
  selected?: SingleBooleanChoiceArg<"selected">;
  dark?: SingleBooleanChoiceArg<"dark">;
  darkSelected?: SingleBooleanChoiceArg<"darkSelected">;
  currentWeek?: SingleBooleanChoiceArg<"currentWeek">;
  haveData?: SingleBooleanChoiceArg<"haveData">;
  color?: SingleChoiceArg<"_null" | "red" | "yellow" | "pms">;
  startend?: SingleChoiceArg<"start" | "end">;
  size?: SingleChoiceArg<"small">;
  report?: SingleBooleanChoiceArg<"report">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTabWeek2__RenderFunc(props: {
  variants: PlasmicTabWeek2__VariantsArgs;
  args: PlasmicTabWeek2__ArgsType;
  overrides: PlasmicTabWeek2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.selected
      },
      {
        path: "dark",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.dark
      },
      {
        path: "darkSelected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.darkSelected
      },
      {
        path: "currentWeek",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.currentWeek
      },
      {
        path: "haveData",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.haveData
      },
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      },
      {
        path: "startend",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.startend
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "report",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.report
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootcolor_pms]: hasVariant($state, "color", "pms"),
          [sty.rootcolor_red]: hasVariant($state, "color", "red"),
          [sty.rootcolor_yellow]: hasVariant($state, "color", "yellow"),
          [sty.rootcurrentWeek]: hasVariant(
            $state,
            "currentWeek",
            "currentWeek"
          ),
          [sty.rootcurrentWeek_selected]:
            hasVariant($state, "selected", "selected") &&
            hasVariant($state, "currentWeek", "currentWeek"),
          [sty.rootdarkSelected]: hasVariant(
            $state,
            "darkSelected",
            "darkSelected"
          ),
          [sty.rootdark]: hasVariant($state, "dark", "dark"),
          [sty.roothaveData]: hasVariant($state, "haveData", "haveData"),
          [sty.rootreport]: hasVariant($state, "report", "report"),
          [sty.rootreport_selected]:
            hasVariant($state, "report", "report") &&
            hasVariant($state, "selected", "selected"),
          [sty.rootselected]: hasVariant($state, "selected", "selected"),
          [sty.rootsize_small]: hasVariant($state, "size", "small")
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__zg8Bk, {
          [sty.freeBoxcolor_yellow__zg8Bk2Ss7K]: hasVariant(
            $state,
            "color",
            "yellow"
          ),
          [sty.freeBoxreport__zg8Bk7KnbM]: hasVariant(
            $state,
            "report",
            "report"
          ),
          [sty.freeBoxsize_small__zg8BKyQij9]: hasVariant(
            $state,
            "size",
            "small"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: "Enter some text",
          value: args.slot,
          className: classNames(sty.slotTargetSlot, {
            [sty.slotTargetSlotcolor_pms]: hasVariant($state, "color", "pms"),
            [sty.slotTargetSlotcolor_red]: hasVariant($state, "color", "red"),
            [sty.slotTargetSlotcolor_yellow]: hasVariant(
              $state,
              "color",
              "yellow"
            ),
            [sty.slotTargetSlotsize_small]: hasVariant($state, "size", "small"),
            [sty.slotTargetSlotstartend_start]: hasVariant(
              $state,
              "startend",
              "start"
            )
          })
        })}
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__cxVuc, {
          [sty.freeBoxcolor_pms__cxVuckTqgi]: hasVariant(
            $state,
            "color",
            "pms"
          ),
          [sty.freeBoxcolor_red__cxVuc5ZDul]: hasVariant(
            $state,
            "color",
            "red"
          ),
          [sty.freeBoxcolor_red_selected__cxVuc5ZDulBlp4]:
            hasVariant($state, "selected", "selected") &&
            hasVariant($state, "color", "red"),
          [sty.freeBoxcolor_yellow__cxVuc2Ss7K]: hasVariant(
            $state,
            "color",
            "yellow"
          ),
          [sty.freeBoxcurrentWeek__cxVucMNoLj]: hasVariant(
            $state,
            "currentWeek",
            "currentWeek"
          ),
          [sty.freeBoxcurrentWeek_darkSelected__cxVucMNoLjKEYvD]:
            hasVariant($state, "currentWeek", "currentWeek") &&
            hasVariant($state, "darkSelected", "darkSelected"),
          [sty.freeBoxcurrentWeek_selected__cxVucMNoLjBlp4]:
            hasVariant($state, "currentWeek", "currentWeek") &&
            hasVariant($state, "selected", "selected"),
          [sty.freeBoxdarkSelected__cxVuckEYvD]: hasVariant(
            $state,
            "darkSelected",
            "darkSelected"
          ),
          [sty.freeBoxhaveData__cxVucDmqlu]: hasVariant(
            $state,
            "haveData",
            "haveData"
          ),
          [sty.freeBoxhaveData_currentWeek__cxVucDmqluMNoLj]:
            hasVariant($state, "currentWeek", "currentWeek") &&
            hasVariant($state, "haveData", "haveData"),
          [sty.freeBoxhaveData_darkSelected__cxVucDmqluKEYvD]:
            hasVariant($state, "haveData", "haveData") &&
            hasVariant($state, "darkSelected", "darkSelected"),
          [sty.freeBoxreport__cxVuc7KnbM]: hasVariant(
            $state,
            "report",
            "report"
          ),
          [sty.freeBoxreport_selected__cxVuc7KnbMBlp4]:
            hasVariant($state, "report", "report") &&
            hasVariant($state, "selected", "selected"),
          [sty.freeBoxselected__cxVucBlp4]: hasVariant(
            $state,
            "selected",
            "selected"
          ),
          [sty.freeBoxselected_darkSelected__cxVucBlp4KEYvD]:
            hasVariant($state, "selected", "selected") &&
            hasVariant($state, "darkSelected", "darkSelected"),
          [sty.freeBoxselected_darkSelected_dark__cxVucBlp4KEYvDWBfVe]:
            hasVariant($state, "selected", "selected") &&
            hasVariant($state, "dark", "dark") &&
            hasVariant($state, "darkSelected", "darkSelected"),
          [sty.freeBoxselected_dark__cxVucBlp4WBfVe]:
            hasVariant($state, "selected", "selected") &&
            hasVariant($state, "dark", "dark"),
          [sty.freeBoxsize_small__cxVucyQij9]: hasVariant(
            $state,
            "size",
            "small"
          ),
          [sty.freeBoxstartend_end__cxVuc8Tetb]: hasVariant(
            $state,
            "startend",
            "end"
          ),
          [sty.freeBoxstartend_start__cxVucsuJr1]: hasVariant(
            $state,
            "startend",
            "start"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__z7MRq, {
            [sty.freeBoxcolor_pms__z7MRqkTqgi]: hasVariant(
              $state,
              "color",
              "pms"
            ),
            [sty.freeBoxcolor_red__z7MRq5ZDul]: hasVariant(
              $state,
              "color",
              "red"
            ),
            [sty.freeBoxcolor_red_selected__z7MRq5ZDulBlp4]:
              hasVariant($state, "selected", "selected") &&
              hasVariant($state, "color", "red"),
            [sty.freeBoxcolor_yellow__z7MRq2Ss7K]: hasVariant(
              $state,
              "color",
              "yellow"
            ),
            [sty.freeBoxcolor_yellow_selected__z7MRq2Ss7KBlp4]:
              hasVariant($state, "selected", "selected") &&
              hasVariant($state, "color", "yellow"),
            [sty.freeBoxcurrentWeek__z7MRqMNoLj]: hasVariant(
              $state,
              "currentWeek",
              "currentWeek"
            ),
            [sty.freeBoxcurrentWeek_selected__z7MRqMNoLjBlp4]:
              hasVariant($state, "selected", "selected") &&
              hasVariant($state, "currentWeek", "currentWeek"),
            [sty.freeBoxdarkSelected__z7MRqkEYvD]: hasVariant(
              $state,
              "darkSelected",
              "darkSelected"
            ),
            [sty.freeBoxdark__z7MRqwBfVe]: hasVariant($state, "dark", "dark"),
            [sty.freeBoxhaveData__z7MRqDmqlu]: hasVariant(
              $state,
              "haveData",
              "haveData"
            ),
            [sty.freeBoxreport__z7MRq7KnbM]: hasVariant(
              $state,
              "report",
              "report"
            ),
            [sty.freeBoxreport_selected__z7MRq7KnbMBlp4]:
              hasVariant($state, "report", "report") &&
              hasVariant($state, "selected", "selected"),
            [sty.freeBoxselected__z7MRqBlp4]: hasVariant(
              $state,
              "selected",
              "selected"
            ),
            [sty.freeBoxselected_color_pms__z7MRqBlp4KTqgi]:
              hasVariant($state, "selected", "selected") &&
              hasVariant($state, "color", "pms"),
            [sty.freeBoxsize_small__z7MRqyQij9]: hasVariant(
              $state,
              "size",
              "small"
            ),
            [sty.freeBoxstartend_end__z7MRq8Tetb]: hasVariant(
              $state,
              "startend",
              "end"
            ),
            [sty.freeBoxstartend_start__z7MRqsuJr1]: hasVariant(
              $state,
              "startend",
              "start"
            )
          })}
          onClick={args.onClick}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__gJiGf,
              {
                [sty.textcolor_red__gJiGf5ZDul]: hasVariant(
                  $state,
                  "color",
                  "red"
                ),
                [sty.textcolor_yellow__gJiGf2Ss7K]: hasVariant(
                  $state,
                  "color",
                  "yellow"
                ),
                [sty.textcolor_yellow_selected__gJiGf2Ss7KBlp4]:
                  hasVariant($state, "selected", "selected") &&
                  hasVariant($state, "color", "yellow"),
                [sty.textdarkSelected__gJiGfkEYvD]: hasVariant(
                  $state,
                  "darkSelected",
                  "darkSelected"
                ),
                [sty.textdark__gJiGfwBfVe]: hasVariant($state, "dark", "dark"),
                [sty.textreport__gJiGf7KnbM]: hasVariant(
                  $state,
                  "report",
                  "report"
                ),
                [sty.textreport_selected__gJiGf7KnbMBlp4]:
                  hasVariant($state, "report", "report") &&
                  hasVariant($state, "selected", "selected"),
                [sty.textselected__gJiGfBlp4]: hasVariant(
                  $state,
                  "selected",
                  "selected"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.currentItem;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__xlwI1, {
              [sty.freeBoxcurrentWeek__xlwI1MNoLj]: hasVariant(
                $state,
                "currentWeek",
                "currentWeek"
              ),
              [sty.freeBoxdarkSelected__xlwI1KEYvD]: hasVariant(
                $state,
                "darkSelected",
                "darkSelected"
              ),
              [sty.freeBoxdark__xlwI1WBfVe]: hasVariant($state, "dark", "dark"),
              [sty.freeBoxreport__xlwI17KnbM]: hasVariant(
                $state,
                "report",
                "report"
              ),
              [sty.freeBoxreport_selected__xlwI17KnbMBlp4]:
                hasVariant($state, "report", "report") &&
                hasVariant($state, "selected", "selected"),
              [sty.freeBoxselected__xlwI1Blp4]: hasVariant(
                $state,
                "selected",
                "selected"
              ),
              [sty.freeBoxsize_small__xlwI1YQij9]: hasVariant(
                $state,
                "size",
                "small"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: "\u0647\u0641\u062a\u0647",
              value: args.children,
              className: classNames(sty.slotTargetChildren, {
                [sty.slotTargetChildrencolor_pms]: hasVariant(
                  $state,
                  "color",
                  "pms"
                ),
                [sty.slotTargetChildrencolor_red]: hasVariant(
                  $state,
                  "color",
                  "red"
                ),
                [sty.slotTargetChildrencolor_red_selected]:
                  hasVariant($state, "selected", "selected") &&
                  hasVariant($state, "color", "red"),
                [sty.slotTargetChildrencolor_yellow]: hasVariant(
                  $state,
                  "color",
                  "yellow"
                ),
                [sty.slotTargetChildrencolor_yellow_selected]:
                  hasVariant($state, "selected", "selected") &&
                  hasVariant($state, "color", "yellow"),
                [sty.slotTargetChildrendarkSelected]: hasVariant(
                  $state,
                  "darkSelected",
                  "darkSelected"
                ),
                [sty.slotTargetChildrendark]: hasVariant(
                  $state,
                  "dark",
                  "dark"
                ),
                [sty.slotTargetChildrenselected]: hasVariant(
                  $state,
                  "selected",
                  "selected"
                ),
                [sty.slotTargetChildrensize_small]: hasVariant(
                  $state,
                  "size",
                  "small"
                ),
                [sty.slotTargetChildrenstartend_start]: hasVariant(
                  $state,
                  "startend",
                  "start"
                )
              })
            })}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oQsdd,
                {
                  [sty.textcurrentWeek__oQsddMNoLj]: hasVariant(
                    $state,
                    "currentWeek",
                    "currentWeek"
                  )
                }
              )}
            >
              {"\u0627\u0645\u0631\u0648\u0632"}
            </div>
          </div>
          {(hasVariant($state, "haveData", "haveData") ? true : false) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__bK0Ni, {
                [sty.freeBoxhaveData__bK0NiDmqlu]: hasVariant(
                  $state,
                  "haveData",
                  "haveData"
                )
              })}
            />
          ) : null}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTabWeek2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTabWeek2__VariantsArgs;
    args?: PlasmicTabWeek2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicTabWeek2__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicTabWeek2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTabWeek2__ArgProps,
          internalVariantPropNames: PlasmicTabWeek2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTabWeek2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTabWeek2";
  } else {
    func.displayName = `PlasmicTabWeek2.${nodeName}`;
  }
  return func;
}

export const PlasmicTabWeek2 = Object.assign(
  // Top-level PlasmicTabWeek2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicTabWeek2
    internalVariantProps: PlasmicTabWeek2__VariantProps,
    internalArgProps: PlasmicTabWeek2__ArgProps
  }
);

export default PlasmicTabWeek2;
/* prettier-ignore-end */
