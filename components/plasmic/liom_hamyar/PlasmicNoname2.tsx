/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: p_QOiZPj_xQe

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import TextInput from "../../TextInput"; // plasmic-import: cOSV4CnhD7mN/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicNoname2.module.css"; // plasmic-import: p_QOiZPj_xQe/css

import Icon132Icon from "./icons/PlasmicIcon__Icon132"; // plasmic-import: Ek3fk3jhKgEh/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: Hrcd2gLhG27X/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicNoname2__VariantMembers = {};
export type PlasmicNoname2__VariantsArgs = {};
type VariantPropType = keyof PlasmicNoname2__VariantsArgs;
export const PlasmicNoname2__VariantProps = new Array<VariantPropType>();

export type PlasmicNoname2__ArgsType = {};
type ArgPropType = keyof PlasmicNoname2__ArgsType;
export const PlasmicNoname2__ArgProps = new Array<ArgPropType>();

export type PlasmicNoname2__OverridesType = {
  root?: Flex__<"div">;
  halamanUtama?: Flex__<"div">;
  textInput7?: Flex__<typeof TextInput>;
  antdInput7?: Flex__<typeof Input>;
  textInput9?: Flex__<typeof TextInput>;
  antdInput9?: Flex__<typeof Input>;
  textInput8?: Flex__<typeof TextInput>;
  antdInput8?: Flex__<typeof Input>;
  section?: Flex__<"section">;
  img?: Flex__<typeof PlasmicImg__>;
  button?: Flex__<typeof Button>;
};

export interface DefaultNoname2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNoname2__RenderFunc(props: {
  variants: PlasmicNoname2__VariantsArgs;
  args: PlasmicNoname2__ArgsType;
  overrides: PlasmicNoname2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "abjad",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          "\u0627": 1,
          "\u0628": 2,
          "\u062c": 3,
          "\u062f": 4,
          "\u0647": 5,
          "\u0648": 6,
          "\u0632": 7,
          "\u062d": 8,
          "\u0637": 9,
          "\u06cc": 10,
          "\u06a9": 20,
          "\u0644": 30,
          "\u0645": 40,
          "\u0646": 50,
          "\u0633": 60,
          "\u0639": 70,
          "\u0641": 80,
          "\u0635": 90,
          "\u0642": 100,
          "\u0631": 200,
          "\u0634": 300,
          "\u062a": 400,
          "\u062b": 500,
          "\u062e": 600,
          "\u0630": 700,
          "\u0636": 800,
          "\u0638": 900,
          "\u063a": 1000,
          "\u06af": 20,
          "\u0686": 3,
          "\u067e": 80,
          "\u0698": 7
        })
      },
      {
        path: "textInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "textInput8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "textInput9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "scors",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"halamanUtama"}
            data-plasmic-override={overrides.halamanUtama}
            className={classNames(projectcss.all, sty.halamanUtama)}
          >
            <Icon132Icon
              className={classNames(projectcss.all, sty.svg__c8Tac)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qYbGf
              )}
            >
              {
                "\u062a\u06a9\u0645\u06cc\u0644 \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
              }
            </div>
            <TextInput
              data-plasmic-name={"textInput7"}
              data-plasmic-override={overrides.textInput7}
              antdInput2={(() => {
                const child$Props = {
                  "aria-label": ``,
                  bordered: false,
                  className: classNames("__wab_instance", sty.antdInput7),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["antdInput7", "value"],
                      Input_Helpers
                    ).apply(null, eventArgs);

                    (async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  var score = 0;
                                  for (let char of $state.antdInput7.value) {
                                    if ($state.abjad[char]) {
                                      score += $state.abjad[char];
                                    }
                                  }
                                  return ($state.scors[0] = score);
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }).apply(null, eventArgs);
                  },
                  placeholder: "\u0646\u0627\u0645",
                  size: "large",
                  type: "text",
                  value: generateStateValueProp($state, ["antdInput7", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "antdInput7.value"
                    }
                  ],
                  [],
                  Input_Helpers ?? {},
                  child$Props
                );

                return (
                  <Input
                    data-plasmic-name={"antdInput7"}
                    data-plasmic-override={overrides.antdInput7}
                    {...child$Props}
                  />
                );
              })()}
              className={classNames("__wab_instance", sty.textInput7)}
              endIcon={
                <div
                  className={classNames(projectcss.all, sty.freeBox___08Kdq)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aBsxn
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.scors[0];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "0";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              }
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput7", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }

                (async event => {
                  const $steps = {};
                }).apply(null, eventArgs);
              }}
              placeholder={"\u0646\u0627\u0645"}
              showEndIcon={true}
              startIcon={
                <SearchSvgIcon
                  className={classNames(projectcss.all, sty.svg__z2EhS)}
                  role={"img"}
                />
              }
              type={"text"}
              value={
                generateStateValueProp($state, ["textInput7", "value"]) ?? ""
              }
            />

            <TextInput
              data-plasmic-name={"textInput9"}
              data-plasmic-override={overrides.textInput9}
              antdInput2={(() => {
                const child$Props = {
                  "aria-label": ``,
                  bordered: false,
                  className: classNames("__wab_instance", sty.antdInput9),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["antdInput9", "value"],
                      Input_Helpers
                    ).apply(null, eventArgs);

                    (async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  var score = 0;
                                  for (let char of $state.antdInput9.value) {
                                    if ($state.abjad[char]) {
                                      score += $state.abjad[char];
                                    }
                                  }
                                  return ($state.scors[1] = score);
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }).apply(null, eventArgs);
                  },
                  placeholder:
                    "\u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc",
                  size: "large",
                  type: "text",
                  value: generateStateValueProp($state, ["antdInput9", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "antdInput9.value"
                    }
                  ],
                  [],
                  Input_Helpers ?? {},
                  child$Props
                );

                return (
                  <Input
                    data-plasmic-name={"antdInput9"}
                    data-plasmic-override={overrides.antdInput9}
                    {...child$Props}
                  />
                );
              })()}
              className={classNames("__wab_instance", sty.textInput9)}
              endIcon={
                <div className={classNames(projectcss.all, sty.freeBox__oAhoh)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bxxGk
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.scors[1];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "0";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              }
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput9", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }

                (async event => {
                  const $steps = {};
                }).apply(null, eventArgs);
              }}
              placeholder={"\u0646\u0627\u0645"}
              showEndIcon={true}
              startIcon={
                <SearchSvgIcon
                  className={classNames(projectcss.all, sty.svg__aDkb)}
                  role={"img"}
                />
              }
              type={"text"}
              value={
                generateStateValueProp($state, ["textInput9", "value"]) ?? ""
              }
            />

            <TextInput
              data-plasmic-name={"textInput8"}
              data-plasmic-override={overrides.textInput8}
              antdInput2={(() => {
                const child$Props = {
                  "aria-label": ``,
                  bordered: false,
                  className: classNames("__wab_instance", sty.antdInput8),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["antdInput8", "value"],
                      Input_Helpers
                    ).apply(null, eventArgs);

                    (async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  var score = 0;
                                  for (let char of $state.antdInput8.value) {
                                    if ($state.abjad[char]) {
                                      score += $state.abjad[char];
                                    }
                                  }
                                  return ($state.scors[2] = score);
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }).apply(null, eventArgs);
                  },
                  placeholder: "\u0646\u0627\u0645 \u0645\u0627\u062f\u0631",
                  size: "large",
                  type: "text",
                  value: generateStateValueProp($state, ["antdInput8", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "antdInput8.value"
                    }
                  ],
                  [],
                  Input_Helpers ?? {},
                  child$Props
                );

                return (
                  <Input
                    data-plasmic-name={"antdInput8"}
                    data-plasmic-override={overrides.antdInput8}
                    {...child$Props}
                  />
                );
              })()}
              className={classNames("__wab_instance", sty.textInput8)}
              endIcon={
                <div className={classNames(projectcss.all, sty.freeBox__u49Gg)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cuY
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.scors[2];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "0";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              }
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["textInput8", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }

                (async event => {
                  const $steps = {};
                }).apply(null, eventArgs);
              }}
              placeholder={"\u0646\u0627\u0645 \u0645\u0627\u062f\u0631"}
              showEndIcon={true}
              startIcon={
                <SearchSvgIcon
                  className={classNames(projectcss.all, sty.svg__gDke4)}
                  role={"img"}
                />
              }
              type={"text"}
              value={
                generateStateValueProp($state, ["textInput8", "value"]) ?? ""
              }
            />

            <div className={classNames(projectcss.all, sty.freeBox__z8Y8L)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bxJ
                )}
              >
                {
                  "\u26a0\ufe0f \u062a\u0645\u0627\u0645\u06cc \u0627\u0633\u0627\u0645\u06cc \u0631\u0627 \u0641\u0642\u0637 \u0628\u0627 \u062d\u0631\u0648\u0641 \u0641\u0627\u0631\u0633\u06cc \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f \u0648 \u062c\u0647\u062a \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u0627\u0632 \u0628\u0631\u0648\u0632 \u0627\u062e\u062a\u0644\u0627\u0644 \u062f\u0631 \u0639\u0645\u0644\u06a9\u0631\u062f \u0628\u0631\u0646\u0627\u0645\u0647\u060c \u0641\u06cc\u0644\u062a\u0631 \u0634\u06a9\u0646 \u0631\u0627 \u062e\u0627\u0645\u0648\u0634 \u06a9\u0646\u06cc\u062f."
                }
              </div>
            </div>
          </div>
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div className={classNames(projectcss.all, sty.freeBox___3TbEt)}>
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/liom_hamyar/images/image75.png",
                  fullWidth: 2912,
                  fullHeight: 1922,
                  aspectRatio: undefined
                }}
              />
            </div>
          </section>
          <div className={classNames(projectcss.all, sty.freeBox__neX0C)}>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={generateStateValueProp($state, ["button", "color"])}
              load={generateStateValueProp($state, ["button", "load"])}
              loading={generateStateValueProp($state, ["button", "loading"])}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadingChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button", "loading"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fDory
                )}
              >
                {
                  "\u0628\u0631\u0631\u0633\u06cc \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                }
              </div>
            </Button>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "halamanUtama",
    "textInput7",
    "antdInput7",
    "textInput9",
    "antdInput9",
    "textInput8",
    "antdInput8",
    "section",
    "img",
    "button"
  ],
  halamanUtama: [
    "halamanUtama",
    "textInput7",
    "antdInput7",
    "textInput9",
    "antdInput9",
    "textInput8",
    "antdInput8"
  ],
  textInput7: ["textInput7", "antdInput7"],
  antdInput7: ["antdInput7"],
  textInput9: ["textInput9", "antdInput9"],
  antdInput9: ["antdInput9"],
  textInput8: ["textInput8", "antdInput8"],
  antdInput8: ["antdInput8"],
  section: ["section", "img"],
  img: ["img"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  halamanUtama: "div";
  textInput7: typeof TextInput;
  antdInput7: typeof Input;
  textInput9: typeof TextInput;
  antdInput9: typeof Input;
  textInput8: typeof TextInput;
  antdInput8: typeof Input;
  section: "section";
  img: typeof PlasmicImg__;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNoname2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNoname2__VariantsArgs;
    args?: PlasmicNoname2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNoname2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNoname2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNoname2__ArgProps,
          internalVariantPropNames: PlasmicNoname2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNoname2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNoname2";
  } else {
    func.displayName = `PlasmicNoname2.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicNoname2 = Object.assign(
  // Top-level PlasmicNoname2 renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    halamanUtama: makeNodeComponent("halamanUtama"),
    textInput7: makeNodeComponent("textInput7"),
    antdInput7: makeNodeComponent("antdInput7"),
    textInput9: makeNodeComponent("textInput9"),
    antdInput9: makeNodeComponent("antdInput9"),
    textInput8: makeNodeComponent("textInput8"),
    antdInput8: makeNodeComponent("antdInput8"),
    section: makeNodeComponent("section"),
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicNoname2
    internalVariantProps: PlasmicNoname2__VariantProps,
    internalArgProps: PlasmicNoname2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNoname2;
/* prettier-ignore-end */
