// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: Y_p0qKIshDe1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSlideinModal.module.css"; // plasmic-import: Y_p0qKIshDe1/css

createPlasmicElementProxy;

export type PlasmicSlideinModal__VariantMembers = {
  click: "click";
};
export type PlasmicSlideinModal__VariantsArgs = {
  click?: SingleBooleanChoiceArg<"click">;
};
type VariantPropType = keyof PlasmicSlideinModal__VariantsArgs;
export const PlasmicSlideinModal__VariantProps = new Array<VariantPropType>(
  "click"
);

export type PlasmicSlideinModal__ArgsType = {
  onClickChange?: (val: any) => void;
  children?: React.ReactNode;
  onClick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicSlideinModal__ArgsType;
export const PlasmicSlideinModal__ArgProps = new Array<ArgPropType>(
  "onClickChange",
  "children",
  "onClick"
);

export type PlasmicSlideinModal__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultSlideinModalProps {
  onClickChange?: (val: any) => void;
  children?: React.ReactNode;
  onClick?: (event: any) => void;
  click?: SingleBooleanChoiceArg<"click">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSlideinModal__RenderFunc(props: {
  variants: PlasmicSlideinModal__VariantsArgs;
  args: PlasmicSlideinModal__ArgsType;
  overrides: PlasmicSlideinModal__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "click",
        type: "writable",
        variableType: "variant",

        valueProp: "click",
        onChangeProp: "onClickChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      aria-hidden={hasVariant($state, "click", "click") ? "false" : "true"}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootclick]: hasVariant($state, "click", "click") }
      )}
      onClick={async event => {
        const $steps = {};
      }}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__kd9A, {
          [sty.freeBoxclick__kd9A6HzP8]: hasVariant($state, "click", "click")
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__oeonh, {
            [sty.freeBoxclick__oeonh6HzP8]: hasVariant($state, "click", "click")
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(projectcss.all, sty.freeBox__nuZnL, {
                  [sty.freeBoxclick__nuZnL6HzP8]: hasVariant(
                    $state,
                    "click",
                    "click"
                  )
                })}
              />
            ),

            value: args.children
          })}
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__jFopY, {
          [sty.freeBoxclick__jFopY6HzP8]: hasVariant($state, "click", "click")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateClick"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "click",
                  operation: 6,
                  value: "click"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, false);
                  return false;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateClick"] != null &&
            typeof $steps["updateClick"] === "object" &&
            typeof $steps["updateClick"].then === "function"
          ) {
            $steps["updateClick"] = await $steps["updateClick"];
          }
        }}
        onTouchStart={async event => {
          const $steps = {};

          $steps["updateClick"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "click",
                  operation: 6,
                  value: "click"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  $stateSet($state, vgroup, false);
                  return false;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateClick"] != null &&
            typeof $steps["updateClick"] === "object" &&
            typeof $steps["updateClick"].then === "function"
          ) {
            $steps["updateClick"] = await $steps["updateClick"];
          }
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSlideinModal__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSlideinModal__VariantsArgs;
    args?: PlasmicSlideinModal__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSlideinModal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSlideinModal__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSlideinModal__ArgProps,
          internalVariantPropNames: PlasmicSlideinModal__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSlideinModal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSlideinModal";
  } else {
    func.displayName = `PlasmicSlideinModal.${nodeName}`;
  }
  return func;
}

export const PlasmicSlideinModal = Object.assign(
  // Top-level PlasmicSlideinModal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSlideinModal
    internalVariantProps: PlasmicSlideinModal__VariantProps,
    internalArgProps: PlasmicSlideinModal__ArgProps
  }
);

export default PlasmicSlideinModal;
/* prettier-ignore-end */
