/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: BH6xU50P1m4G

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import Dialog from "../../Dialog"; // plasmic-import: 6XHfwWx1PCn8/component
import { Pickers } from "@/components/Pickers"; // plasmic-import: htE-oGSeNx82/codeComponent

import { useScreenVariants as useScreenVariants_6BytLjmha8VC } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6BYTLjmha8vC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSettingCycle3.module.css"; // plasmic-import: BH6xU50P1m4G/css

import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicSettingCycle3__VariantMembers = {
  dark: "dark";
};
export type PlasmicSettingCycle3__VariantsArgs = {
  dark?: SingleBooleanChoiceArg<"dark">;
};
type VariantPropType = keyof PlasmicSettingCycle3__VariantsArgs;
export const PlasmicSettingCycle3__VariantProps = new Array<VariantPropType>(
  "dark"
);

export type PlasmicSettingCycle3__ArgsType = {};
type ArgPropType = keyof PlasmicSettingCycle3__ArgsType;
export const PlasmicSettingCycle3__ArgProps = new Array<ArgPropType>();

export type PlasmicSettingCycle3__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  sideEffect?: Flex__<typeof SideEffect>;
  img?: Flex__<typeof PlasmicImg__>;
  dateOfBirthBox?: Flex__<typeof AntdInput>;
  lastTimeBox?: Flex__<typeof AntdInput>;
  lastTimeBox3?: Flex__<typeof AntdInput>;
  lastTimeBox2?: Flex__<typeof AntdInput>;
  section?: Flex__<"section">;
  button3?: Flex__<typeof Button>;
  dialog?: Flex__<typeof Dialog>;
  pickers?: Flex__<typeof Pickers>;
  button2?: Flex__<typeof Button>;
  dialog2?: Flex__<typeof Dialog>;
  pickers2?: Flex__<typeof Pickers>;
  button4?: Flex__<typeof Button>;
  dialog3?: Flex__<typeof Dialog>;
  pickers3?: Flex__<typeof Pickers>;
  button5?: Flex__<typeof Button>;
  dialog4?: Flex__<typeof Dialog>;
  pickers4?: Flex__<typeof Pickers>;
  button6?: Flex__<typeof Button>;
};

export interface DefaultSettingCycle3Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSettingCycle3__RenderFunc(props: {
  variants: PlasmicSettingCycle3__VariantsArgs;
  args: PlasmicSettingCycle3__ArgsType;
  overrides: PlasmicSettingCycle3__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dateOfBirthBox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($state.lengh != 0) return `${$state.lengh} روز `;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "typeInterDate",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lastTimeBox.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($state.cycle != 0) return `${$state.cycle} روز`;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "lastTime",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (!$ctx.query.last_time) {
                  return { date: "" };
                }
                var a = $ctx.query.last_time.split("-");
                return {
                  gy: parseInt(a[0]),
                  gm: parseInt(a[1]),
                  gd: parseInt(a[2])
                };
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return { data: "" };
              }
              throw e;
            }
          })()
      },
      {
        path: "lengh",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return parseInt($ctx.query.length || 0);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "cycle",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return parseInt($ctx.query.cycle || 0);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "dark",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.theme == "dark";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.dark
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shouldBlockBackButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "isGetInfo",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "lastTimeBox2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($state.lasttime != 100) {
                  return $state.datepas.filter(
                    item => item.value == $state.lasttime
                  )[0].label;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "dialog.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialog3.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pickers.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return parseInt($ctx.query.length || 5);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 5;
              }
              throw e;
            }
          })()
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog2.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "pickers2.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return parseInt($ctx.query.cycle || 19);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 9;
              }
              throw e;
            }
          })()
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "list",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return JSON.parse(localStorage.getItem("calender"))[0];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "loadbtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "nex",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.nextTime == -1;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "lastTimeBox3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($state.nextTime != 100) {
                  if ($state.nextTime == -1) {
                    return "یادم نیست";
                  } else {
                    return $state.datenex.filter(
                      item => item.value == $state.nextTime
                    )[0].label;
                  }
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "dialog4.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "pickers3.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => -1
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "datepas",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const today = new Date();
                const daysOfWeek = [
                  "یکشنبه",
                  "دوشنبه",
                  "سه‌شنبه",
                  "چهارشنبه",
                  "پنج‌شنبه",
                  "جمعه",
                  "شنبه"
                ];

                const monthNames = [
                  "فروردین",
                  "اردیبهشت",
                  "خرداد",
                  "تیر",
                  "مرداد",
                  "شهریور",
                  "مهر",
                  "آبان",
                  "آذر",
                  "دی",
                  "بهمن",
                  "اسفند"
                ];

                const updatedPeriods = [
                  (() => {
                    const dayOfWeek = daysOfWeek[today.getDay()];
                    const jalaaliDate = window.jalaali.toJalaali(
                      today.getFullYear(),
                      today.getMonth() + 1,
                      today.getDate()
                    );
                    const monthName = monthNames[jalaaliDate.jm - 1];
                    return {
                      label: `${dayOfWeek} ${jalaaliDate.jd} ${monthName} `,
                      value: 0
                    };
                  })(),
                  ...Array.from(
                    { length: $state.cycle != 0 ? $state.cycle : 30 },
                    (_, i) => {
                      const date = new Date(today);
                      date.setDate(today.getDate() - (i + 1));
                      const dayOfWeek = daysOfWeek[date.getDay()];
                      const jalaaliDate = window.jalaali.toJalaali(
                        date.getFullYear(),
                        date.getMonth() + 1,
                        date.getDate()
                      );
                      const monthName = monthNames[jalaaliDate.jm - 1];
                      const label = `${dayOfWeek}   ${jalaaliDate.jd}   ${monthName} `;
                      return {
                        label,
                        value: -(i + 1)
                      };
                    }
                  )
                ];

                return updatedPeriods;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "datenex",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const today = new Date();
                const daysOfWeek = [
                  "یکشنبه",
                  "دوشنبه",
                  "سه‌شنبه",
                  "چهارشنبه",
                  "پنج‌شنبه",
                  "جمعه",
                  "شنبه"
                ];

                const monthNames = [
                  "فروردین",
                  "اردیبهشت",
                  "خرداد",
                  "تیر",
                  "مرداد",
                  "شهریور",
                  "مهر",
                  "آبان",
                  "آذر",
                  "دی",
                  "بهمن",
                  "اسفند"
                ];

                const updatedPeriods = [
                  {
                    label:
                      "نمیدونم کی پریود میشم\u060C دوره قبلی و وارد میکنم.",
                    value: -1
                  },
                  (() => {
                    const dayOfWeek = daysOfWeek[today.getDay()];
                    const jalaaliDate = window.jalaali.toJalaali(
                      today.getFullYear(),
                      today.getMonth() + 1,
                      today.getDate()
                    );
                    const monthName = monthNames[jalaaliDate.jm - 1];
                    return {
                      label: `${dayOfWeek} ${jalaaliDate.jd} ${monthName} `,
                      value: 0
                    };
                  })(),
                  ...Array.from(
                    { length: $state.cycle != 0 ? $state.cycle : 30 },
                    (_, i) => {
                      const date = new Date(today);
                      date.setDate(today.getDate() + (i + 1));
                      const dayOfWeek = daysOfWeek[date.getDay()];
                      const jalaaliDate = window.jalaali.toJalaali(
                        date.getFullYear(),
                        date.getMonth() + 1,
                        date.getDate()
                      );
                      const monthName = monthNames[jalaaliDate.jm - 1];
                      const label = `${dayOfWeek} ${jalaaliDate.jd} ${monthName} `;
                      return {
                        label,
                        value: i + 1
                      };
                    }
                  )
                ];

                return updatedPeriods;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "pickers4.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "lasttime",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (!$ctx.query.last_time) {
                  return 100;
                }
                const date = new Date($ctx.query.last_time);
                const date2 = new Date();
                const differenceInMilliseconds = date - date2;
                const differenceInDays = Math.floor(
                  differenceInMilliseconds / (1000 * 60 * 60 * 24) + 1
                );
                if (differenceInDays < 0) return differenceInDays;
                return 100;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 100;
              }
              throw e;
            }
          })()
      },
      {
        path: "nextTime",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (!$ctx.query.last_time) {
                  return 100;
                }
                const date = new Date($ctx.query.last_time);
                const date2 = new Date();
                const differenceInMilliseconds = date - date2;
                const differenceInDays = Math.floor(
                  differenceInMilliseconds / (1000 * 60 * 60 * 24) + 1
                );
                if (differenceInDays >= 0) return differenceInDays;
                return -1;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 100;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6BytLjmha8VC()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            { [sty.rootdark]: hasVariant($state, "dark", "dark") }
          )}
        >
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<script src="https://cdn.jsdelivr.net/npm/jalaali-js/dist/jalaali.js"></script>'
            }
          />

          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          var getCookie = name => {
                            const cookies = document.cookie.split("; ");
                            for (let cookie of cookies) {
                              const [key, value] = cookie.split("=");
                              if (key === name) return JSON.parse(value)[0];
                            }
                            return "";
                          };
                          return ($state.token = getCookie("token"));
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          />

          <div className={classNames(projectcss.all, sty.freeBox__orcb)}>
            {(() => {
              try {
                return $ctx.query.inApp != "true";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(projectcss.all, sty.freeBox___8TyA0, {
                  [sty.freeBoxdark___8TyA0ICcOl]: hasVariant(
                    $state,
                    "dark",
                    "dark"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__uvIK)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToCalendar"] = true
                      ? (() => {
                          const actionArgs = { destination: `/calendar` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToCalendar"] != null &&
                      typeof $steps["goToCalendar"] === "object" &&
                      typeof $steps["goToCalendar"].then === "function"
                    ) {
                      $steps["goToCalendar"] = await $steps["goToCalendar"];
                    }
                  }}
                >
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img, {
                      [sty.imgdark]: hasVariant($state, "dark", "dark")
                    })}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"20px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liom_hamyar/images/image38.svg",
                      fullWidth: 24,
                      fullHeight: 24,
                      aspectRatio: 1
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pwryH,
                      {
                        [sty.textdark__pwryHiCcOl]: hasVariant(
                          $state,
                          "dark",
                          "dark"
                        )
                      }
                    )}
                  >
                    {"\u062a\u0646\u0638\u06cc\u0645\u0627\u062a"}
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__rhS4Q, {
                    [sty.freeBoxdark__rhS4QICcOl]: hasVariant(
                      $state,
                      "dark",
                      "dark"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gIcb2)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["invokeGlobalAction3"] = (() => {
                        if (
                          $state.cycle == "" ||
                          $state.lengh == null ||
                          $state.lengh == ""
                        ) {
                          return true;
                        }
                        var jy = $state.lengh.year;
                        var jm = $state.lengh.month;
                        var jd = $state.lengh.day;
                        var gy = jy <= 979 ? 621 : 1600;
                        jy -= jy <= 979 ? 0 : 979;
                        var days =
                          365 * jy +
                          parseInt(jy / 33) * 8 +
                          parseInt(((jy % 33) + 3) / 4) +
                          78 +
                          jd +
                          (jm < 7 ? (jm - 1) * 31 : (jm - 7) * 30 + 186);
                        gy += 400 * parseInt(days / 146097);
                        days %= 146097;
                        if (days > 36524) {
                          gy += 100 * parseInt(--days / 36524);
                          days %= 36524;
                          if (days >= 365) days++;
                        }
                        gy += 4 * parseInt(days / 1461);
                        days %= 1461;
                        gy += parseInt((days - 1) / 365);
                        if (days > 365) days = (days - 1) % 365;
                        var gd = days + 1;
                        var sal_a = [
                          0,
                          31,
                          (gy % 4 == 0 && gy % 100 != 0) || gy % 400 == 0
                            ? 29
                            : 28,
                          31,
                          30,
                          31,
                          30,
                          31,
                          31,
                          30,
                          31,
                          30,
                          31
                        ];

                        var gm;
                        for (gm = 0; gm < 13; gm++) {
                          var v = sal_a[gm];
                          if (gd <= v) break;
                          gd -= v;
                        }
                        const d =
                          gy +
                          "-" +
                          (gm <= 9 ? "0" : "") +
                          gm +
                          "-" +
                          (gd <= 9 ? "0" : "") +
                          gd +
                          "T10:10:10";
                        const specifiedDate = new Date(d);
                        const today = new Date();
                        if (today > specifiedDate) {
                          return true;
                        }
                        const diffTime = Math.abs(today - specifiedDate);
                        const diffDays = Math.ceil(
                          diffTime / (1000 * 60 * 60 * 24)
                        );
                        return diffDays <= 280 ? false : true;
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                (() => {
                                  try {
                                    return (() => {
                                      if ($state.cycle == "")
                                        "لطفا اطلاعات درست وارد کنید";
                                      if ($state.lengh == null)
                                        "لطفا اطلاعات درست وارد کنید";
                                      if ($state.lengh == "")
                                        "لطفا اطلاعات درست وارد کنید";
                                      var jy = $state.lengh.year;
                                      var jm = $state.lengh.month;
                                      var jd = $state.lengh.day;
                                      var gy = jy <= 979 ? 621 : 1600;
                                      jy -= jy <= 979 ? 0 : 979;
                                      var days =
                                        365 * jy +
                                        parseInt(jy / 33) * 8 +
                                        parseInt(((jy % 33) + 3) / 4) +
                                        78 +
                                        jd +
                                        (jm < 7
                                          ? (jm - 1) * 31
                                          : (jm - 7) * 30 + 186);
                                      gy += 400 * parseInt(days / 146097);
                                      days %= 146097;
                                      if (days > 36524) {
                                        gy += 100 * parseInt(--days / 36524);
                                        days %= 36524;
                                        if (days >= 365) days++;
                                      }
                                      gy += 4 * parseInt(days / 1461);
                                      days %= 1461;
                                      gy += parseInt((days - 1) / 365);
                                      if (days > 365) days = (days - 1) % 365;
                                      var gd = days + 1;
                                      var sal_a = [
                                        0,
                                        31,
                                        (gy % 4 == 0 && gy % 100 != 0) ||
                                        gy % 400 == 0
                                          ? 29
                                          : 28,
                                        31,
                                        30,
                                        31,
                                        30,
                                        31,
                                        31,
                                        30,
                                        31,
                                        30,
                                        31
                                      ];

                                      var gm;
                                      for (gm = 0; gm < 13; gm++) {
                                        var v = sal_a[gm];
                                        if (gd <= v) break;
                                        gd -= v;
                                      }
                                      const d =
                                        gy +
                                        "-" +
                                        (gm <= 9 ? "0" : "") +
                                        gm +
                                        "-" +
                                        (gd <= 9 ? "0" : "") +
                                        gd +
                                        "T10:10:10";
                                      const specifiedDate = new Date(d);
                                      const today = new Date();
                                      if (today > specifiedDate) {
                                        ("لطفا اطلاعات درست وارد کنید4");
                                      }
                                      const diffTime = Math.abs(
                                        today - specifiedDate
                                      );
                                      const diffDays = Math.ceil(
                                        diffTime / (1000 * 60 * 60 * 24)
                                      );
                                      return diffDays <= 280
                                        ? "تاریخ زایمانی که وارد کردی برای قبل امروز است"
                                        : $state.typeInterDate == "lastTime"
                                        ? "تاریخ آخرین قاعدگی ای که وارد کردی برای بعد از امروز است"
                                        : "تاریخ زایمانی که وارد کردی برای بیشتر از 9 ماه بعد است";
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }

                      $steps["invokeGlobalAction2"] = (() => {
                        if (
                          $state.cycle == "" ||
                          $state.lengh == null ||
                          $state.lengh == ""
                        ) {
                          return false;
                        }
                        var jy = $state.lengh.year;
                        var jm = $state.lengh.month;
                        var jd = $state.lengh.day;
                        var gy = jy <= 979 ? 621 : 1600;
                        jy -= jy <= 979 ? 0 : 979;
                        var days =
                          365 * jy +
                          parseInt(jy / 33) * 8 +
                          parseInt(((jy % 33) + 3) / 4) +
                          78 +
                          jd +
                          (jm < 7 ? (jm - 1) * 31 : (jm - 7) * 30 + 186);
                        gy += 400 * parseInt(days / 146097);
                        days %= 146097;
                        if (days > 36524) {
                          gy += 100 * parseInt(--days / 36524);
                          days %= 36524;
                          if (days >= 365) days++;
                        }
                        gy += 4 * parseInt(days / 1461);
                        days %= 1461;
                        gy += parseInt((days - 1) / 365);
                        if (days > 365) days = (days - 1) % 365;
                        var gd = days + 1;
                        var sal_a = [
                          0,
                          31,
                          (gy % 4 == 0 && gy % 100 != 0) || gy % 400 == 0
                            ? 29
                            : 28,
                          31,
                          30,
                          31,
                          30,
                          31,
                          31,
                          30,
                          31,
                          30,
                          31
                        ];

                        var gm;
                        for (gm = 0; gm < 13; gm++) {
                          var v = sal_a[gm];
                          if (gd <= v) break;
                          gd -= v;
                        }
                        const d =
                          gy +
                          "-" +
                          (gm <= 9 ? "0" : "") +
                          gm +
                          "-" +
                          (gd <= 9 ? "0" : "") +
                          gd +
                          "T10:10:10";
                        const specifiedDate = new Date(d);
                        const today = new Date();
                        if (today > specifiedDate) {
                          return false;
                        }
                        const diffTime = Math.abs(today - specifiedDate);
                        const diffDays = Math.ceil(
                          diffTime / (1000 * 60 * 60 * 24)
                        );
                        return diffDays > 280 ? false : true;
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f",
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["invokeGlobalAction"] = (() => {
                        if (
                          $state.cycle == "" ||
                          $state.lengh == null ||
                          $state.lengh == ""
                        ) {
                          return false;
                        }
                        var jy = $state.lengh.year;
                        var jm = $state.lengh.month;
                        var jd = $state.lengh.day;
                        var gy = jy <= 979 ? 621 : 1600;
                        jy -= jy <= 979 ? 0 : 979;
                        var days =
                          365 * jy +
                          parseInt(jy / 33) * 8 +
                          parseInt(((jy % 33) + 3) / 4) +
                          78 +
                          jd +
                          (jm < 7 ? (jm - 1) * 31 : (jm - 7) * 30 + 186);
                        gy += 400 * parseInt(days / 146097);
                        days %= 146097;
                        if (days > 36524) {
                          gy += 100 * parseInt(--days / 36524);
                          days %= 36524;
                          if (days >= 365) days++;
                        }
                        gy += 4 * parseInt(days / 1461);
                        days %= 1461;
                        gy += parseInt((days - 1) / 365);
                        if (days > 365) days = (days - 1) % 365;
                        var gd = days + 1;
                        var sal_a = [
                          0,
                          31,
                          (gy % 4 == 0 && gy % 100 != 0) || gy % 400 == 0
                            ? 29
                            : 28,
                          31,
                          30,
                          31,
                          30,
                          31,
                          31,
                          30,
                          31,
                          30,
                          31
                        ];

                        var gm;
                        for (gm = 0; gm < 13; gm++) {
                          var v = sal_a[gm];
                          if (gd <= v) break;
                          gd -= v;
                        }
                        const d =
                          gy +
                          "-" +
                          (gm <= 9 ? "0" : "") +
                          gm +
                          "-" +
                          (gd <= 9 ? "0" : "") +
                          gd +
                          "T10:10:10";
                        const specifiedDate = new Date(d);
                        const today = new Date();
                        if (today > specifiedDate) {
                          return false;
                        }
                        const diffTime = Math.abs(today - specifiedDate);
                        const diffDays = Math.ceil(
                          diffTime / (1000 * 60 * 60 * 24)
                        );
                        return diffDays > 280 ? false : true;
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/status",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      area: "pregnancy",
                                      duDate:
                                        $state.cycle[0] +
                                        "-" +
                                        ($state.cycle[1] <= 9 ? "0" : "") +
                                        $state.cycle[1] +
                                        "-" +
                                        ($state.cycle[2] <= 9 ? "0" : "") +
                                        $state.cycle[2] +
                                        " 10:10:10",
                                      userId: $ctx.query.userId.slice(
                                        4,
                                        +$ctx.query.userId.length - 4
                                      )
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        "Content-Type": "application/json",
                                        Authorization:
                                          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHAiOiJsaW9tIn0.Tuzd74LOuzwCnvvh8Wsa99DIW-NRs1LLHPhayXSZ3Wk"
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["goToPage"] = (() => {
                        if (
                          $state.cycle == "" ||
                          $state.lengh == null ||
                          $state.lengh == ""
                        ) {
                          return false;
                        }
                        var jy = $state.lengh.year;
                        var jm = $state.lengh.month;
                        var jd = $state.lengh.day;
                        var gy = jy <= 979 ? 621 : 1600;
                        jy -= jy <= 979 ? 0 : 979;
                        var days =
                          365 * jy +
                          parseInt(jy / 33) * 8 +
                          parseInt(((jy % 33) + 3) / 4) +
                          78 +
                          jd +
                          (jm < 7 ? (jm - 1) * 31 : (jm - 7) * 30 + 186);
                        gy += 400 * parseInt(days / 146097);
                        days %= 146097;
                        if (days > 36524) {
                          gy += 100 * parseInt(--days / 36524);
                          days %= 36524;
                          if (days >= 365) days++;
                        }
                        gy += 4 * parseInt(days / 1461);
                        days %= 1461;
                        gy += parseInt((days - 1) / 365);
                        if (days > 365) days = (days - 1) % 365;
                        var gd = days + 1;
                        var sal_a = [
                          0,
                          31,
                          (gy % 4 == 0 && gy % 100 != 0) || gy % 400 == 0
                            ? 29
                            : 28,
                          31,
                          30,
                          31,
                          30,
                          31,
                          31,
                          30,
                          31,
                          30,
                          31
                        ];

                        var gm;
                        for (gm = 0; gm < 13; gm++) {
                          var v = sal_a[gm];
                          if (gd <= v) break;
                          gd -= v;
                        }
                        const d =
                          gy +
                          "-" +
                          (gm <= 9 ? "0" : "") +
                          gm +
                          "-" +
                          (gd <= 9 ? "0" : "") +
                          gd +
                          "T10:10:10";
                        const specifiedDate = new Date(d);
                        const today = new Date();
                        if (today > specifiedDate) {
                          return false;
                        }
                        const diffTime = Math.abs(today - specifiedDate);
                        const diffDays = Math.ceil(
                          diffTime / (1000 * 60 * 60 * 24)
                        );
                        return diffDays > 280 ? false : true;
                      })()
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return (
                                    "https://apps.liom.app/pregnancy/?token=" +
                                    $ctx.query.token +
                                    "&userId=" +
                                    $ctx.query.userId +
                                    "&theme=" +
                                    $ctx.query.theme +
                                    "&inApp=false"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }

                      $steps["invokeGlobalAction4"] = (() => {
                        if (
                          $state.cycle == "" ||
                          $state.lengh == null ||
                          $state.lengh == ""
                        ) {
                          return false;
                        }
                        if (
                          $ctx.query.userId.slice(
                            4,
                            $ctx.query.userId.length - 4
                          ) == "314149"
                        ) {
                          return false;
                        }
                        var jy = $state.lengh.year;
                        var jm = $state.lengh.month;
                        var jd = $state.lengh.day;
                        var gy = jy <= 979 ? 621 : 1600;
                        jy -= jy <= 979 ? 0 : 979;
                        var days =
                          365 * jy +
                          parseInt(jy / 33) * 8 +
                          parseInt(((jy % 33) + 3) / 4) +
                          78 +
                          jd +
                          (jm < 7 ? (jm - 1) * 31 : (jm - 7) * 30 + 186);
                        gy += 400 * parseInt(days / 146097);
                        days %= 146097;
                        if (days > 36524) {
                          gy += 100 * parseInt(--days / 36524);
                          days %= 36524;
                          if (days >= 365) days++;
                        }
                        gy += 4 * parseInt(days / 1461);
                        days %= 1461;
                        gy += parseInt((days - 1) / 365);
                        if (days > 365) days = (days - 1) % 365;
                        var gd = days + 1;
                        var sal_a = [
                          0,
                          31,
                          (gy % 4 == 0 && gy % 100 != 0) || gy % 400 == 0
                            ? 29
                            : 28,
                          31,
                          30,
                          31,
                          30,
                          31,
                          31,
                          30,
                          31,
                          30,
                          31
                        ];

                        var gm;
                        for (gm = 0; gm < 13; gm++) {
                          var v = sal_a[gm];
                          if (gd <= v) break;
                          gd -= v;
                        }
                        const d =
                          gy +
                          "-" +
                          (gm <= 9 ? "0" : "") +
                          gm +
                          "-" +
                          (gd <= 9 ? "0" : "") +
                          gd +
                          "T10:10:10";
                        const specifiedDate = new Date(d);
                        const today = new Date();
                        if (today > specifiedDate) {
                          return false;
                        }
                        const diffTime = Math.abs(today - specifiedDate);
                        const diffDays = Math.ceil(
                          diffTime / (1000 * 60 * 60 * 24)
                        );
                        return diffDays > 280 ? false : true;
                      })()
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://api.liom.app/service/log",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      userId:
                                        $ctx.query.userId?.length > 0
                                          ? $ctx.query.userId.slice(
                                              4,
                                              $ctx.query.userId.length - 4
                                            )
                                          : "guest",
                                      pageName: "settingPage",
                                      action: "click-saveDate",
                                      extraData: {}
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        "Content-Type": "application/json",
                                        Authorization:
                                          "Bearer " +
                                          $ctx.query.token.slice(
                                            6,
                                            $ctx.query.token.length - 3
                                          )
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction4"] != null &&
                        typeof $steps["invokeGlobalAction4"] === "object" &&
                        typeof $steps["invokeGlobalAction4"].then === "function"
                      ) {
                        $steps["invokeGlobalAction4"] = await $steps[
                          "invokeGlobalAction4"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tbPe,
                        {
                          [sty.textdark__tbPeICcOl]: hasVariant(
                            $state,
                            "dark",
                            "dark"
                          )
                        }
                      )}
                    >
                      {
                        "\u0630\u062e\u06cc\u0631\u0647 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a"
                      }
                    </div>
                  </div>
                </div>
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox___6MBpL)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sdIjp, {
                  [sty.freeBoxdark__sdIjpICcOl]: hasVariant(
                    $state,
                    "dark",
                    "dark"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bMlx6,
                    {
                      [sty.textdark__bMlx6ICcOl]: hasVariant(
                        $state,
                        "dark",
                        "dark"
                      )
                    }
                  )}
                >
                  {
                    '\u0628\u0631\u0627\u06cc \u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc "\u062a\u0642\u0648\u06cc\u0645 \u067e\u0631\u06cc\u0648\u062f" \u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0632\u06cc\u0631 \u0631\u0627 \u067e\u0631 \u06a9\u0646\u06cc\u062f.'
                  }
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jdv7O)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kT3A,
                      {
                        [sty.textdark__kT3AICcOl]: hasVariant(
                          $state,
                          "dark",
                          "dark"
                        )
                      }
                    )}
                  >
                    {
                      "\u0645\u0639\u0645\u0648\u0644\u0627 \u0686\u0646\u062f \u0631\u0648\u0632 \u062e\u0648\u0646\u0631\u06cc\u0632\u06cc \u062f\u0627\u0631\u06cc\u061f"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__fDhb0,
                      hasVariant($state, "dark", "dark") ? "input-dark" : ``,
                      {
                        [sty.freeBoxdark__fDhb0ICcOl]: hasVariant(
                          $state,
                          "dark",
                          "dark"
                        )
                      }
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateSlideinModalClick"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dialog", "opendialog"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSlideinModalClick"] != null &&
                        typeof $steps["updateSlideinModalClick"] === "object" &&
                        typeof $steps["updateSlideinModalClick"].then ===
                          "function"
                      ) {
                        $steps["updateSlideinModalClick"] = await $steps[
                          "updateSlideinModalClick"
                        ];
                      }
                    }}
                  >
                    {(() => {
                      const child$Props = {
                        bordered: true,
                        className: classNames(
                          "__wab_instance",
                          sty.dateOfBirthBox,
                          {
                            [sty.dateOfBirthBoxdark]: hasVariant(
                              $state,
                              "dark",
                              "dark"
                            )
                          }
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["dateOfBirthBox", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder:
                          "\u0645\u062b\u0644\u0627   5 \u0631\u0648\u0632",
                        readOnly: true,
                        value: generateStateValueProp($state, [
                          "dateOfBirthBox",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "dateOfBirthBox.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"dateOfBirthBox"}
                          data-plasmic-override={overrides.dateOfBirthBox}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mGkQ)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mgig5,
                      {
                        [sty.textdark__mgig5ICcOl]: hasVariant(
                          $state,
                          "dark",
                          "dark"
                        )
                      }
                    )}
                  >
                    {
                      "\u0637\u0648\u0644 \u0633\u06cc\u06a9\u0644 \u067e\u0631\u06cc\u0648\u062f \u0634\u0645\u0627 \u0686\u0646\u062f \u0631\u0648\u0632 \u0627\u0633\u062a\u061f"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__yBWxr,
                      hasVariant($state, "dark", "dark") ? "input-dark" : ``,
                      {
                        [sty.freeBoxdark__yBWxrICcOl]: hasVariant(
                          $state,
                          "dark",
                          "dark"
                        )
                      }
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateSlideinModalClick"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dialog2", "opendialog"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSlideinModalClick"] != null &&
                        typeof $steps["updateSlideinModalClick"] === "object" &&
                        typeof $steps["updateSlideinModalClick"].then ===
                          "function"
                      ) {
                        $steps["updateSlideinModalClick"] = await $steps[
                          "updateSlideinModalClick"
                        ];
                      }
                    }}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.lastTimeBox,
                          {
                            [sty.lastTimeBoxdark]: hasVariant(
                              $state,
                              "dark",
                              "dark"
                            )
                          }
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["lastTimeBox", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder:
                          "\u0645\u062b\u0644\u0627   23 \u0631\u0648\u0632",
                        readOnly: true,
                        value: generateStateValueProp($state, [
                          "lastTimeBox",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "lastTimeBox.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"lastTimeBox"}
                          data-plasmic-override={overrides.lastTimeBox}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lzxua,
                      {
                        [sty.textdark__lzxuaiCcOl]: hasVariant(
                          $state,
                          "dark",
                          "dark"
                        )
                      }
                    )}
                  >
                    {
                      '\u0641\u0627\u0635\u0644\u0647 \u0627\u0648\u0644\u06cc\u0646 \u0642\u0627\u0639\u062f\u06af\u06cc \u062a\u0627 \u0634\u0631\u0648\u0639 \u0642\u0627\u0639\u062f\u06af\u06cc \u0628\u0639\u062f\u06cc\u062a \u0627\u0633\u062a. ( \u062d\u0648\u0627\u0633\u062a \u0628\u0627\u0634\u0647 \u06a9\u0647 \u062a\u0639\u062f\u0627\u062f \u0631\u0648\u0632 \u067e\u0631\u06cc\u0648\u062f\u062a "\u062e\u0648\u0646\u0631\u06cc\u0632\u06cc"  \u0631\u0648\u0647\u0645 \u062d\u0633\u0627\u0628 \u06a9\u0646\u06cc)'
                    }
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mpnNl)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qKdYq,
                      {
                        [sty.textdark__qKdYqICcOl]: hasVariant(
                          $state,
                          "dark",
                          "dark"
                        )
                      }
                    )}
                  >
                    {
                      "\u06a9\u06cc \u067e\u0631\u06cc\u0648\u062f \u0645\u06cc\u0634\u06cc\u062f\u061f"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__wzUWj,
                      hasVariant($state, "dark", "dark") ? "input-dark" : ``,
                      {
                        [sty.freeBoxdark__wzUWjICcOl]: hasVariant(
                          $state,
                          "dark",
                          "dark"
                        )
                      }
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateSlideinModalClick"] =
                        $state.lengh != 0 && $state.cycle != 0
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog3", "opendialog"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateSlideinModalClick"] != null &&
                        typeof $steps["updateSlideinModalClick"] === "object" &&
                        typeof $steps["updateSlideinModalClick"].then ===
                          "function"
                      ) {
                        $steps["updateSlideinModalClick"] = await $steps[
                          "updateSlideinModalClick"
                        ];
                      }

                      $steps["invokeGlobalAction"] =
                        $state.lengh == 0 || $state.cycle == 0
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "warning",
                                  "\u0627\u0648\u0644 \u0637\u0648\u0644 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f\u06cc\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646.",
                                  undefined,
                                  undefined,
                                  "bottomRight"
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.lastTimeBox3,
                          {
                            [sty.lastTimeBox3dark]: hasVariant(
                              $state,
                              "dark",
                              "dark"
                            )
                          }
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["lastTimeBox3", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder: (() => {
                          try {
                            return " مثلا " + $state.datenex[2].label;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        readOnly: true,
                        value: generateStateValueProp($state, [
                          "lastTimeBox3",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "lastTimeBox3.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"lastTimeBox3"}
                          data-plasmic-override={overrides.lastTimeBox3}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                </Stack__>
                {(() => {
                  try {
                    return $state.nex;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hJhYb)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__evy6Y,
                        {
                          [sty.textdark__evy6YiCcOl]: hasVariant(
                            $state,
                            "dark",
                            "dark"
                          )
                        }
                      )}
                    >
                      {
                        "\u062d\u0627\u0644\u0627 \u06a9\u0647 \u06cc\u0627\u062f\u062a \u0646\u0645\u06cc\u0627\u062f \u06a9\u06cc \u067e\u0631\u06cc\u0648\u062f \u0645\u06cc\u0634\u06cc\u060c \u0645\u06cc\u062f\u0648\u0646\u06cc \u0622\u062e\u0631\u06cc\u0646 \u0628\u0627\u0631 \u06a9\u06cc \u067e\u0631\u06cc\u0648\u062f \u0634\u062f\u06cc\u061f"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__aGbYq,
                        hasVariant($state, "dark", "dark") ? "input-dark" : ``,
                        {
                          [sty.freeBoxdark__aGbYqiCcOl]: hasVariant(
                            $state,
                            "dark",
                            "dark"
                          )
                        }
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateSlideinModalClick"] =
                          $state.lengh != 0 && $state.cycle != 0
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dialog4", "opendialog"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateSlideinModalClick"] != null &&
                          typeof $steps["updateSlideinModalClick"] ===
                            "object" &&
                          typeof $steps["updateSlideinModalClick"].then ===
                            "function"
                        ) {
                          $steps["updateSlideinModalClick"] = await $steps[
                            "updateSlideinModalClick"
                          ];
                        }

                        $steps["invokeGlobalAction"] =
                          $state.lengh == 0 || $state.cycle == 0
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "warning",
                                    "\u0627\u0648\u0644 \u0637\u0648\u0644 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f\u06cc\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646.",
                                    undefined,
                                    undefined,
                                    "bottomRight"
                                  ]
                                };
                                return $globalActions[
                                  "plasmic-antd5-config-provider.showNotification"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.lastTimeBox2,
                            {
                              [sty.lastTimeBox2dark]: hasVariant(
                                $state,
                                "dark",
                                "dark"
                              )
                            }
                          ),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["lastTimeBox2", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder: (() => {
                            try {
                              return " مثلا " + $state.datepas[1].label;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          readOnly: true,
                          value: generateStateValueProp($state, [
                            "lastTimeBox2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "lastTimeBox2.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"lastTimeBox2"}
                            data-plasmic-override={overrides.lastTimeBox2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  </Stack__>
                ) : null}
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__cGkK)}>
              <section
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                className={classNames(projectcss.all, sty.section)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___8KbuI)}
                >
                  <Button
                    data-plasmic-name={"button3"}
                    data-plasmic-override={overrides.button3}
                    className={classNames("__wab_instance", sty.button3)}
                    color={generateStateValueProp($state, ["button3", "color"])}
                    isDisabled={(() => {
                      try {
                        return (
                          ($state.lengh == 0 &&
                            $state.cycle == 0 &&
                            $state.lastTime.data == "") ||
                          $state.loadbtn
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    loading={(() => {
                      try {
                        return $state.loadbtn;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadbtn"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadbtn"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadbtn"] != null &&
                        typeof $steps["updateLoadbtn"] === "object" &&
                        typeof $steps["updateLoadbtn"].then === "function"
                      ) {
                        $steps["updateLoadbtn"] = await $steps["updateLoadbtn"];
                      }

                      $steps["add"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/calendar/getData",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      cycle: $state.cycle,
                                      length: $state.lengh,
                                      last_time: `${
                                        $state.lastTime.gy
                                      }-${String($state.lastTime.gm).padStart(
                                        2,
                                        "0"
                                      )}-${String($state.lastTime.gd).padStart(
                                        2,
                                        "0"
                                      )}`,
                                      type: "add",
                                      authorization: $state.token
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["add"] != null &&
                        typeof $steps["add"] === "object" &&
                        typeof $steps["add"].then === "function"
                      ) {
                        $steps["add"] = await $steps["add"];
                      }

                      $steps["edit"] = false
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/calendar/getData",
                                undefined,
                                (() => {
                                  try {
                                    return (() => {
                                      $state.list.period.start = {
                                        year: $state.lastTime.gy,
                                        month: $state.lastTime.gm,
                                        day: $state.lastTime.gd
                                      };
                                      return {
                                        cycle: $state.cycle,
                                        length: $state.lengh,
                                        type: $ctx.query.type,
                                        authorization: $state.token,
                                        calendar: $state.list
                                      };
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["edit"] != null &&
                        typeof $steps["edit"] === "object" &&
                        typeof $steps["edit"].then === "function"
                      ) {
                        $steps["edit"] = await $steps["edit"];
                      }

                      $steps["invokeGlobalAction2"] =
                        $steps.add?.data?.success || $steps.edit?.data?.success
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f",
                                  "top-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["invokeGlobalAction"] =
                        $steps.add?.data?.success == false ||
                        $steps.edit?.data.success == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u062e\u0637\u0627 \u062f\u0631 \u0628\u0631\u0642\u0631\u0627\u0631\u06cc \u0627\u0631\u062a\u0628\u0627\u0637 ! \u0645\u062c\u062f\u062f\u0627 \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                                  "top-left"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["goToCalendar"] =
                        $steps.add?.data?.success || $steps.edit?.data?.success
                          ? (() => {
                              const actionArgs = { destination: `/calendar` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToCalendar"] != null &&
                        typeof $steps["goToCalendar"] === "object" &&
                        typeof $steps["goToCalendar"].then === "function"
                      ) {
                        $steps["goToCalendar"] = await $steps["goToCalendar"];
                      }

                      $steps["updateLoadbtn2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadbtn"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadbtn2"] != null &&
                        typeof $steps["updateLoadbtn2"] === "object" &&
                        typeof $steps["updateLoadbtn2"].then === "function"
                      ) {
                        $steps["updateLoadbtn2"] = await $steps[
                          "updateLoadbtn2"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button3", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    {
                      "\u0630\u062e\u06cc\u0631\u0647 \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                    }
                  </Button>
                </div>
              </section>
            </div>
          </div>
          <Dialog
            data-plasmic-name={"dialog"}
            data-plasmic-override={overrides.dialog}
            className={classNames("__wab_instance", sty.dialog)}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["dialog", "opendialog"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialog",
              "opendialog"
            ])}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nKr2A
              )}
            >
              {
                "\u062a\u0639\u062f\u0627\u062f \u0631\u0648\u0632\u200c\u0647\u0627\u06cc \u062e\u0648\u0646 \u0631\u06cc\u0632\u06cc"
              }
            </div>
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.pickers),
                data: (() => {
                  try {
                    return (() => {
                      return Array.from({ length: 9 }, (_, i) => ({
                        label: `${i + 2} روز`,
                        value: i + 2
                      }));
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })(),
                initialValue: generateStateValueProp($state, [
                  "pickers",
                  "value"
                ]),
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["pickers", "value"]).apply(
                    null,
                    eventArgs
                  );
                }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "pickers.value"
                  }
                ],
                [],
                undefined ?? {},
                child$Props
              );
              initializePlasmicStates(
                $state,
                [
                  {
                    name: "pickers.value",
                    initFunc: ({ $props, $state, $queries }) =>
                      (() => {
                        try {
                          return parseInt($ctx.query.length || 5);
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 5;
                          }
                          throw e;
                        }
                      })()
                  }
                ],
                []
              );
              return (
                <Pickers
                  data-plasmic-name={"pickers"}
                  data-plasmic-override={overrides.pickers}
                  {...child$Props}
                />
              );
            })()}
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iThE)}
            >
              <Button
                data-plasmic-name={"button2"}
                data-plasmic-override={overrides.button2}
                className={classNames("__wab_instance", sty.button2)}
                color={generateStateValueProp($state, ["button2", "color"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateDateOfBirth"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["lengh"]
                          },
                          operation: 0,
                          value: $state.pickers.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDateOfBirth"] != null &&
                    typeof $steps["updateDateOfBirth"] === "object" &&
                    typeof $steps["updateDateOfBirth"].then === "function"
                  ) {
                    $steps["updateDateOfBirth"] = await $steps[
                      "updateDateOfBirth"
                    ];
                  }

                  $steps["updateSlideinModalClick"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog", "opendialog"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSlideinModalClick"] != null &&
                    typeof $steps["updateSlideinModalClick"] === "object" &&
                    typeof $steps["updateSlideinModalClick"].then === "function"
                  ) {
                    $steps["updateSlideinModalClick"] = await $steps[
                      "updateSlideinModalClick"
                    ];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button2", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                {"\u062a\u0627\u06cc\u06cc\u062f"}
              </Button>
              <div
                className={classNames(projectcss.all, sty.freeBox__faI6R)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateSlideinModalClick"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog", "opendialog"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSlideinModalClick"] != null &&
                    typeof $steps["updateSlideinModalClick"] === "object" &&
                    typeof $steps["updateSlideinModalClick"].then === "function"
                  ) {
                    $steps["updateSlideinModalClick"] = await $steps[
                      "updateSlideinModalClick"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zxESm
                  )}
                >
                  {"\u0628\u0633\u062a\u0646"}
                </div>
              </div>
            </Stack__>
          </Dialog>
          <Dialog
            data-plasmic-name={"dialog2"}
            data-plasmic-override={overrides.dialog2}
            className={classNames("__wab_instance", sty.dialog2)}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dialog2",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialog2",
              "opendialog"
            ])}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dLmVx
              )}
            >
              {
                "\u0641\u0627\u0635\u0644\u0647 \u0627\u0648\u0644\u06cc\u0646 \u0631\u0648\u0632 \u0642\u0627\u0639\u062f\u06af\u06cc \u062a\u0627 \u0634\u0631\u0648\u0639 \u0642\u0627\u0639\u062f\u06af\u06cc \u0628\u0639\u062f\u06cc\u062a \u0627\u0633\u062a.\n(\u062d\u0648\u0627\u0633\u062a \u0628\u0627\u0634\u0647 \u06a9\u0647 \u062a\u0639\u062f\u0627\u062f \u0631\u0648\u0632 \u067e\u0631\u06cc\u0648\u062f\u062a(\u062e\u0648\u0646\u0631\u06cc\u0632\u06cc) \u0631\u0648 \u0647\u0645 \u062d\u0633\u0627\u0628 \u06a9\u0646\u06cc)"
              }
            </div>
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.pickers2),
                data: (() => {
                  try {
                    return (() => {
                      return Array.from({ length: 64 - 15 }, (_, i) => ({
                        label: `${i + 17} روز`,
                        value: i + 17
                      }));
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })(),
                initialValue: generateStateValueProp($state, [
                  "pickers2",
                  "value"
                ]),
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "pickers2",
                    "value"
                  ]).apply(null, eventArgs);
                }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "pickers2.value"
                  }
                ],
                [],
                undefined ?? {},
                child$Props
              );
              initializePlasmicStates(
                $state,
                [
                  {
                    name: "pickers2.value",
                    initFunc: ({ $props, $state, $queries }) =>
                      (() => {
                        try {
                          return parseInt($ctx.query.cycle || 19);
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 9;
                          }
                          throw e;
                        }
                      })()
                  }
                ],
                []
              );
              return (
                <Pickers
                  data-plasmic-name={"pickers2"}
                  data-plasmic-override={overrides.pickers2}
                  {...child$Props}
                />
              );
            })()}
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__woCmI)}
            >
              <Button
                data-plasmic-name={"button4"}
                data-plasmic-override={overrides.button4}
                className={classNames("__wab_instance", sty.button4)}
                color={generateStateValueProp($state, ["button4", "color"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateDateOfBirth"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["cycle"]
                          },
                          operation: 0,
                          value: $state.pickers2.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDateOfBirth"] != null &&
                    typeof $steps["updateDateOfBirth"] === "object" &&
                    typeof $steps["updateDateOfBirth"].then === "function"
                  ) {
                    $steps["updateDateOfBirth"] = await $steps[
                      "updateDateOfBirth"
                    ];
                  }

                  $steps["updateSlideinModalClick"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog2", "opendialog"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSlideinModalClick"] != null &&
                    typeof $steps["updateSlideinModalClick"] === "object" &&
                    typeof $steps["updateSlideinModalClick"].then === "function"
                  ) {
                    $steps["updateSlideinModalClick"] = await $steps[
                      "updateSlideinModalClick"
                    ];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button4", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                {"\u062a\u0627\u06cc\u06cc\u062f"}
              </Button>
              <div
                className={classNames(projectcss.all, sty.freeBox__bh9WN)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateSlideinModalClick"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog2", "opendialog"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSlideinModalClick"] != null &&
                    typeof $steps["updateSlideinModalClick"] === "object" &&
                    typeof $steps["updateSlideinModalClick"].then === "function"
                  ) {
                    $steps["updateSlideinModalClick"] = await $steps[
                      "updateSlideinModalClick"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__krSi3
                  )}
                >
                  {"\u0628\u0633\u062a\u0646"}
                </div>
              </div>
            </Stack__>
          </Dialog>
          <Dialog
            data-plasmic-name={"dialog3"}
            data-plasmic-override={overrides.dialog3}
            className={classNames("__wab_instance", sty.dialog3)}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dialog3",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialog3",
              "opendialog"
            ])}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bsXaK
              )}
            >
              {
                "\u062a\u0627\u0631\u06cc\u062e \u0634\u0631\u0648\u0639 \u0642\u0627\u0639\u062f\u06af\u06cc \u0628\u0639\u062f\u06cc\u062a"
              }
            </div>
            <Pickers
              data-plasmic-name={"pickers3"}
              data-plasmic-override={overrides.pickers3}
              className={classNames("__wab_instance", sty.pickers3)}
              data={
                hasVariant(globalVariants, "screen", "mobile")
                  ? (() => {
                      try {
                        return $state.datenex;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return $state.datenex;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
              }
              initialValue={generateStateValueProp($state, [
                "pickers3",
                "value"
              ])}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["pickers3", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__dm7V1)}
            >
              <Button
                data-plasmic-name={"button5"}
                data-plasmic-override={overrides.button5}
                className={classNames("__wab_instance", sty.button5)}
                color={generateStateValueProp($state, ["button5", "color"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateDateOfBirth"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["nextTime"]
                          },
                          operation: 0,
                          value: $state.pickers3.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDateOfBirth"] != null &&
                    typeof $steps["updateDateOfBirth"] === "object" &&
                    typeof $steps["updateDateOfBirth"].then === "function"
                  ) {
                    $steps["updateDateOfBirth"] = await $steps[
                      "updateDateOfBirth"
                    ];
                  }

                  $steps["updateSlideinModalClick"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog3", "opendialog"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSlideinModalClick"] != null &&
                    typeof $steps["updateSlideinModalClick"] === "object" &&
                    typeof $steps["updateSlideinModalClick"].then === "function"
                  ) {
                    $steps["updateSlideinModalClick"] = await $steps[
                      "updateSlideinModalClick"
                    ];
                  }

                  $steps["updateNex"] =
                    $state.nextTime == -1
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["nex"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateNex"] != null &&
                    typeof $steps["updateNex"] === "object" &&
                    typeof $steps["updateNex"].then === "function"
                  ) {
                    $steps["updateNex"] = await $steps["updateNex"];
                  }

                  $steps["updateNex2"] =
                    $state.nextTime != -1
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["nex"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateNex2"] != null &&
                    typeof $steps["updateNex2"] === "object" &&
                    typeof $steps["updateNex2"].then === "function"
                  ) {
                    $steps["updateNex2"] = await $steps["updateNex2"];
                  }

                  $steps["updateLastTime"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["lastTime"]
                          },
                          operation: 0,
                          value: (() => {
                            if ($state.nextTime != -1) {
                              const date = new Date();
                              date.setDate(date.getDate() + $state.nextTime);
                              date.setDate(date.getDate() - $state.cycle);
                              const gy = date.getFullYear();
                              const gm = date.getMonth() + 1;
                              const gd = date.getDate();
                              return {
                                gy,
                                gm,
                                gd
                              };
                            } else {
                              return { date: "" };
                            }
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLastTime"] != null &&
                    typeof $steps["updateLastTime"] === "object" &&
                    typeof $steps["updateLastTime"].then === "function"
                  ) {
                    $steps["updateLastTime"] = await $steps["updateLastTime"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button5", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                {"\u062a\u0627\u06cc\u06cc\u062f"}
              </Button>
              <div
                className={classNames(projectcss.all, sty.freeBox___4Q89D)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateSlideinModalClick"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog3", "opendialog"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSlideinModalClick"] != null &&
                    typeof $steps["updateSlideinModalClick"] === "object" &&
                    typeof $steps["updateSlideinModalClick"].then === "function"
                  ) {
                    $steps["updateSlideinModalClick"] = await $steps[
                      "updateSlideinModalClick"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xxNCd
                  )}
                >
                  {"\u0628\u0633\u062a\u0646"}
                </div>
              </div>
            </Stack__>
          </Dialog>
          <Dialog
            data-plasmic-name={"dialog4"}
            data-plasmic-override={overrides.dialog4}
            className={classNames("__wab_instance", sty.dialog4)}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dialog4",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialog4",
              "opendialog"
            ])}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dhVd4
              )}
            >
              {
                "\u062a\u0627\u0631\u06cc\u062e \u0634\u0631\u0648\u0639 \u0622\u062e\u0631\u06cc\u0646 \u062f\u0648\u0631\u0647 \u067e\u0631\u06cc\u0648\u062f\u06cc"
              }
            </div>
            <Pickers
              data-plasmic-name={"pickers4"}
              data-plasmic-override={overrides.pickers4}
              className={classNames("__wab_instance", sty.pickers4)}
              data={
                hasVariant(globalVariants, "screen", "mobile")
                  ? (() => {
                      try {
                        return $state.datepas;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return $state.datepas;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
              }
              initialValue={generateStateValueProp($state, [
                "pickers4",
                "value"
              ])}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["pickers4", "value"]).apply(
                  null,
                  eventArgs
                );
              }}
            />

            <div className={classNames(projectcss.all, sty.freeBox___5JeJk)}>
              <Button
                data-plasmic-name={"button6"}
                data-plasmic-override={overrides.button6}
                className={classNames("__wab_instance", sty.button6)}
                color={generateStateValueProp($state, ["button6", "color"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateLasttime"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["lasttime"]
                          },
                          operation: 0,
                          value: $state.pickers4.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLasttime"] != null &&
                    typeof $steps["updateLasttime"] === "object" &&
                    typeof $steps["updateLasttime"].then === "function"
                  ) {
                    $steps["updateLasttime"] = await $steps["updateLasttime"];
                  }

                  $steps["updateDialog4Opendialog"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog4", "opendialog"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDialog4Opendialog"] != null &&
                    typeof $steps["updateDialog4Opendialog"] === "object" &&
                    typeof $steps["updateDialog4Opendialog"].then === "function"
                  ) {
                    $steps["updateDialog4Opendialog"] = await $steps[
                      "updateDialog4Opendialog"
                    ];
                  }

                  $steps["updateLastTime"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["lastTime"]
                          },
                          operation: 0,
                          value: (() => {
                            const date = new Date();
                            date.setDate(date.getDate() + $state.lasttime);
                            const gy = date.getFullYear();
                            const gm = date.getMonth() + 1;
                            const gd = date.getDate();
                            return {
                              gy,
                              gm,
                              gd
                            };
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLastTime"] != null &&
                    typeof $steps["updateLastTime"] === "object" &&
                    typeof $steps["updateLastTime"].then === "function"
                  ) {
                    $steps["updateLastTime"] = await $steps["updateLastTime"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button6", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                {"\u062a\u0627\u06cc\u06cc\u062f"}
              </Button>
              <div
                className={classNames(projectcss.all, sty.freeBox__nqWCe)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateSlideinModalClick"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog4", "opendialog"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSlideinModalClick"] != null &&
                    typeof $steps["updateSlideinModalClick"] === "object" &&
                    typeof $steps["updateSlideinModalClick"].then === "function"
                  ) {
                    $steps["updateSlideinModalClick"] = await $steps[
                      "updateSlideinModalClick"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kQfqR
                  )}
                >
                  {"\u0628\u0633\u062a\u0646"}
                </div>
              </div>
            </div>
          </Dialog>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "embedHtml",
    "sideEffect",
    "img",
    "dateOfBirthBox",
    "lastTimeBox",
    "lastTimeBox3",
    "lastTimeBox2",
    "section",
    "button3",
    "dialog",
    "pickers",
    "button2",
    "dialog2",
    "pickers2",
    "button4",
    "dialog3",
    "pickers3",
    "button5",
    "dialog4",
    "pickers4",
    "button6"
  ],
  embedHtml: ["embedHtml"],
  sideEffect: ["sideEffect"],
  img: ["img"],
  dateOfBirthBox: ["dateOfBirthBox"],
  lastTimeBox: ["lastTimeBox"],
  lastTimeBox3: ["lastTimeBox3"],
  lastTimeBox2: ["lastTimeBox2"],
  section: ["section", "button3"],
  button3: ["button3"],
  dialog: ["dialog", "pickers", "button2"],
  pickers: ["pickers"],
  button2: ["button2"],
  dialog2: ["dialog2", "pickers2", "button4"],
  pickers2: ["pickers2"],
  button4: ["button4"],
  dialog3: ["dialog3", "pickers3", "button5"],
  pickers3: ["pickers3"],
  button5: ["button5"],
  dialog4: ["dialog4", "pickers4", "button6"],
  pickers4: ["pickers4"],
  button6: ["button6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  sideEffect: typeof SideEffect;
  img: typeof PlasmicImg__;
  dateOfBirthBox: typeof AntdInput;
  lastTimeBox: typeof AntdInput;
  lastTimeBox3: typeof AntdInput;
  lastTimeBox2: typeof AntdInput;
  section: "section";
  button3: typeof Button;
  dialog: typeof Dialog;
  pickers: typeof Pickers;
  button2: typeof Button;
  dialog2: typeof Dialog;
  pickers2: typeof Pickers;
  button4: typeof Button;
  dialog3: typeof Dialog;
  pickers3: typeof Pickers;
  button5: typeof Button;
  dialog4: typeof Dialog;
  pickers4: typeof Pickers;
  button6: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSettingCycle3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSettingCycle3__VariantsArgs;
    args?: PlasmicSettingCycle3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSettingCycle3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSettingCycle3__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSettingCycle3__ArgProps,
          internalVariantPropNames: PlasmicSettingCycle3__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSettingCycle3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSettingCycle3";
  } else {
    func.displayName = `PlasmicSettingCycle3.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSettingCycle3 = Object.assign(
  // Top-level PlasmicSettingCycle3 renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    sideEffect: makeNodeComponent("sideEffect"),
    img: makeNodeComponent("img"),
    dateOfBirthBox: makeNodeComponent("dateOfBirthBox"),
    lastTimeBox: makeNodeComponent("lastTimeBox"),
    lastTimeBox3: makeNodeComponent("lastTimeBox3"),
    lastTimeBox2: makeNodeComponent("lastTimeBox2"),
    section: makeNodeComponent("section"),
    button3: makeNodeComponent("button3"),
    dialog: makeNodeComponent("dialog"),
    pickers: makeNodeComponent("pickers"),
    button2: makeNodeComponent("button2"),
    dialog2: makeNodeComponent("dialog2"),
    pickers2: makeNodeComponent("pickers2"),
    button4: makeNodeComponent("button4"),
    dialog3: makeNodeComponent("dialog3"),
    pickers3: makeNodeComponent("pickers3"),
    button5: makeNodeComponent("button5"),
    dialog4: makeNodeComponent("dialog4"),
    pickers4: makeNodeComponent("pickers4"),
    button6: makeNodeComponent("button6"),

    // Metadata about props expected for PlasmicSettingCycle3
    internalVariantProps: PlasmicSettingCycle3__VariantProps,
    internalArgProps: PlasmicSettingCycle3__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSettingCycle3;
/* prettier-ignore-end */
