/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: 1ruheQLCU5pc

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import CountdownNumber from "../../CountdownNumber"; // plasmic-import: JBCCrVmIFPYL/component
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from ""; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from ""; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicCountdown.module.css"; // plasmic-import: 1ruheQLCU5pc/css

createPlasmicElementProxy;

export type PlasmicCountdown__VariantMembers = {
  color: "green" | "red";
  date: "dey" | "moanth";
};
export type PlasmicCountdown__VariantsArgs = {
  color?: SingleChoiceArg<"green" | "red">;
  date?: SingleChoiceArg<"dey" | "moanth">;
};
type VariantPropType = keyof PlasmicCountdown__VariantsArgs;
export const PlasmicCountdown__VariantProps = new Array<VariantPropType>(
  "color",
  "date"
);

export type PlasmicCountdown__ArgsType = {
  remainingSeconds?: number;
  onRemainingSecondsChange?: (val: string) => void;
  targetTimeUtc?: string;
};
type ArgPropType = keyof PlasmicCountdown__ArgsType;
export const PlasmicCountdown__ArgProps = new Array<ArgPropType>(
  "remainingSeconds",
  "onRemainingSecondsChange",
  "targetTimeUtc"
);

export type PlasmicCountdown__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  timer?: Flex__<typeof Timer>;
};

export interface DefaultCountdownProps {
  remainingSeconds?: number;
  onRemainingSecondsChange?: (val: string) => void;
  targetTimeUtc?: string;
  color?: SingleChoiceArg<"green" | "red">;
  date?: SingleChoiceArg<"dey" | "moanth">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCountdown__RenderFunc(props: {
  variants: PlasmicCountdown__VariantsArgs;
  args: PlasmicCountdown__ArgsType;
  overrides: PlasmicCountdown__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          targetTimeUtc: "2025-12-10T23:26:25.224Z"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "remainingSeconds",
        type: "writable",
        variableType: "number",

        valueProp: "remainingSeconds",
        onChangeProp: "onRemainingSecondsChange"
      },
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      },
      {
        path: "date",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.date
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.root,
        {
          [sty.rootcolor_green]: hasVariant($state, "color", "green"),
          [sty.rootcolor_red]: hasVariant($state, "color", "red"),
          [sty.rootdate_moanth]: hasVariant($state, "date", "moanth")
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxcolor_green]: hasVariant($state, "color", "green"),
          [sty.freeBoxdate_moanth]: hasVariant($state, "date", "moanth"),
          [sty.freeBoxdate_moanth_color_green]:
            hasVariant($state, "date", "moanth") &&
            hasVariant($state, "color", "green")
        })}
      >
        <CountdownNumber
          className={classNames("__wab_instance", sty.countdownNumber__dJw6J, {
            [sty.countdownNumbercolor_green__dJw6Jzcge]: hasVariant(
              $state,
              "color",
              "green"
            ),
            [sty.countdownNumberdate_moanth__dJw6JrMljd]: hasVariant(
              $state,
              "date",
              "moanth"
            )
          })}
          number={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___77QVc,
                {
                  [sty.textcolor_green___77QVCzcge]: hasVariant(
                    $state,
                    "color",
                    "green"
                  ),
                  [sty.textdate_moanth___77QVCrMljd]: hasVariant(
                    $state,
                    "date",
                    "moanth"
                  )
                }
              )}
            >
              {hasVariant($state, "date", "moanth") ? (
                <React.Fragment>
                  {(() => {
                    try {
                      return Math.floor(
                        $state.remainingSeconds / 60 / 60 / 24 / 30
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "42";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              ) : (
                <React.Fragment>
                  {(() => {
                    try {
                      return Math.floor($state.remainingSeconds / 60 / 60 / 24);
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "42";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              )}
            </div>
          }
          unit={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qsTu,
                {
                  [sty.textcolor_green__qsTuzcge]: hasVariant(
                    $state,
                    "color",
                    "green"
                  ),
                  [sty.textdate_moanth__qsTurMljd]: hasVariant(
                    $state,
                    "date",
                    "moanth"
                  )
                }
              )}
            >
              {hasVariant($state, "date", "moanth")
                ? "\u0645\u0627\u0647"
                : "\u0631\u0648\u0632"}
            </div>
          }
        />

        {(hasVariant($state, "date", "moanth") ? true : false) ? (
          <CountdownNumber
            className={classNames(
              "__wab_instance",
              sty.countdownNumber__fO6Af,
              {
                [sty.countdownNumbercolor_green__fO6Afzcge]: hasVariant(
                  $state,
                  "color",
                  "green"
                ),
                [sty.countdownNumberdate_moanth__fO6AfrMljd]: hasVariant(
                  $state,
                  "date",
                  "moanth"
                )
              }
            )}
            number={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lPfgf,
                  {
                    [sty.textcolor_green__lPfgfzcge]: hasVariant(
                      $state,
                      "color",
                      "green"
                    ),
                    [sty.textdate_moanth__lPfgfrMljd]: hasVariant(
                      $state,
                      "date",
                      "moanth"
                    )
                  }
                )}
              >
                {hasVariant($state, "date", "moanth") &&
                hasVariant(globalVariants, "screen", "mobile") ? (
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          Math.floor($state.remainingSeconds / 60 / 60 / 24) %
                          30
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "42";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    {(() => {
                      try {
                        return Math.floor(
                          $state.remainingSeconds / 60 / 60 / 24
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "42";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                )}
              </div>
            }
            unit={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oilAg,
                  {
                    [sty.textcolor_green__oilAgzcge]: hasVariant(
                      $state,
                      "color",
                      "green"
                    ),
                    [sty.textdate_moanth__oilAgrMljd]: hasVariant(
                      $state,
                      "date",
                      "moanth"
                    )
                  }
                )}
              >
                {"\u0631\u0648\u0632"}
              </div>
            }
          />
        ) : null}
        <CountdownNumber
          className={classNames("__wab_instance", sty.countdownNumber__tPnLe, {
            [sty.countdownNumbercolor_green__tPnLezcge]: hasVariant(
              $state,
              "color",
              "green"
            ),
            [sty.countdownNumberdate_moanth__tPnLerMljd]: hasVariant(
              $state,
              "date",
              "moanth"
            )
          })}
          number={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nCs9,
                {
                  [sty.textcolor_green__nCs9Zcge]: hasVariant(
                    $state,
                    "color",
                    "green"
                  ),
                  [sty.textdate_moanth__nCs9RMljd]: hasVariant(
                    $state,
                    "date",
                    "moanth"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return Math.floor($state.remainingSeconds / 60 / 60) % 24;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "42";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          }
          unit={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gpy6Q,
                {
                  [sty.textcolor_green__gpy6Qzcge]: hasVariant(
                    $state,
                    "color",
                    "green"
                  )
                }
              )}
            >
              {"\u0633\u0627\u0639\u062a"}
            </div>
          }
        />

        <CountdownNumber
          className={classNames("__wab_instance", sty.countdownNumber___4HVd, {
            [sty.countdownNumbercolor_green___4HVdZcge]: hasVariant(
              $state,
              "color",
              "green"
            )
          })}
          number={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__u8Ay,
                {
                  [sty.textcolor_green__u8AyZcge]: hasVariant(
                    $state,
                    "color",
                    "green"
                  ),
                  [sty.textdate_moanth__u8AyRMljd]: hasVariant(
                    $state,
                    "date",
                    "moanth"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return Math.floor($state.remainingSeconds / 60) % 60;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "42";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          }
          unit={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rdxiz,
                {
                  [sty.textcolor_green__rdxiZzcge]: hasVariant(
                    $state,
                    "color",
                    "green"
                  )
                }
              )}
            >
              {"\u062f\u0642\u06cc\u0642\u0647"}
            </div>
          }
        />
      </div>
      <Timer
        data-plasmic-name={"timer"}
        data-plasmic-override={overrides.timer}
        className={classNames("__wab_instance", sty.timer)}
        intervalSeconds={1}
        isRunning={true}
        runWhileEditing={true}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "timer"],
  freeBox: ["freeBox"],
  timer: ["timer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  timer: typeof Timer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCountdown__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCountdown__VariantsArgs;
    args?: PlasmicCountdown__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCountdown__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCountdown__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCountdown__ArgProps,
          internalVariantPropNames: PlasmicCountdown__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCountdown__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCountdown";
  } else {
    func.displayName = `PlasmicCountdown.${nodeName}`;
  }
  return func;
}

export const PlasmicCountdown = Object.assign(
  // Top-level PlasmicCountdown renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    timer: makeNodeComponent("timer"),

    // Metadata about props expected for PlasmicCountdown
    internalVariantProps: PlasmicCountdown__VariantProps,
    internalArgProps: PlasmicCountdown__ArgProps
  }
);

export default PlasmicCountdown;
/* prettier-ignore-end */
