/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: seESvdNdvKDg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { Select } from "@/fragment/components/select"; // plasmic-import: 5Mch6ak-Pshg/codeComponent
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicSteps.module.css"; // plasmic-import: seESvdNdvKDg/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicSteps__VariantMembers = {
  steps: "_0" | "_1";
};
export type PlasmicSteps__VariantsArgs = {
  steps?: SingleChoiceArg<"_0" | "_1">;
};
type VariantPropType = keyof PlasmicSteps__VariantsArgs;
export const PlasmicSteps__VariantProps = new Array<VariantPropType>("steps");

export type PlasmicSteps__ArgsType = {
  step?: number;
  onStepChange?: (val: string) => void;
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSteps__ArgsType;
export const PlasmicSteps__ArgProps = new Array<ArgPropType>(
  "step",
  "onStepChange",
  "children",
  "slot"
);

export type PlasmicSteps__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultStepsProps {
  step?: number;
  onStepChange?: (val: string) => void;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  steps?: SingleChoiceArg<"_0" | "_1">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSteps__RenderFunc(props: {
  variants: PlasmicSteps__VariantsArgs;
  args: PlasmicSteps__ArgsType;
  overrides: PlasmicSteps__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "step",
        type: "writable",
        variableType: "number",

        valueProp: "step",
        onChangeProp: "onStepChange"
      },
      {
        path: "steps",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return "_" + $state.step;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.steps
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        { [sty.rootsteps__0]: hasVariant($state, "steps", "_0") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__sOUz9, {
          [sty.freeBoxsteps__0__sOUz9YKl9X]: hasVariant($state, "steps", "_0"),
          [sty.freeBoxsteps__1__sOUz9G63Bg]: hasVariant($state, "steps", "_1")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <div className={classNames(projectcss.all, sty.freeBox__csAne)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nV2Rp
                  )}
                >
                  {
                    "\u0628\u0631\u0627\u06cc \u0645\u062d\u0627\u0633\u0628\u0647 \u062f\u0642\u06cc\u0642 \u062a\u0631\u060c \u0628\u0647\u0645 \u0628\u06af\u0648 \u06a9\u0647 \u0622\u06cc\u0627 \u0627\u0645\u0631\u0648\u0632 \u0627\u0648\u0644\u06cc\u0646 \u0631\u0648\u0632\u06cc\u0647 \u06a9\u0647 \u067e\u0631\u06cc\u0648\u062f\u062a \u0634\u0631\u0648\u0639 \u0634\u062f\u0647\u061f"
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__cx5T8)}>
                <Button
                  className={classNames("__wab_instance", sty.button__vtbm6)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zdrPb
                    )}
                  >
                    {
                      "\u0628\u0644\u0647\u060c \u0631\u0648\u0632 \u0627\u0648\u0644\u0645\u0647"
                    }
                  </div>
                </Button>
                <Button
                  className={classNames("__wab_instance", sty.button__cjWDv)}
                  color={["sand"]}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nCxWv
                    )}
                  >
                    {
                      "\u0646\u0647\u060c \u0631\u0648\u0632 \u0627\u0648\u0644\u0645 \u0646\u06cc\u0633\u062a"
                    }
                  </div>
                </Button>
              </div>
            </React.Fragment>
          ),
          value: args.children
        })}
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__vmbsv, {
          [sty.freeBoxsteps__0__vmbsVyKl9X]: hasVariant($state, "steps", "_0"),
          [sty.freeBoxsteps__1__vmbsVg63Bg]: hasVariant($state, "steps", "_1")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9Rd2
                )}
              >
                {
                  "\u0631\u0648\u0632 \u0686\u0646\u062f\u0645\u062a\u0647\u061f"
                }
              </div>
              <Select
                options={[
                  { label: "Option 1", value: "option1" },
                  { label: "Option 2", value: "option2" }
                ]}
                triggerClassName={classNames(
                  "__wab_instance",
                  sty.fragmentSelect__k7Rz4
                )}
              />

              <div className={classNames(projectcss.all, sty.freeBox__uu73Y)}>
                <Button
                  className={classNames("__wab_instance", sty.button__guCn0)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bi90
                    )}
                  >
                    {"\u062a\u0627\u06cc\u06cc\u062f"}
                  </div>
                </Button>
              </div>
            </React.Fragment>
          ),
          value: args.slot
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSteps__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSteps__VariantsArgs;
    args?: PlasmicSteps__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicSteps__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicSteps__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSteps__ArgProps,
          internalVariantPropNames: PlasmicSteps__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSteps__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSteps";
  } else {
    func.displayName = `PlasmicSteps.${nodeName}`;
  }
  return func;
}

export const PlasmicSteps = Object.assign(
  // Top-level PlasmicSteps renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSteps
    internalVariantProps: PlasmicSteps__VariantProps,
    internalArgProps: PlasmicSteps__ArgProps
  }
);

export default PlasmicSteps;
/* prettier-ignore-end */
