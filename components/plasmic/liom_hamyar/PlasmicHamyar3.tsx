/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: cnAAvxWM15-_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import MainHamyar from "../../MainHamyar"; // plasmic-import: dfIi25835BgX/component
import FooterMain from "../../FooterMain"; // plasmic-import: ev8_tr4YKTDz/component
import MainHeader from "../../MainHeader"; // plasmic-import: 1YQK_N8j3twT/component
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Dialog from "../../Dialog"; // plasmic-import: 6XHfwWx1PCn8/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { DialogTitle } from "@plasmicpkgs/radix-ui";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Subscription from "../../Subscription"; // plasmic-import: RkqUeSl2AMb8/component
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Reminder from "../../Reminder"; // plasmic-import: 3v9tn6uUJCPM/component
import { BackHandler } from "@/components/BackHandler"; // plasmic-import: wpIQCsQJqUoV/codeComponent
import ReminderSetting from "../../ReminderSetting"; // plasmic-import: VZcPBQBUFNbT/component
import SettingCycle4 from "../../SettingCycle4"; // plasmic-import: C5hqeG28n8GP/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: wNUwxS5tO1GX/component
import EditProfile2 from "../../EditProfile2"; // plasmic-import: BZ95kklWU6Jb/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicHamyar3.module.css"; // plasmic-import: cnAAvxWM15-_/css

import Icon185Icon from "./icons/PlasmicIcon__Icon185"; // plasmic-import: 3QmHdQOUm1zK/icon
import Icon271Icon from "./icons/PlasmicIcon__Icon271"; // plasmic-import: vZy72Clr16kL/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: Hrcd2gLhG27X/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: V1QgQzmgWP2T/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: H9d2pdUvXD_1/icon
import Icon272Icon from "./icons/PlasmicIcon__Icon272"; // plasmic-import: HLKs0puyq9Ra/icon
import Icon142Icon from "./icons/PlasmicIcon__Icon142"; // plasmic-import: SJsM-_NDX4Yl/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: 32haUKsu6raY/icon

createPlasmicElementProxy;

export type PlasmicHamyar3__VariantMembers = {
  lackOfCourseInformation: "lackOfCourseInformation";
  noPartner: "noPartner";
  remindersetting: "remindersetting";
  page: "reminder" | "unnamedVariant";
  editCycle: "editCycle";
  edit: "edit";
};
export type PlasmicHamyar3__VariantsArgs = {
  lackOfCourseInformation?: SingleBooleanChoiceArg<"lackOfCourseInformation">;
  noPartner?: SingleBooleanChoiceArg<"noPartner">;
  remindersetting?: SingleBooleanChoiceArg<"remindersetting">;
  page?: SingleChoiceArg<"reminder" | "unnamedVariant">;
  editCycle?: SingleBooleanChoiceArg<"editCycle">;
  edit?: SingleBooleanChoiceArg<"edit">;
};
type VariantPropType = keyof PlasmicHamyar3__VariantsArgs;
export const PlasmicHamyar3__VariantProps = new Array<VariantPropType>(
  "lackOfCourseInformation",
  "noPartner",
  "remindersetting",
  "page",
  "editCycle",
  "edit"
);

export type PlasmicHamyar3__ArgsType = {};
type ArgPropType = keyof PlasmicHamyar3__ArgsType;
export const PlasmicHamyar3__ArgProps = new Array<ArgPropType>();

export type PlasmicHamyar3__OverridesType = {
  root?: Flex__<"div">;
  main?: Flex__<"div">;
  mainHamyar?: Flex__<typeof MainHamyar>;
  footerMain?: Flex__<typeof FooterMain>;
  mainHeader?: Flex__<typeof MainHeader>;
  button?: Flex__<typeof Button>;
  embedHtml?: Flex__<typeof Embed>;
  dialog?: Flex__<typeof Dialog>;
  shopDialog?: Flex__<typeof ApiRequest>;
  dialogTitle?: Flex__<typeof DialogTitle>;
  h5?: Flex__<"h5">;
  input4?: Flex__<typeof AntdInput>;
  button12?: Flex__<typeof Button>;
  button8?: Flex__<typeof Button>;
  dialog2?: Flex__<typeof Dialog>;
  subscription3?: Flex__<typeof Subscription>;
  button11?: Flex__<typeof Button>;
  dialog3?: Flex__<typeof Dialog>;
  lottie?: Flex__<typeof LottieWrapper>;
  button13?: Flex__<typeof Button>;
  img?: Flex__<typeof PlasmicImg__>;
  reminder2?: Flex__<typeof Reminder>;
  reminderSetting?: Flex__<typeof ReminderSetting>;
  settingCycle4?: Flex__<typeof SettingCycle4>;
  shopPage?: Flex__<typeof AntdModal>;
  ol?: Flex__<"ol">;
  ul?: Flex__<"ul">;
  shopText2?: Flex__<typeof AntdModal>;
  input2?: Flex__<typeof AntdInput>;
  button5?: Flex__<typeof Button>;
  button6?: Flex__<typeof Button>;
  button10?: Flex__<typeof Button>;
  timer?: Flex__<typeof Timer>;
  headerLiom?: Flex__<typeof HeaderLiom>;
  editProfile2?: Flex__<typeof EditProfile2>;
  remember?: Flex__<typeof ApiRequest>;
};

export interface DefaultHamyar3Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHamyar3__RenderFunc(props: {
  variants: PlasmicHamyar3__VariantsArgs;
  args: PlasmicHamyar3__ArgsType;
  overrides: PlasmicHamyar3__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "itemtodo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "r",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.r;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "m",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.m;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "subscriptionCurrentIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let __plasmic_ret = undefined;
                for (let i = 0; i < $state.shop.data.result.length; i++) {
                  if ($state.shop.data.result[i].selected == 1) {
                    return i;
                  }
                }
                return __plasmic_ret;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "buyId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.shop.data.result.find(item => item.selected === 1)
                .id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "discountCode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "selectedShop",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.shop.data.result.findIndex(
                item => item.selected === 1
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "tokenUser",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.mainHamyar.token;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "visiblebox",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "5"
      },
      {
        path: "loadingshop",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "discountBox",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "expdate",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let future_date = new Date(
                  $state.userdata.result.man.hamyarTime.year,
                  $state.userdata.result.man.hamyarTime.month - 1,
                  $state.userdata.result.man.hamyarTime.day,
                  $state.userdata.result.man.hamyarTime.hour + 3,
                  $state.userdata.result.man.hamyarTime.minute,
                  $state.userdata.result.man.hamyarTime.second
                );
                return future_date.setTime(future_date.getTime());
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "shopPage.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "guideShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let value = localStorage.getItem("guideShow");
                if (value) {
                  return false;
                } else {
                  return true;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
      },
      {
        path: "payam",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            pms: [
              "\u0639\u0634\u0642\u0645\u060c \u0647\u0631 \u0627\u062a\u0641\u0627\u0642\u06cc \u0628\u06cc\u0641\u062a\u0647 \u0645\u0646 \u0647\u0645\u06cc\u0634\u0647 \u067e\u06cc\u0634\u062a\u0645. \u0647\u0631 \u0648\u0642\u062a \u062d\u0633 \u06a9\u0631\u062f\u06cc \u0646\u06cc\u0627\u0632 \u062f\u0627\u0631\u06cc\u060c \u0628\u062f\u0648\u0646 \u06a9\u0647 \u0645\u0646 \u0627\u06cc\u0646\u062c\u0627\u0645 \u0648 \u0647\u06cc\u0686\u200c\u0648\u0642\u062a \u062a\u0646\u0647\u0627\u062a \u0646\u0645\u06cc\u200c\u0630\u0627\u0631\u0645. \u062a\u0648 \u0642\u0644\u0628\u0645\u06cc \u0648 \u0647\u0645\u06cc\u0634\u0647 \u0628\u0627 \u0647\u0645\u06cc\u0645! ",
              "\u0639\u0634\u0642\u0645\u060c \u0647\u0631 \u0631\u0648\u0632 \u06a9\u0647 \u0645\u06cc\u200c\u06af\u0630\u0631\u0647 \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u0647\u0645\u06cc\u0634\u0647 \u062d\u0633 \u0645\u06cc\u200c\u06a9\u0646\u0645 \u062a\u0648 \u0628\u0647\u062a\u0631\u06cc\u0646 \u0627\u062a\u0641\u0627\u0642 \u0632\u0646\u062f\u06af\u06cc\u0645\u06cc. \u0628\u062f\u0648\u0646 \u06a9\u0647 \u062a\u0648 \u0647\u0631 \u0634\u0631\u0627\u06cc\u0637\u06cc \u0645\u0646 \u06a9\u0646\u0627\u0631\u062a\u0645 \u0648 \u0647\u06cc\u0686\u200c\u0686\u06cc\u0632\u06cc \u0646\u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0627\u06cc\u0646\u0648 \u0639\u0648\u0636 \u06a9\u0646\u0647. \u062f\u0644\u0645 \u0647\u0645\u06cc\u0634\u0647 \u067e\u06cc\u0634 \u062a\u0648\u0626\u0647! ",
              "\u0642\u0644\u0628\u0645\u060c \u0647\u0631 \u0644\u062d\u0638\u0647 \u0628\u0647 \u062a\u0648 \u0641\u06a9\u0631 \u0645\u06cc\u200c\u06a9\u0646\u0645 \u0628\u06cc\u0634\u062a\u0631 \u0645\u06cc\u0641\u0647\u0645\u0645 \u0647\u06cc\u0686\u200c\u06a9\u0633 \u062c\u0627\u062a\u0648 \u0646\u0645\u06cc\u06af\u06cc\u0631\u0647. \u0647\u0631 \u062c\u0627 \u0628\u0631\u06cc\u060c \u0645\u0646 \u0628\u0627\u0647\u0627\u062a\u0645 \u0648 \u0647\u06cc\u0686\u200c\u0648\u0642\u062a \u062a\u0646\u0647\u0627\u062a \u0646\u0645\u06cc\u200c\u0630\u0627\u0631\u0645. \u062a\u0648 \u0647\u0645\u0647 \u062f\u0646\u06cc\u0627\u06cc \u0645\u0646\u06cc. ",
              "\u0639\u0632\u06cc\u0632 \u062f\u0644\u0645\u060c \u0647\u0631 \u0648\u0642\u062a \u062d\u0633 \u06a9\u0631\u062f\u06cc \u0632\u0646\u062f\u06af\u06cc \u0633\u062e\u062a \u0645\u06cc\u06af\u0630\u0631\u0647\u060c \u0628\u062f\u0648\u0646 \u06a9\u0647 \u0645\u0646 \u0627\u06cc\u0646\u062c\u0627\u0645. \u0628\u0627 \u0647\u0645 \u0627\u0632 \u067e\u0633 \u0647\u0645\u0647\u200c\u0686\u06cc \u0628\u0631\u0645\u06cc\u0627\u06cc\u0645\u060c \u0686\u0648\u0646 \u0647\u06cc\u0686\u200c\u0686\u06cc\u0632\u06cc \u0628\u0631\u0627\u06cc \u0645\u0646 \u0645\u0647\u0645\u200c\u062a\u0631 \u0627\u0632 \u062a\u0648 \u0646\u06cc\u0633\u062a. ",
              "\u0639\u0634\u0642\u0645\u060c \u0648\u0642\u062a\u06cc \u0628\u0647\u062a \u0641\u06a9\u0631 \u0645\u06cc\u200c\u06a9\u0646\u0645\u060c \u0647\u0645\u0647\u200c\u0686\u06cc\u0632 \u0642\u0634\u0646\u06af\u200c\u062a\u0631 \u0645\u06cc\u200c\u0634\u0647. \u0628\u062f\u0648\u0646 \u06a9\u0647 \u0647\u0645\u06cc\u0634\u0647 \u062a\u0648 \u0642\u0644\u0628 \u0645\u0646\u06cc\u060c \u0647\u0631\u062c\u0627 \u06a9\u0647 \u0628\u0627\u0634\u06cc\u060c \u0645\u0646 \u06a9\u0646\u0627\u0631\u062a\u0645! ",
              "\u0639\u0632\u06cc\u0632\u0645\u060c \u0645\u06cc\u200c\u062f\u0648\u0646\u06cc \u06a9\u0647 \u062a\u0648 \u0628\u0647\u062a\u0631\u06cc\u0646 \u0628\u062e\u0634 \u0632\u0646\u062f\u06af\u06cc \u0645\u0646\u06cc. \u0647\u0631 \u0644\u062d\u0638\u0647\u200c\u0627\u06cc \u06a9\u0647 \u0628\u0627 \u062a\u0648\u0627\u0645\u060c \u0645\u062b\u0644 \u06cc\u06a9 \u0631\u0648\u06cc\u0627\u0633\u062a \u0648 \u062f\u0644\u0645 \u0645\u06cc\u200c\u062e\u0648\u0627\u062f \u0647\u06cc\u0686\u200c\u0648\u0642\u062a \u062a\u0645\u0648\u0645 \u0646\u0634\u0647. "
            ]
          },
          {
            blood: [
              "\u0639\u0634\u0642\u0645\u060c \u062a\u0648 \u0645\u062b\u0644 \u062e\u0648\u0646 \u062a\u0648\u06cc \u0631\u06af\u0627\u0645\u06cc. \u0628\u062f\u0648\u0646 \u062a\u0648 \u0632\u0646\u062f\u06af\u06cc \u0628\u0631\u0627\u0645 \u0645\u0639\u0646\u06cc \u0646\u062f\u0627\u0631\u0647. \u0644\u062d\u0638\u0647 \u0644\u062d\u0638\u0647 \u0628\u0627 \u062a\u0648 \u0628\u0648\u062f\u0646\u060c \u0645\u062b\u0644 \u0631\u0648\u06cc\u0627\u0633\u062a! ",
              "\u0646\u0641\u0633\u0645\u060c \u0647\u0631 \u0631\u0648\u0632 \u0628\u06cc\u0634\u062a\u0631 \u0639\u0627\u0634\u0642\u062a \u0645\u06cc\u200c\u0634\u0645. \u062a\u0648 \u0646\u0647 \u062a\u0646\u0647\u0627 \u0639\u0634\u0642 \u0645\u0646\u06cc\u060c \u0628\u0647\u062a\u0631\u06cc\u0646 \u062f\u0648\u0633\u062a \u0645\u0646\u0645 \u0647\u0633\u062a\u06cc. \u0646\u0645\u06cc\u200c\u062a\u0648\u0646\u0645 \u062a\u0635\u0648\u0631 \u06a9\u0646\u0645 \u0628\u062f\u0648\u0646 \u062a\u0648 \u0686\u0637\u0648\u0631 \u0645\u06cc\u200c\u06af\u0630\u0631\u0647. ",
              "\u0639\u0645\u0631\u0645\u060c \u0628\u0627 \u062a\u0648 \u0632\u0646\u062f\u06af\u06cc \u0632\u06cc\u0628\u0627\u0633\u062a. \u0686\u0648\u0646 \u0645\u06cc\u062a\u0648\u0646\u0645 \u0647\u0631 \u0631\u0648\u0632 \u062e\u0648\u062f\u0645\u0648 \u062a\u0648 \u0686\u0634\u0645\u0627\u062a \u0628\u0628\u06cc\u0646\u0645. ",
              "\u0642\u0644\u0628\u0645\u060c \u062a\u0648 \u0645\u062b\u0644 \u0646\u0648\u0631 \u062a\u0648\u06cc \u0632\u0646\u062f\u06af\u06cc\u0645 \u0645\u06cc\u200c\u062f\u0631\u062e\u0634\u06cc. \u0645\u06cc\u200c\u062f\u0648\u0646\u0645 \u06a9\u0647 \u0628\u0627 \u062a\u0648 \u0645\u06cc\u200c\u062a\u0648\u0646\u0645 \u0627\u0632 \u067e\u0633 \u0647\u0631\u0686\u06cc\u0632\u06cc \u0628\u0631\u0628\u06cc\u0627\u0645. \u0645\u0631\u0633\u06cc \u06a9\u0646\u0627\u0631\u0645\u06cc. ",
              "\u0639\u0634\u0642\u0645\u060c \u0647\u0631 \u0628\u0627\u0631 \u0628\u0647 \u0686\u0634\u0645\u0627\u06cc \u0642\u0634\u0646\u06af\u062a \u0646\u06af\u0627\u0647 \u0645\u06cc\u200c\u06a9\u0646\u0645\u060c \u062d\u0633 \u0645\u06cc\u200c\u06a9\u0646\u0645 \u0647\u06cc\u0686 \u0686\u06cc\u0632\u06cc \u0646\u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0645\u0627 \u0631\u0648 \u0627\u0632 \u0647\u0645 \u062c\u062f\u0627 \u06a9\u0646\u0647. \u062a\u0648 \u0647\u0645\u06cc\u0634\u0647 \u062a\u0648\u06cc \u0642\u0644\u0628 \u0645\u0646\u06cc. ",
              "\u0639\u0632\u06cc\u0632 \u062f\u0644\u0645\u060c \u062a\u0648 \u062f\u0644\u06cc\u0644 \u0644\u0628\u062e\u0646\u062f\u0647\u0627\u06cc \u0645\u0646\u06cc. \u062a\u0648 \u0645\u062b\u0644 \u06cc\u06a9 \u0631\u0627\u0632 \u0642\u0634\u0646\u06af \u062a\u0648\u06cc \u0642\u0644\u0628\u0645\u06cc \u0648 \u0647\u0631 \u0631\u0648\u0632 \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u062f\u06cc\u0631\u0648\u0632 \u0639\u0627\u0634\u0642\u062a\u0645. "
            ]
          },
          {
            white: [
              "\u062f\u0646\u06cc\u0627\u06cc \u0645\u0646\u060c \u062a\u0648 \u0631\u0648 \u062e\u06cc\u0644\u06cc \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u0627\u06cc\u0646\u06a9\u0647 \u0628\u062a\u0648\u0646\u0645 \u0628\u0647 \u0632\u0628\u0648\u0646 \u0628\u06cc\u0627\u0631\u0645\u060c\u062f\u0648\u0633\u062a \u062f\u0627\u0631\u0645 ...",
              "\u0639\u0634\u0642\u0645\u060c \u0648\u0642\u062a\u06cc \u0645\u06cc\u062e\u0646\u062f\u06cc \u062f\u0646\u06cc\u0627\u0645 \u067e\u0631 \u0631\u0646\u06af \u0645\u06cc\u0634\u0647 \u0648 \u063a\u0645 \u0647\u0627\u0645 \u0641\u0631\u0627\u0631\u06cc \u067e\u0633 \u0647\u0645\u06cc\u0634\u0647 \u0628\u062e\u0646\u062f. ",
              "\u062c\u0648\u0646\u0645\u060c \u062a\u0646\u0647\u0627 \u0628\u0647\u0648\u0646\u0647 \u0632\u0646\u062f\u06af\u06cc \u06a9\u0631\u062f\u0646\u0645 \u062a\u0648\u06cc\u06cc. \u0645\u0645\u0646\u0648\u0646\u0645 \u06a9\u0647 \u0647\u0633\u062a\u06cc. ",
              "\u0646\u0641\u0633\u0645\u060c \u062a\u0648 \u0647\u0645\u0648\u0646 \u06a9\u0633\u06cc \u0647\u0633\u062a\u06cc \u06a9\u0647 \u0645\u06cc\u200c\u062e\u0648\u0627\u0645 \u0647\u0645\u06cc\u0634\u0647 \u06a9\u0646\u0627\u0631\u0645 \u0628\u0627\u0634\u0647. \u0647\u0645\u06cc\u0646 \u06a9\u0647 \u062a\u0648 \u0647\u0633\u062a\u06cc \u0628\u0631\u0627\u0645 \u06a9\u0627\u0641\u06cc\u0647. ",
              "\u0639\u0634\u0642\u0645\u060c \u0648\u0642\u062a\u06cc \u06a9\u0646\u0627\u0631\u062a\u0645\u060c \u0627\u0646\u06af\u0627\u0631 \u0647\u0645\u0647 \u0686\u06cc\u0632 \u0632\u06cc\u0628\u0627\u062a\u0631 \u0645\u06cc\u0634\u0647. \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u06a9\u0644 \u062f\u0646\u06cc\u0627 \u062f\u0648\u0633\u062a \u062f\u0627\u0631\u0645. ",
              "\u0639\u0632\u06cc\u0632 \u062f\u0644\u0645\u060c \u0647\u0631 \u0631\u0648\u0632 \u06a9\u0647 \u0645\u06cc\u200c\u0628\u06cc\u0646\u0645\u062a\u060c \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u0642\u0628\u0644 \u0645\u06cc\u0641\u0647\u0645\u0645 \u06a9\u0647 \u0686\u0642\u062f\u0631 \u062a\u0648 \u0632\u06cc\u0628\u0627\u06cc\u06cc. "
            ]
          }
        ]
      },
      {
        path: "p",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const whiteMessages =
                  $state.payam.find(item => item[$state.cyclebox.cycle])?.[
                    $state.cyclebox.cycle
                  ] || [];
                const randomMessage =
                  whiteMessages.length > 0
                    ? whiteMessages[
                        Math.floor(Math.random() * whiteMessages.length)
                      ]
                    : "";
                return randomMessage;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dosAndDonts",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          blood: {
            todo: [
              {
                title:
                  "\u06a9\u0645\u06a9 \u062a\u0648 \u06a9\u0627\u0631\u0627\u06cc \u062e\u0648\u0646\u0647",
                desc: "\u062f\u0631 \u062f\u0648\u0631\u0627\u0646 \u067e\u0631\u06cc\u0648\u062f\u060c \u0627\u0646\u0631\u0698\u06cc \u06a9\u0645\u062a\u0631\u06cc \u062f\u0627\u0631\u0647 \u0648 \u0645\u0645\u06a9\u0646\u0647 \u0627\u062d\u0633\u0627\u0633 \u062e\u0633\u062a\u06af\u06cc \u06a9\u0646\u0647. \u067e\u0633 \u062a\u0648 \u06a9\u0627\u0631\u0647\u0627\u06cc \u062e\u0648\u0646\u0647 \u0628\u0647\u0634 \u06a9\u0645\u06a9 \u06a9\u0646 \u062a\u0627 \u0647\u0645 \u0627\u0632 \u0644\u062d\u0627\u0638 \u0641\u06cc\u0632\u06cc\u06a9\u06cc \u0641\u0634\u0627\u0631 \u06a9\u0645\u062a\u0631\u06cc \u0631\u0648\u0634 \u0628\u0627\u0634\u0647 \u0648 \u0647\u0645 \u062d\u0633 \u06a9\u0646\u0647 \u06a9\u0647 \u062a\u0646\u0647\u0627 \u0646\u06cc\u0633\u062a.",
                icon: "\ud83e\uddf9",
                type: "menstruation"
              },
              {
                title:
                  "\u0627\u0628\u0631\u0627\u0632 \u0627\u062d\u0633\u0627\u0633\u0627\u062a",
                desc: "\u0627\u06cc\u0646 \u0631\u0648\u0632\u0647\u0627 \u0646\u0648\u0633\u0627\u0646\u0627\u062a \u062e\u0644\u0642\u06cc \u0634\u062f\u06cc\u062f\u06cc \u062f\u0627\u0631\u0647 \u0648 \u0645\u0645\u06a9\u0646\u0647 \u0628\u0647 \u0645\u062d\u0628\u062a \u0648 \u062a\u0648\u062c\u0647 \u0628\u06cc\u0634\u062a\u0631\u06cc \u0646\u06cc\u0627\u0632 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u0647. \u0628\u0647\u062a\u0631\u0647 \u0628\u06cc\u0634\u062a\u0631 \u0627\u0628\u0631\u0627\u0632 \u0627\u062d\u0633\u0627\u0633\u0627\u062a \u06a9\u0646\u06cc\u060c \u062d\u0645\u0627\u06cc\u062a\u0634 \u06a9\u0646\u06cc \u0648 \u0628\u0647\u0634 \u0646\u0634\u0648\u0646 \u0628\u062f\u06cc \u06a9\u0647 \u062f\u0631\u06a9\u0634 \u0645\u06cc\u200c\u06a9\u0646\u06cc.",
                icon: "\ud83d\udc96",
                type: "menstruation"
              },
              {
                title: "\u0645\u0627\u0633\u0627\u0698",
                desc: "\u06cc\u06a9 \u0645\u0627\u0633\u0627\u0698 \u0645\u0644\u0627\u06cc\u0645 \u0645\u062e\u0635\u0648\u0635\u0627\u064b \u0628\u0631\u0627\u06cc \u06a9\u0645\u0631 \u0648 \u0634\u06a9\u0645\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u06a9\u0645\u06a9 \u0628\u0632\u0631\u06af\u06cc \u0628\u0647 \u062a\u0633\u06a9\u06cc\u0646 \u062f\u0631\u062f\u0647\u0627\u0634 \u06a9\u0646\u0647 \u0648 \u062d\u0633 \u0631\u0627\u062d\u062a\u06cc \u0628\u06cc\u0634\u062a\u0631\u06cc \u0628\u0647\u0634 \u0628\u062f\u0647.",
                icon: "\ud83d\udc86\ud83c\udffb\u200d\u2640\ufe0f",
                type: "menstruation"
              }
            ],
            notToDo: [
              {
                title:
                  "\u0627\u0646\u062a\u0642\u0627\u062f \u0627\u0632 \u062e\u0644\u0642 \u0648 \u062e\u0648",
                desc: "\u0646\u0648\u0633\u0627\u0646\u0627\u062a \u0647\u0648\u0631\u0645\u0648\u0646\u06cc \u0627\u06cc\u0646 \u062f\u0648\u0631\u0647 \u0628\u0627\u0639\u062b \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u062e\u0644\u0642\u06cc \u0645\u06cc\u200c\u0634\u0647. \u0627\u06af\u0631 \u0645\u06cc\u200c\u0628\u06cc\u0646\u06cc \u06a9\u0647 \u0639\u0635\u0628\u06cc \u06cc\u0627 \u06a9\u0645\u200c\u062d\u0648\u0635\u0644\u0647 \u0634\u062f\u0647\u060c \u0627\u0632\u0634 \u0627\u0646\u062a\u0642\u0627\u062f \u0646\u06a9\u0646 \u0648 \u0633\u0639\u06cc \u06a9\u0646 \u0634\u0631\u0627\u06cc\u0637 \u0631\u0648 \u062f\u0631\u06a9 \u06a9\u0646\u06cc.",
                icon: "\ud83d\ude20",
                type: "menstruation"
              },
              {
                title:
                  "\u0628\u06cc\u200c\u062a\u0648\u062c\u0647\u06cc \u0628\u0647 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634",
                desc: "\u062f\u0631 \u0627\u06cc\u0646 \u062f\u0648\u0631\u0627\u0646\u060c \u0645\u0645\u06a9\u0646\u0647 \u062d\u0633\u0627\u0633\u200c\u062a\u0631 \u0628\u0634\u0647 \u0648 \u0628\u0647 \u062a\u0648\u062c\u0647 \u0628\u06cc\u0634\u062a\u0631\u06cc \u0646\u06cc\u0627\u0632 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u0647. \u0628\u06cc\u200c\u062a\u0648\u062c\u0647\u06cc \u0628\u0647 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634 \u06cc\u0627 \u0646\u0627\u062f\u06cc\u062f\u0647 \u06af\u0631\u0641\u062a\u0646 \u0646\u06cc\u0627\u0632\u0647\u0627\u0634 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0628\u0627\u0639\u062b \u062f\u0644\u062e\u0648\u0631\u06cc \u0648 \u0627\u062d\u0633\u0627\u0633 \u062a\u0646\u0647\u0627\u06cc\u06cc \u0628\u0634\u0647.",
                icon: "\ud83d\ude47\ud83c\udffb\u200d\u2640\ufe0f",
                type: "menstruation"
              },
              {
                title:
                  "\u0628\u0631\u06cc\u062f\u0646 \u0627\u0631\u062a\u0628\u0627\u0637",
                desc: "\u0642\u0637\u0639 \u06a9\u0631\u062f\u0646 \u0627\u0631\u062a\u0628\u0627\u0637 \u06cc\u0627 \u0641\u0627\u0635\u0644\u0647 \u06af\u0631\u0641\u062a\u0646 \u0627\u0632\u0634\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0628\u0627\u0639\u062b \u0628\u0634\u0647 \u062d\u0633 \u06a9\u0646\u0647 \u062a\u0646\u0647\u0627\u0633\u062a \u0648 \u0627\u0632 \u062d\u0645\u0627\u06cc\u062a \u062a\u0648 \u0645\u062d\u0631\u0648\u0645 \u0634\u062f\u0647. \u0628\u0647\u062a\u0631\u0647 \u0627\u0631\u062a\u0628\u0627\u0637\u062a \u0631\u0648 \u062d\u0641\u0638 \u06a9\u0646\u06cc \u0648 \u0647\u0645\u0631\u0627\u0647\u0634 \u0628\u0627\u0634\u06cc.",
                icon: "\ud83d\ude45\ud83c\udffb\u200d\u2642\ufe0f",
                type: "menstruation"
              }
            ]
          },
          pms: {
            todo: [
              {
                title: "\u0635\u0628\u0648\u0631 \u0628\u0648\u062f\u0646",
                desc: "\u062a\u0648 \u0627\u06cc\u0646 \u0631\u0648\u0632\u0647\u0627 \u06a9\u0645\u06cc \u0635\u0628\u0648\u0631 \u0628\u0627\u0634. \u0645\u0645\u06a9\u0646\u0647 \u067e\u0627\u0631\u062a\u0646\u0631\u062a \u0628\u0627 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0647\u0648\u0631\u0645\u0648\u0646\u06cc \u0648 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u06cc \u062f\u0633\u062a \u0648 \u067e\u0646\u062c\u0647 \u0646\u0631\u0645 \u06a9\u0646\u0647. \u0628\u0627 \u062f\u0631\u06a9 \u0648 \u062d\u0645\u0627\u06cc\u062a \u0627\u0632\u0634\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc\u062f \u0627\u06cc\u0646 \u062f\u0648\u0631\u0647 \u0631\u0648 \u0631\u0627\u062d\u062a\u200c\u062a\u0631 \u0628\u06af\u0630\u0631\u0648\u0646\u06cc\u062f.",
                icon: "\ud83d\udc96",
                type: "pms"
              },
              {
                title:
                  "\u062d\u0645\u0627\u06cc\u062a \u0639\u0627\u0637\u0641\u06cc",
                desc: "\u062e\u06cc\u0644\u06cc \u0645\u0647\u0645\u0647 \u06a9\u0647 \u062f\u0631 \u0627\u06cc\u0646 \u0631\u0648\u0632\u0647\u0627 \u0628\u0627\u0632\u0634 \u062d\u0645\u0627\u06cc\u062a \u0639\u0627\u0637\u0641\u06cc \u06a9\u0646\u06cc. \u0627\u0628\u0631\u0627\u0632 \u0645\u062d\u0628\u062a \u0648 \u062a\u0648\u062c\u0647 \u062a\u0648 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u062d\u0627\u0644\u0634 \u0631\u0648 \u0628\u0647\u062a\u0631 \u06a9\u0646\u0647. \u06cc\u06a9 \u06a9\u0644\u0645\u0647 \u0645\u062d\u0628\u062a\u200c\u0622\u0645\u06cc\u0632 \u06cc\u0627 \u062d\u062a\u06cc \u06cc\u06a9 \u06a9\u0627\u0631 \u06a9\u0648\u0686\u06a9 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0627\u062d\u0633\u0627\u0633 \u0627\u0645\u0646\u06cc\u062a \u0648 \u0622\u0631\u0627\u0645\u0634 \u0631\u0648 \u0628\u0631\u0627\u0634 \u0628\u0647 \u0627\u0631\u0645\u063a\u0627\u0646 \u0628\u06cc\u0627\u0631\u0647.",
                icon: "\ud83e\udd17",
                type: "pms"
              }
            ],
            notToDo: [
              {
                title: "\u0628\u062d\u062b \u0648 \u062f\u0639\u0648\u0627",
                desc: "\u062a\u0648 \u0627\u06cc\u0646 \u0631\u0648\u0632\u0647\u0627 \u0627\u0632 \u0628\u062d\u062b \u0648 \u062f\u0639\u0648\u0627 \u062f\u0648\u0631\u06cc \u06a9\u0646. \u0627\u06cc\u0646 \u06a9\u0627\u0631 \u0641\u0642\u0637 \u0627\u0633\u062a\u0631\u0633 \u0631\u0648 \u0628\u06cc\u0634\u062a\u0631 \u0645\u06cc\u200c\u06a9\u0646\u0647 \u0648 \u0645\u0645\u06a9\u0646\u0647 \u0628\u0647 \u0627\u062e\u062a\u0644\u0627\u0641\u0627\u062a \u0628\u06cc\u0634\u062a\u0631\u06cc \u0645\u0646\u062c\u0631 \u0628\u0634\u0647. \u0627\u06af\u0631 \u0645\u0648\u0636\u0648\u0639\u06cc \u0628\u0631\u0627\u062a \u0645\u0647\u0645\u0647\u060c \u0628\u0647\u062a\u0631\u0647 \u0628\u0647 \u0632\u0645\u0627\u0646 \u062f\u06cc\u06af\u0647\u200c\u0627\u06cc \u0645\u0648\u06a9\u0648\u0644\u0634 \u06a9\u0646\u06cc.",
                icon: "\u26a0\ufe0f",
                type: "pms"
              },
              {
                title:
                  "\u0641\u0634\u0627\u0631 \u0622\u0648\u0631\u062f\u0646",
                desc: "\u0628\u0647\u0634 \u0641\u0634\u0627\u0631 \u0646\u06cc\u0627\u0648\u0631. \u062f\u0631\u06a9 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634 \u0648 \u0627\u06cc\u062c\u0627\u062f \u0641\u0636\u0627\u06cc\u06cc \u0622\u0631\u0627\u0645 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u062e\u06cc\u0644\u06cc \u06a9\u0645\u06a9 \u06a9\u0646\u0647. \u0627\u06af\u0631 \u067e\u0627\u0631\u062a\u0646\u0631\u062a \u0627\u062d\u0633\u0627\u0633 \u0628\u062f\u06cc \u062f\u0627\u0631\u0647\u060c \u0627\u062c\u0627\u0632\u0647 \u0628\u062f\u0647 \u06a9\u0645\u06cc \u0628\u0627 \u062e\u0648\u062f\u0634 \u062a\u0646\u0647\u0627 \u0628\u0627\u0634\u0647.",
                icon: "\ud83d\uded1",
                type: "pms"
              },
              {
                title:
                  "\u062d\u0631\u0641 \u0632\u062f\u0646 \u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0648\u0636\u0648\u0639\u0627\u062a \u0645\u0647\u0645",
                desc: "\u0628\u0647\u062a\u0631\u0647 \u0627\u0632 \u0635\u062d\u0628\u062a \u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0648\u0636\u0648\u0639\u0627\u062a \u062d\u0633\u0627\u0633 \u062f\u0648\u0631\u06cc \u06a9\u0646\u06cc. \u0645\u0645\u06a9\u0646\u0647 \u0646\u062a\u0648\u0646\u0647 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634 \u0631\u0648 \u0628\u0647 \u062f\u0631\u0633\u062a\u06cc \u0628\u06cc\u0627\u0646 \u06a9\u0646\u0647 \u0648 \u0627\u06cc\u0646 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0628\u0627\u0639\u062b \u0633\u0648\u062a\u0641\u0627\u0647\u0645 \u0628\u0634\u0647. \u0628\u0647 \u062c\u0627\u06cc \u0627\u0648\u0646\u060c \u0645\u0648\u0636\u0648\u0639\u0627\u062a \u0633\u0628\u06a9\u200c\u062a\u0631 \u0648 \u062e\u0648\u0634\u0627\u06cc\u0646\u062f\u062a\u0631 \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646 \u062a\u0627 \u0641\u0636\u0627\u06cc \u0645\u062b\u0628\u062a\u200c\u062a\u0631\u06cc \u0627\u06cc\u062c\u0627\u062f \u0628\u0634\u0647.",
                icon: "\u274c",
                type: "pms"
              }
            ]
          },
          fertility: {
            todo: [
              {
                title:
                  "\u062d\u0645\u0627\u06cc\u062a \u0627\u0632 \u062a\u0635\u0645\u06cc\u0645\u200c\u06af\u06cc\u0631\u06cc\u200c\u0647\u0627\u06cc\u0634",
                desc: "\u0627\u06cc\u0646 \u062f\u0648\u0631\u0627\u0646 \u0628\u0647\u062a\u0631\u06cc\u0646 \u0632\u0645\u0627\u0646 \u0628\u0631\u0627\u06cc \u062a\u0635\u0645\u06cc\u0645\u200c\u06af\u06cc\u0631\u06cc\u200c\u0647\u0627\u06cc \u0645\u0647\u0645\u0647 \u0686\u0648\u0646 \u0647\u0645\u0633\u0631\u062a \u0645\u0646\u0637\u0642\u06cc\u200c\u062a\u0631 \u0648 \u0645\u0637\u0645\u0626\u0646\u200c\u062a\u0631 \u062a\u0635\u0645\u06cc\u0645 \u0645\u06cc\u200c\u06af\u06cc\u0631\u0647. \u0627\u0632 \u0646\u0638\u0631\u0627\u062a \u0648 \u062a\u0635\u0645\u06cc\u0645\u200c\u0647\u0627\u0634 \u062d\u0645\u0627\u06cc\u062a \u06a9\u0646 \u0648 \u0628\u0647\u0634 \u0627\u0639\u062a\u0645\u0627\u062f \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634. \u0627\u06cc\u0646 \u062d\u0645\u0627\u06cc\u062a \u0627\u0639\u062a\u0645\u0627\u062f \u0628\u0647 \u0646\u0641\u0633\u0634 \u0631\u0648 \u0628\u06cc\u0634\u062a\u0631 \u0645\u06cc\u200c\u06a9\u0646\u0647.",
                icon: "\ud83e\udde0",
                type: "ovulation"
              },
              {
                title:
                  "\u0627\u0628\u0631\u0627\u0632 \u0627\u062d\u0633\u0627\u0633\u0627\u062a \u0628\u06cc\u0634\u062a\u0631",
                desc: "\u062f\u0631 \u0627\u06cc\u0646 \u0631\u0648\u0632\u0647\u0627\u060c \u0627\u0628\u0631\u0627\u0632 \u0627\u062d\u0633\u0627\u0633\u0627\u062a \u0648 \u0645\u062d\u0628\u062a \u0628\u06cc\u0634\u062a\u0631\u06cc \u0627\u0632 \u0637\u0631\u0641 \u062a\u0648 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0631\u0627\u0628\u0637\u0647\u200c\u062a\u0648\u0646 \u0631\u0648 \u0642\u0648\u06cc\u200c\u062a\u0631 \u06a9\u0646\u0647. \u0627\u06cc\u0646 \u062f\u0648\u0631\u0627\u0646\u060c \u0647\u0645\u0633\u0631\u062a \u0627\u0632 \u0644\u062d\u0627\u0638 \u0639\u0627\u0637\u0641\u06cc \u0648 \u0627\u062d\u0633\u0627\u0633\u06cc \u067e\u0630\u06cc\u0631\u0627\u062a\u0631 \u0648 \u0642\u0648\u06cc\u200c\u062a\u0631\u0647\u060c \u067e\u0633 \u0628\u0627 \u0646\u0634\u0648\u0646 \u062f\u0627\u062f\u0646 \u0645\u062d\u0628\u062a \u0648 \u062a\u0648\u062c\u0647\u060c \u0627\u062d\u0633\u0627\u0633 \u0646\u0632\u062f\u06cc\u06a9\u06cc \u0628\u06cc\u0634\u062a\u0631\u06cc \u0627\u06cc\u062c\u0627\u062f \u06a9\u0646.",
                icon: "\ud83d\udc9e",
                type: "ovulation"
              }
            ],
            notToDo: [
              {
                title:
                  "\u0627\u06cc\u062c\u0627\u062f \u0627\u0633\u062a\u0631\u0633",
                desc: "\u062f\u0631 \u0627\u06cc\u0646 \u0631\u0648\u0632\u0647\u0627 \u0627\u0632 \u0627\u06cc\u062c\u0627\u062f \u0645\u0648\u0642\u0639\u06cc\u062a\u200c\u0647\u0627\u06cc \u0627\u0633\u062a\u0631\u0633\u200c\u0632\u0627 \u062f\u0648\u0631\u06cc \u06a9\u0646. \u0627\u0633\u062a\u0631\u0633 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u062a\u0623\u062b\u06cc\u0631 \u0645\u0646\u0641\u06cc \u0631\u0648\u06cc \u062e\u0644\u0642 \u0648 \u062e\u0648\u06cc \u0647\u0645\u0633\u0631\u062a \u0628\u0630\u0627\u0631\u0647 \u0648 \u0627\u0632 \u0627\u0646\u0631\u0698\u06cc \u0645\u062b\u0628\u062a\u0634 \u06a9\u0645 \u06a9\u0646\u0647. \u0628\u0647 \u062c\u0627\u06cc \u0627\u0648\u0646\u060c \u0641\u0636\u0627\u06cc\u06cc \u0622\u0631\u0627\u0645 \u0648 \u067e\u0631 \u0627\u0632 \u062d\u0645\u0627\u06cc\u062a \u0627\u06cc\u062c\u0627\u062f \u06a9\u0646.",
                icon: "\ud83d\ude30",
                type: "ovulation"
              },
              {
                title:
                  "\u0646\u0627\u062f\u06cc\u062f\u0647 \u06af\u0631\u0641\u062a\u0646 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634",
                desc: "\u062f\u0631 \u0627\u06cc\u0646 \u062f\u0648\u0631\u0627\u0646\u060c \u0647\u0645\u0633\u0631\u062a \u0646\u06cc\u0627\u0632 \u062f\u0627\u0631\u0647 \u06a9\u0647 \u0628\u06cc\u0634\u062a\u0631 \u0628\u0647 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634 \u062a\u0648\u062c\u0647 \u06a9\u0646\u06cc. \u0646\u0627\u062f\u06cc\u062f\u0647 \u06af\u0631\u0641\u062a\u0646 \u06cc\u0627 \u0628\u06cc\u200c\u062a\u0648\u062c\u0647\u06cc \u0628\u0647 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0628\u0627\u0639\u062b \u0646\u0627\u0631\u0627\u062d\u062a\u06cc \u0628\u0634\u0647. \u0628\u0627 \u0645\u062d\u0628\u062a \u0648 \u0647\u0645\u062f\u0644\u06cc \u0628\u0647\u0634 \u0646\u0634\u0648\u0646 \u0628\u062f\u0647 \u06a9\u0647 \u06a9\u0646\u0627\u0631\u0634 \u0647\u0633\u062a\u06cc \u0648 \u0628\u0647 \u062d\u0627\u0644 \u0648 \u0647\u0648\u0627\u06cc \u062f\u0631\u0648\u0646\u06cc\u200c\u0627\u0634 \u0627\u0647\u0645\u06cc\u062a \u0645\u06cc\u062f\u06cc.",
                icon: "\ud83d\udc94",
                type: "ovulation"
              }
            ]
          }
        })
      },
      {
        path: "deleteDate",
        type: "private",
        variableType: "dateString",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "2024-10-24T07:00:28.998Z"
      },
      {
        path: "lackOfCourseInformation",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.lackOfCourseInformation
      },
      {
        path: "pregnancy",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return { days: 190, week: 13, months: 3 };
              }
              throw e;
            }
          })()
      },
      {
        path: "pregnancyData",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            week: "\u0627\u0648\u0644",
            height: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            weight: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            week: "\u062f\u0648\u0645",
            height: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            weight: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            week: "\u0633\u0648\u0645",
            height: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            weight: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            week: "\u0686\u0647\u0627\u0631\u0645",
            height: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            weight: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            week: "\u067e\u0646\u062c\u0645",
            height: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            weight: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            week: "\u0634\u0634\u0645",
            height: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            weight: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            week: "\u0647\u0641\u062a\u0645",
            height: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            weight: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          { week: "\u0647\u0634\u062a\u0645", height: "1.9", weight: "1" },
          { week: "\u0646\u0647\u0645", height: "2.3", weight: "2" },
          { week: "\u062f\u0647\u0645", height: "3.1", weight: "4" },
          {
            week: "\u06cc\u0627\u0632\u062f\u0647\u0645",
            height: "4.1",
            weight: "7"
          },
          {
            week: "\u062f\u0648\u0627\u0632\u062f\u0647\u0645",
            height: "5.4",
            weight: "14"
          },
          {
            week: "\u0633\u06cc\u0632\u062f\u0647\u0645",
            height: "7.4",
            weight: "23"
          },
          {
            week: "\u0686\u0647\u0627\u0631\u062f\u0647\u0645",
            height: "8.7",
            weight: "43"
          },
          {
            week: "\u067e\u0627\u0646\u0632\u062f\u0647\u0645",
            height: "10.1",
            weight: "70"
          },
          {
            week: "\u0634\u0627\u0646\u0632\u062f\u0647\u0645",
            height: "11.6",
            weight: "100"
          },
          {
            week: "\u0647\u0641\u062f\u0647\u0645",
            height: "13",
            weight: "140"
          },
          {
            week: "\u0647\u062c\u062f\u0647\u0645",
            height: "14.2",
            weight: "190"
          },
          {
            week: "\u0646\u0648\u0632\u062f\u0647\u0645",
            height: "15.3",
            weight: "240"
          },
          {
            week: "\u0628\u06cc\u0633\u062a\u0645",
            height: "25.6",
            weight: "300"
          },
          {
            week: "\u0628\u06cc\u0633\u062a \u0648 \u06cc\u06a9\u0645",
            height: "26.7",
            weight: "360"
          },
          {
            week: "\u0628\u06cc\u0633\u062a \u0648 \u062f\u0648\u0645",
            height: "27.8",
            weight: "430"
          },
          {
            week: "\u0628\u06cc\u0633\u062a \u0648 \u0633\u0648\u0645",
            height: "28.9",
            weight: "500"
          },
          {
            week: "\u0628\u06cc\u0633\u062a \u0648 \u0686\u0647\u0627\u0631\u0645",
            height: "30",
            weight: "600"
          },
          {
            week: "\u0628\u06cc\u0633\u062a \u0648 \u067e\u0646\u062c\u0645",
            height: "34.6",
            weight: "660"
          },
          {
            week: "\u0628\u06cc\u0633\u062a \u0648 \u0634\u0634\u0645",
            height: "35.6",
            weight: "760"
          },
          {
            week: "\u0628\u06cc\u0633\u062a \u0648 \u0647\u0641\u062a\u0645",
            height: "36.6",
            weight: "875"
          },
          {
            week: "\u0628\u06cc\u0633\u062a \u0648 \u0647\u0634\u062a\u0645",
            height: "37.6",
            weight: "1"
          },
          {
            week: "\u0628\u06cc\u0633\u062a \u0648 \u0646\u0647\u0645",
            height: "38.6",
            weight: "1.2"
          },
          {
            week: "\u0633\u06cc\u200c\u0627\u0645",
            height: "39.9",
            weight: "1.3"
          },
          {
            week: "\u0633\u06cc \u0648 \u06cc\u06a9\u0645",
            height: "41.1",
            weight: "1.5"
          },
          {
            week: "\u0633\u06cc \u0648 \u062f\u0648\u0645",
            height: "42.4",
            weight: "1.7"
          },
          {
            week: "\u0633\u06cc \u0648 \u0633\u0648\u0645",
            height: "43.7",
            weight: "1.9"
          },
          {
            week: "\u0633\u06cc \u0648 \u0686\u0647\u0627\u0631\u0645",
            height: "45",
            weight: "2.1"
          },
          {
            week: "\u0633\u06cc \u0648 \u067e\u0646\u062c\u0645",
            height: "46.2",
            weight: "2.4"
          },
          {
            week: "\u0633\u06cc \u0648 \u0634\u0634\u0645",
            height: "47.4",
            weight: "2.6"
          },
          {
            week: "\u0633\u06cc \u0648 \u0647\u0641\u062a\u0645",
            height: "48.6",
            weight: "2.9"
          },
          {
            week: "\u0633\u06cc \u0648 \u0647\u0634\u062a\u0645",
            height: "49.8",
            weight: "3.1"
          },
          {
            week: "\u0633\u06cc \u0648 \u0646\u0647\u0645",
            height: "50.7",
            weight: "3.3"
          },
          { week: "\u0686\u0647\u0644\u0645", height: "51.2", weight: "3.5" }
        ]
      },
      {
        path: "dialog.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "shopDialog.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shopDialog.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shopDialog.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button8.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog2.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "subscription3[].clickitem",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "subscription3[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription3[].price",
        type: "private",
        variableType: "number"
      },
      {
        path: "subscription3[].discount",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription3[].fullprice",
        type: "private",
        variableType: "number"
      },
      {
        path: "button11.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "button12.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "intro",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return window.localStorage.getItem("liomHamyar_intro")
                ? false
                : true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "dialog3.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button13.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "userdata",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.mainHamyar.userData;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "loadingPage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "shapData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "advices",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "toDos",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "noPartner",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noPartner
      },
      {
        path: "mobile",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "button12.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button8.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button11.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button13.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button12.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button8.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingshop;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button11.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.loadingshop;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button13.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shopListText",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            title:
              "\u062f\u0639\u0648\u0627\u0647\u0627\u062a\u0648\u0646 \u062f\u0631 \u062f\u0648\u0631\u0627\u0646 \u067e\u0631\u06cc\u0648\u062f \u0648 pms \u06a9\u0645\u062a\u0631 \u0645\u06cc\u0634\u0647",
            text: "\u06a9\u0645\u06a9 \u0645\u06cc\u06a9\u0646\u06cc\u0645 \u062a\u0627 \u0634\u0631\u0648\u0639 \u0648 \u062f\u0648\u0631\u0627\u0646 \u067e\u0631\u06cc\u0648\u062f \u0647\u0645\u0633\u0631\u062a \u0631\u0648 \u067e\u06cc\u06af\u06cc\u0631\u06cc \u06a9\u0646\u06cc \u0648 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0631\u0648\u062d\u06cc \u0648 \u062c\u0633\u0645\u06cc\u0634 \u0631\u0648 \u0628\u0647\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0646\u06cc.",
            type: "relationship"
          },
          {
            title:
              "\u0631\u0627\u0628\u0637\u0647\u200c\u062a \u0631\u0648 \u0631\u0648\u0632\u0627\u0646\u0647 \u0628\u0627 \u0646\u06a9\u0627\u062a \u06a9\u0627\u0631\u0628\u0631\u062f\u06cc \u062a\u0642\u0648\u06cc\u062a \u0645\u06cc\u06a9\u0646\u06cc",
            text: "\u0647\u0645\u0647 \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc\u200c\u0647\u0627 \u0648 \u0646\u06a9\u0627\u062a \u06a9\u0627\u0631\u0628\u0631\u062f\u06cc \u0631\u0648\u06cc \u067e\u06cc\u0627\u0645\u06a9 \u0648 \u062a\u0644\u06af\u0631\u0627\u0645 \u0628\u0631\u0627\u062a \u0645\u06cc\u0627\u062f \u062a\u0627 \u0647\u06cc\u0686 \u0646\u06a9\u062a\u0647\u200c\u0627\u06cc \u0627\u0632 \u062f\u0633\u062a \u0646\u0631\u0647.",
            type: "reminder"
          },
          {
            title:
              "\u0645\u0631\u0627\u0642\u0628\u062a \u0627\u0632 \u0647\u0645\u0633\u0631\u062a \u062f\u0631 \u0631\u0648\u0632\u0647\u0627\u06cc \u067e\u0631\u06cc\u0648\u062f \u0622\u0633\u0627\u0646\u200c\u062a\u0631 \u0645\u06cc\u200c\u0634\u0647",
            text: "\u0634\u0631\u0648\u0639 \u067e\u0631\u06cc\u0648\u062f \u0647\u0645\u0633\u0631\u062a \u0631\u0648 \u067e\u06cc\u06af\u06cc\u0631\u06cc \u0645\u06cc\u06a9\u0646\u06cc \u0648 \u0628\u0627 \u0645\u0631\u0627\u0642\u0628\u062a \u0628\u06cc\u0634\u062a\u0631\u060c \u0645\u06cc\u062a\u0648\u0646\u06cc \u062f\u0631\u062f \u0648 \u0646\u0627\u0631\u0627\u062d\u062a\u06cc\u200c\u0647\u0627 \u0631\u0648 \u06a9\u0627\u0647\u0634 \u0628\u062f\u06cc.",
            type: "care"
          },
          {
            title:
              "\u0647\u0645\u0633\u0631\u062a \u0647\u0645 \u0628\u0647 \u062a\u0648 \u0641\u06a9\u0631 \u0645\u06cc\u200c\u06a9\u0646\u0647 \u0648 \u062d\u0648\u0627\u0633\u0634 \u0628\u0647 \u0631\u0627\u0628\u0637\u0647\u200c\u062a\u0648\u0646\u0647",
            text: "\u067e\u06cc\u0627\u0645\u200c\u0647\u0627\u06cc\u06cc \u0647\u0645 \u0628\u0631\u0627\u06cc \u062e\u0627\u0646\u0648\u0645\u062a \u0645\u06cc\u0641\u0631\u0633\u062a\u06cc\u0645 \u06a9\u0647 \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0646\u062f \u0647\u0645\u0633\u0631\u062a \u0647\u0645 \u0628\u0647 \u062a\u0648 \u0641\u06a9\u0631 \u06a9\u0646\u0647 \u0648 \u0631\u0627\u0628\u0637\u0647 \u0634\u0627\u062f\u062a\u0631\u06cc \u0628\u0633\u0627\u0632\u06cc\u0646.",
            type: "mutual"
          },
          {
            title:
              "\u0647\u06cc\u0686 \u0631\u0648\u0632 \u0645\u0647\u0645\u06cc \u0645\u062b\u0644 \u062a\u0648\u0644\u062f\u060c \u0633\u0627\u0644\u06af\u0631\u062f \u06cc\u0627\u2026 \u06cc\u0627\u062f\u062a \u0646\u0645\u06cc\u200c\u0631\u0647",
            text: "\u062a\u0648\u0644\u062f\u060c \u0633\u0627\u0644\u06af\u0631\u062f \u0648 \u0633\u0627\u06cc\u0631 \u0645\u0646\u0627\u0633\u0628\u062a\u200c\u0647\u0627 \u0631\u0648 \u06a9\u0627\u0641\u06cc\u0647 \u062b\u0628\u062a \u06a9\u0646\u06cc \u062a\u0627 \u0628\u0631\u0627\u062a \u0686\u0646\u062f \u0631\u0648\u0632 \u0642\u0628\u0644\u0634 \u0648 \u062f\u0631 \u0647\u0645\u0627\u0646 \u0631\u0648\u0632 \u06cc\u0627\u062f\u0627\u0648\u0631\u06cc \u06a9\u0646\u06cc\u0645",
            type: "event"
          }
        ]
      },
      {
        path: "modalshopText",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          title:
            "\u062f\u0631 \u062f\u0648\u0631\u0627\u0646 PMS \u0648 \u067e\u0631\u06cc\u0648\u062f \u0647\u0645\u0633\u0631\u062a \u062f\u0639\u0648\u0627\u0647\u0627\u062a\u0648\u0646 \u0631\u0648 \u06a9\u0645\u062a\u0631 \u0645\u06cc\u0634\u0647",
          text: "\u06a9\u0645\u06a9 \u0645\u06cc\u06a9\u0646\u06cc\u0645 \u062a\u0627 \u0634\u0631\u0648\u0639 \u0648 \u062f\u0648\u0631\u0627\u0646 \u067e\u0631\u06cc\u0648\u062f \u0647\u0645\u0633\u0631\u062a \u0631\u0648 \u067e\u06cc\u06af\u06cc\u0631\u06cc \u06a9\u0646\u06cc \u0648 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0631\u0648\u062d\u06cc \u0648 \u062c\u0633\u0645\u06cc\u0634 \u0631\u0648 \u0628\u0647\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0646\u06cc.",
          type: "relationship"
        })
      },
      {
        path: "remember.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "remember.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "remember.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "remindersetting",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.remindersetting
      },
      {
        path: "reminder2.refresh",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "page",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.page
      },
      {
        path: "reminderSetting.refresh",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "remind",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "reminderSetting.tel",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.reminder2.tel;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "reminderSetting.sms",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.reminder2.sms;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "reminder2.sms",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.userdata?.result?.man?.activeSmsNotif
                ? true
                : false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "reminder2.tel",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.userdata?.result?.man?.activeNotifTel
                ? true
                : false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "editCycle",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.editCycle
      },
      {
        path: "settingCycle4.editTime",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "kjlkjkj"
      },
      {
        path: "settingCycle4.token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "noPartner", "noPartner")
            ? (() => {
                try {
                  return (() => {
                    try {
                      const data = window.localStorage.getItem("wifeInfo");
                      if (!data) return "";
                      const parsed = JSON.parse(data);
                      return parsed?.token || "";
                    } catch (e) {
                      return "";
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return (() => {
                    try {
                      const data = window.localStorage.getItem("wifeInfo");
                      if (!data) return "";
                      const parsed = JSON.parse(data);
                      return parsed?.token || "";
                    } catch (e) {
                      return "";
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
      },
      {
        path: "shopText2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button5.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button5.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button6.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button6.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button10.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button10.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button10.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "ignore",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const rel = $state.userdata?.result?.rel;
                const manId = $state.userdata?.result?.man?.id;
                const username = $state.userdata?.result?.user?.username;
                if (rel && !(rel.active === true || rel.ignore === true)) {
                  try {
                    if (manId && username) {
                      const cleanId = manId.replace(/[^a-zA-Z]/g, "");
                      return cleanId !== username;
                    }
                    return true;
                  } catch (e) {
                    return true;
                  }
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "mainHeader.dopen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "footerMain.type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return window.sessionStorage.getItem("footer") || "hamyar";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editProfile2.token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.tokenUser;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "edit",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.edit
      },
      {
        path: "mainHamyar.token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "mainHamyar.userData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "blue"
      },
      {
        path: "button.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "mainHamyar.hamyar2PlasmicAntd5ModalOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "mainHamyar.hamyar2ShopPage2Open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHamyar3.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHamyar3.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHamyar3.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root,
            {
              [sty.rooteditCycle]: hasVariant($state, "editCycle", "editCycle"),
              [sty.rootedit]: hasVariant($state, "edit", "edit"),
              [sty.rootlackOfCourseInformation]: hasVariant(
                $state,
                "lackOfCourseInformation",
                "lackOfCourseInformation"
              ),
              [sty.rootnoPartner]: hasVariant($state, "noPartner", "noPartner"),
              [sty.rootpage_reminder]: hasVariant($state, "page", "reminder"),
              [sty.rootremindersetting]: hasVariant(
                $state,
                "remindersetting",
                "remindersetting"
              ),
              [sty.rootremindersetting_page_reminder]:
                hasVariant($state, "page", "reminder") &&
                hasVariant($state, "remindersetting", "remindersetting")
            }
          )}
          onLoad={async event => {
            const $steps = {};
          }}
        >
          <div
            data-plasmic-name={"main"}
            data-plasmic-override={overrides.main}
            className={classNames(projectcss.all, sty.main, {
              [sty.maineditCycle]: hasVariant($state, "editCycle", "editCycle"),
              [sty.mainedit]: hasVariant($state, "edit", "edit"),
              [sty.mainpage_reminder]: hasVariant($state, "page", "reminder"),
              [sty.mainremindersetting]: hasVariant(
                $state,
                "remindersetting",
                "remindersetting"
              )
            })}
          >
            <MainHamyar
              data-plasmic-name={"mainHamyar"}
              data-plasmic-override={overrides.mainHamyar}
              className={classNames("__wab_instance", sty.mainHamyar, {
                [sty.mainHamyareditCycle]: hasVariant(
                  $state,
                  "editCycle",
                  "editCycle"
                ),
                [sty.mainHamyarpage_reminder]: hasVariant(
                  $state,
                  "page",
                  "reminder"
                ),
                [sty.mainHamyarremindersetting]: hasVariant(
                  $state,
                  "remindersetting",
                  "remindersetting"
                )
              })}
              editCycle2={async () => {
                const $steps = {};

                $steps["updateEditCycle"] = true
                  ? (() => {
                      const actionArgs = { vgroup: "editCycle", operation: 2 };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        const oldValue = $stateGet($state, vgroup);
                        $stateSet($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateEditCycle"] != null &&
                  typeof $steps["updateEditCycle"] === "object" &&
                  typeof $steps["updateEditCycle"].then === "function"
                ) {
                  $steps["updateEditCycle"] = await $steps["updateEditCycle"];
                }
              }}
              hamyar2PlasmicAntd5ModalOpen={generateStateValueProp($state, [
                "mainHamyar",
                "hamyar2PlasmicAntd5ModalOpen"
              ])}
              hamyar2ShopPage2Open={generateStateValueProp($state, [
                "mainHamyar",
                "hamyar2ShopPage2Open"
              ])}
              headershow={(() => {
                try {
                  return (() => {
                    const urlParams = new window.URLSearchParams(
                      window.location.search
                    );
                    return urlParams.get("inApp") == "true" ? true : false;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()}
              onHamyar2PlasmicAntd5ModalOpenChange={async (
                ...eventArgs: any
              ) => {
                generateStateOnChangeProp($state, [
                  "mainHamyar",
                  "hamyar2PlasmicAntd5ModalOpen"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onHamyar2ShopPage2OpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "mainHamyar",
                  "hamyar2ShopPage2Open"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onTokenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "mainHamyar",
                  "token"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onUserDataChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "mainHamyar",
                  "userData"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              page={(() => {
                try {
                  return $state.footerMain.type;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              remind={(() => {
                try {
                  return $state.remind;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              reminderOpen={async event => {
                const $steps = {};

                $steps["updatePage"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "page",
                        operation: 0,
                        value: "reminder"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updatePage"] != null &&
                  typeof $steps["updatePage"] === "object" &&
                  typeof $steps["updatePage"].then === "function"
                ) {
                  $steps["updatePage"] = await $steps["updatePage"];
                }
              }}
              token={generateStateValueProp($state, ["mainHamyar", "token"])}
              userData={generateStateValueProp($state, [
                "mainHamyar",
                "userData"
              ])}
            />

            {(
              hasVariant($state, "page", "reminder") &&
              hasVariant($state, "remindersetting", "remindersetting")
                ? true
                : hasVariant($state, "editCycle", "editCycle")
                  ? true
                  : hasVariant($state, "page", "reminder")
                    ? true
                    : hasVariant($state, "remindersetting", "remindersetting")
                      ? true
                      : (() => {
                          try {
                            return !(
                              window.FlutterChannel &&
                              typeof window.FlutterChannel.postMessage ===
                                "function"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
            ) ? (
              <section
                className={classNames(projectcss.all, sty.section__roUh, {
                  [sty.sectioneditCycle__roUhiku9W]: hasVariant(
                    $state,
                    "editCycle",
                    "editCycle"
                  ),
                  [sty.sectionnoPartner__roUhIojRx]: hasVariant(
                    $state,
                    "noPartner",
                    "noPartner"
                  ),
                  [sty.sectionpage_reminder__roUhe1TrG]: hasVariant(
                    $state,
                    "page",
                    "reminder"
                  ),
                  [sty.sectionremindersetting__roUhYo9If]: hasVariant(
                    $state,
                    "remindersetting",
                    "remindersetting"
                  ),
                  [sty.sectionremindersetting_page_reminder__roUhYo9IfE1TrG]:
                    hasVariant($state, "page", "reminder") &&
                    hasVariant($state, "remindersetting", "remindersetting")
                })}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.footerMain),
                    footer2: (() => {
                      try {
                        return $state.footerMain.type;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "bot";
                        }
                        throw e;
                      }
                    })(),
                    hamyar: true,
                    onTypeChange: async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "footerMain",
                        "type"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    type: generateStateValueProp($state, ["footerMain", "type"])
                  };

                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "footerMain.type",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return (
                                window.sessionStorage.getItem("footer") ||
                                "hamyar"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                      }
                    ],
                    []
                  );
                  return (
                    <FooterMain
                      data-plasmic-name={"footerMain"}
                      data-plasmic-override={overrides.footerMain}
                      {...child$Props}
                    />
                  );
                })()}
              </section>
            ) : null}
            {(() => {
              try {
                return (() => {
                  const urlParams = new window.URLSearchParams(
                    window.location.search
                  );
                  return urlParams.get("inApp") == "true" ? false : true;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <section
                className={classNames(projectcss.all, sty.section__k5A4W)}
              >
                <MainHeader
                  data-plasmic-name={"mainHeader"}
                  data-plasmic-override={overrides.mainHeader}
                  className={classNames("__wab_instance", sty.mainHeader)}
                  dopen={generateStateValueProp($state, [
                    "mainHeader",
                    "dopen"
                  ])}
                  hamyar={true}
                  hamyarshop={async () => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return ($state.mainHamyar.hamyar2PlasmicAntd5ModalOpen = true);
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  onDopenChange2={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "mainHeader",
                      "dopen"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  openEdit={async () => {
                    const $steps = {};

                    $steps["updateEdit"] = true
                      ? (() => {
                          const actionArgs = { vgroup: "edit", operation: 2 };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            const oldValue = $stateGet($state, vgroup);
                            $stateSet($state, vgroup, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateEdit"] != null &&
                      typeof $steps["updateEdit"] === "object" &&
                      typeof $steps["updateEdit"].then === "function"
                    ) {
                      $steps["updateEdit"] = await $steps["updateEdit"];
                    }
                  }}
                  slot={
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.userdata?.result?.man?.telegramId;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Button
                          data-plasmic-name={"button"}
                          data-plasmic-override={overrides.button}
                          className={classNames("__wab_instance", sty.button)}
                          color={generateStateValueProp($state, [
                            "button",
                            "color"
                          ])}
                          load={generateStateValueProp($state, [
                            "button",
                            "load"
                          ])}
                          loading={generateStateValueProp($state, [
                            "button",
                            "loading"
                          ])}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        if (
                                          typeof window !== "undefined" &&
                                          window.FlutterChannel &&
                                          typeof window.FlutterChannel
                                            .postMessage === "function"
                                        ) {
                                          return window.FlutterChannel.postMessage(
                                            "https://t.me/liomApp_bot"
                                          );
                                        } else if (
                                          typeof window !== "undefined"
                                        ) {
                                          return window.open(
                                            "https://t.me/liomApp_bot",
                                            "_blank"
                                          );
                                        }
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          }}
                          onColorChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button",
                                "color"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onLoadChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button",
                                "load"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onLoadingChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button",
                                "loading"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          shape={"rounded"}
                          showStartIcon={true}
                          size={"compact"}
                          startIcon={
                            <Icon271Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__uHPq7
                              )}
                              role={"img"}
                            />
                          }
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nufXu
                            )}
                          >
                            {
                              "\u0648\u0631\u0648\u062f \u0628\u0647 \u0631\u0628\u0627\u062a \u062a\u0644\u06af\u0631\u0627\u0645"
                            }
                          </div>
                        </Button>
                      ) : null}
                      {(() => {
                        try {
                          return window.FlutterChannel ? true : false;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <SearchSvgIcon
                          className={classNames(projectcss.all, sty.svg__jyTiE)}
                          role={"img"}
                        />
                      ) : null}
                    </React.Fragment>
                  }
                  token={(() => {
                    try {
                      return $state.tokenUser;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  userinfo={(() => {
                    try {
                      return $state.userdata?.result?.man;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return {};
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4ONko)}
                  >
                    <Icon185Icon
                      className={classNames(projectcss.all, sty.svg__dRjkX)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateMainHeaderDopen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["mainHeader", "dopen"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateMainHeaderDopen"] != null &&
                          typeof $steps["updateMainHeaderDopen"] === "object" &&
                          typeof $steps["updateMainHeaderDopen"].then ===
                            "function"
                        ) {
                          $steps["updateMainHeaderDopen"] =
                            await $steps["updateMainHeaderDopen"];
                        }
                      }}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__w6K9E
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              switch ($state.footerMain.type) {
                                case "hamyar":
                                  return "همیار قاعدگی";
                                case "bot":
                                  return "عَلاّمه";
                                case "self":
                                  return "مراقبت از خود";
                                default:
                                  return "";
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0647\u0645\u06cc\u0627\u0631 \u0642\u0627\u0639\u062f\u06af\u06cc";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </MainHeader>
              </section>
            ) : null}
          </div>
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              "<script>\r\n    (function(h,o,t,j,a,r){\r\n        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};\r\n        h._hjSettings={hjid:6541232,hjsv:6};\r\n        a=o.getElementsByTagName('head')[0];\r\n        r=o.createElement('script');r.async=1;\r\n        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;\r\n        a.appendChild(r);\r\n    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');\r\n</script>"
            }
          />

          <Dialog
            data-plasmic-name={"dialog"}
            data-plasmic-override={overrides.dialog}
            className={classNames("__wab_instance", sty.dialog, {
              [sty.dialognoPartner]: hasVariant(
                $state,
                "noPartner",
                "noPartner"
              )
            })}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["dialog", "opendialog"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialog",
              "opendialog"
            ])}
          >
            <ApiRequest
              data-plasmic-name={"shopDialog"}
              data-plasmic-override={overrides.shopDialog}
              body={(() => {
                try {
                  return { refCode: $state.userdata?.result?.man?.refCode };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.shopDialog)}
              config={(() => {
                try {
                  return {
                    headers: {
                      "Content-Type": "application/json",
                      Authorization: $state.userdata.result.token
                    }
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bGhEe
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={
                <div className={classNames(projectcss.all, sty.freeBox__qTmpF)}>
                  <Icon115Icon
                    className={classNames(projectcss.all, sty.svg__jUPrp)}
                    role={"img"}
                  />
                </div>
              }
              method={"POST"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "shopDialog",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "shopDialog",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shopDialog", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              shouldFetch={true}
              url={"https://n8n.staas.ir/webhook/hamyar/shop"}
            >
              <div className={classNames(projectcss.all, sty.freeBox__dcsIm)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__lfgVp)}
                  dir={"rtl"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mcph3)}
                  />

                  <DialogTitle
                    data-plasmic-name={"dialogTitle"}
                    data-plasmic-override={overrides.dialogTitle}
                    className={classNames("__wab_instance", sty.dialogTitle)}
                  >
                    <h5
                      data-plasmic-name={"h5"}
                      data-plasmic-override={overrides.h5}
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        sty.h5
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hAwIy
                        )}
                      >
                        {
                          "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9"
                        }
                      </div>
                    </h5>
                  </DialogTitle>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___0A2B)}
                  dir={"rtl"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zeS1S
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.shopDialog.data.result.find(
                            item => item.selected === 1
                          ).descc;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "You can insert dialog body content here in this slot.";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iJgh)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gwZiq)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? (() => {
                              try {
                                return $state.shopDialog.data.result.find(
                                  item => item.selected === 1
                                ).topBadge
                                  ? true
                                  : false;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                          : (() => {
                              try {
                                return $state.shopDialog.data.result.find(
                                  item => item.selected === 1
                                ).topBadge
                                  ? true
                                  : false;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rlJba
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__z0DWl
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.shopDialog.data.result.find(
                                    item => item.selected === 1
                                  ).topBadge;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\ud83c\udf39 \u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646 \ud83c\udf39";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0QW4L
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gUexy
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.shopDialog.data.result.find(
                                  item => item.selected === 1
                                ).title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qlzJ9
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___57Ta
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.shopDialog.data.result
                                    .find(item => item.selected === 1)
                                    .fullPrice.toLocaleString();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__i4F5K
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    $state.shopDialog.data.result
                                      .find(item => item.selected === 1)
                                      .price.toLocaleString() + "  تومان"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        {(() => {
                          try {
                            return $state.shopDialog.data.result.find(
                              item => item.selected === 1
                            ).badge
                              ? true
                              : false;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__u9WzR
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ilyYz
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.shopDialog.data.result.find(
                                      item => item.selected === 1
                                    ).badge;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "1";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        ) : null}
                      </div>
                      {(() => {
                        try {
                          return !$state.discountBox;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vAk5P
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateDiscountBox"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["discountBox"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateDiscountBox"] != null &&
                              typeof $steps["updateDiscountBox"] === "object" &&
                              typeof $steps["updateDiscountBox"].then ===
                                "function"
                            ) {
                              $steps["updateDiscountBox"] =
                                await $steps["updateDiscountBox"];
                            }
                          }}
                        >
                          {
                            "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f"
                          }
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return $state.discountBox;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__l8I0A
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__dq1PB
                            )}
                          >
                            {(() => {
                              const child$Props = {
                                allowClear: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                )
                                  ? false
                                  : false,
                                autoFocus: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                )
                                  ? false
                                  : false,
                                bordered: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                )
                                  ? false
                                  : false,
                                className: classNames(
                                  "__wab_instance",
                                  sty.input4
                                ),
                                disabled: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                )
                                  ? false
                                  : false,
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input4", "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);

                                  (async event => {
                                    const $steps = {};
                                  }).apply(null, eventArgs);
                                },
                                placeholder:
                                  "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f",
                                prefix: (
                                  <Icon10Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__vZpz
                                    )}
                                    role={"img"}
                                  />
                                ),

                                readOnly: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                )
                                  ? false
                                  : false,
                                size: hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobile"
                                )
                                  ? "small"
                                  : "small",
                                suffix: null,
                                value: generateStateValueProp($state, [
                                  "input4",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input4.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"input4"}
                                  data-plasmic-override={overrides.input4}
                                  {...child$Props}
                                />
                              );
                            })()}
                            {(() => {
                              try {
                                return $state.visiblebox;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__j2LWk
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateVisiblebox"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["visiblebox"]
                                          },
                                          operation: 0,
                                          value: false
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateVisiblebox"] != null &&
                                    typeof $steps["updateVisiblebox"] ===
                                      "object" &&
                                    typeof $steps["updateVisiblebox"].then ===
                                      "function"
                                  ) {
                                    $steps["updateVisiblebox"] =
                                      await $steps["updateVisiblebox"];
                                  }
                                }}
                              />
                            ) : null}
                          </div>
                          <Button
                            data-plasmic-name={"button12"}
                            data-plasmic-override={overrides.button12}
                            className={classNames(
                              "__wab_instance",
                              sty.button12
                            )}
                            color={generateStateValueProp($state, [
                              "button12",
                              "color"
                            ])}
                            isDisabled={
                              hasVariant(globalVariants, "screen", "mobile")
                                ? (() => {
                                    try {
                                      return $state.input4.value == null ||
                                        $state.input4.value == ""
                                        ? true
                                        : false;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                : (() => {
                                    try {
                                      return $state.input4.value == "" ||
                                        $state.input4.value == null
                                        ? true
                                        : false;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                            }
                            load={generateStateValueProp($state, [
                              "button12",
                              "load"
                            ])}
                            loading={generateStateValueProp($state, [
                              "button12",
                              "loading"
                            ])}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateVisiblebox"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["visiblebox"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateVisiblebox"] != null &&
                                typeof $steps["updateVisiblebox"] ===
                                  "object" &&
                                typeof $steps["updateVisiblebox"].then ===
                                  "function"
                              ) {
                                $steps["updateVisiblebox"] =
                                  await $steps["updateVisiblebox"];
                              }

                              $steps["updateDiscountCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["discountCode"]
                                      },
                                      operation: 0,
                                      value: $state.input4.value
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateDiscountCode"] != null &&
                                typeof $steps["updateDiscountCode"] ===
                                  "object" &&
                                typeof $steps["updateDiscountCode"].then ===
                                  "function"
                              ) {
                                $steps["updateDiscountCode"] =
                                  await $steps["updateDiscountCode"];
                              }
                            }}
                            onColorChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button12",
                                  "color"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            onLoadChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button12",
                                  "load"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            onLoadingChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button12",
                                  "loading"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                          >
                            {"\u062a\u0627\u06cc\u06cc\u062f"}
                          </Button>
                        </div>
                      ) : null}
                      <Button
                        data-plasmic-name={"button8"}
                        data-plasmic-override={overrides.button8}
                        className={classNames("__wab_instance", sty.button8)}
                        color={generateStateValueProp($state, [
                          "button8",
                          "color"
                        ])}
                        endIcon={
                          <Icon12Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__yo97B
                            )}
                            role={"img"}
                          />
                        }
                        isDisabled={(() => {
                          try {
                            return $state.loadingshop;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        load={generateStateValueProp($state, [
                          "button8",
                          "load"
                        ])}
                        loading={generateStateValueProp($state, [
                          "button8",
                          "loading"
                        ])}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateLoadingshop"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loadingshop"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateLoadingshop"] != null &&
                            typeof $steps["updateLoadingshop"] === "object" &&
                            typeof $steps["updateLoadingshop"].then ===
                              "function"
                          ) {
                            $steps["updateLoadingshop"] =
                              await $steps["updateLoadingshop"];
                          }

                          $steps["updateBuyId"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["buyId"]
                                  },
                                  operation: 0,
                                  value: $state.shapData.result.find(
                                    item => item.selected === 1
                                  ).id
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateBuyId"] != null &&
                            typeof $steps["updateBuyId"] === "object" &&
                            typeof $steps["updateBuyId"].then === "function"
                          ) {
                            $steps["updateBuyId"] = await $steps["updateBuyId"];
                          }

                          $steps["updateSelectedShop"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["selectedShop"]
                                  },
                                  operation: 0,
                                  value: $state.shapData.result.findIndex(
                                    item => item.selected === 1
                                  )
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSelectedShop"] != null &&
                            typeof $steps["updateSelectedShop"] === "object" &&
                            typeof $steps["updateSelectedShop"].then ===
                              "function"
                          ) {
                            $steps["updateSelectedShop"] =
                              await $steps["updateSelectedShop"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://n8n.staas.ir/webhook/hamyar/shopBuy",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          id: $state.buyId,
                                          offCode: $state.discountCode,
                                          refCode:
                                            $state.userdata.result.man.refCode,
                                          redirectUrl:
                                            "https://apps.liom.app/shop-result?r=" +
                                            $state.userdata.result.man.refCode +
                                            "&buyId=" +
                                            $state.buyId +
                                            "&offCode=" +
                                            $state.discountCode +
                                            "&valueShop=" +
                                            $state.shapData.result[
                                              $state.selectedShop
                                            ].type +
                                            "-" +
                                            $state.shapData.result[
                                              $state.selectedShop
                                            ].value +
                                            "&price=" +
                                            $state.shapData.result[
                                              $state.selectedShop
                                            ].price +
                                            "&manId=" +
                                            $state.userdata.result.man.id
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    (() => {
                                      try {
                                        return {
                                          headers: {
                                            "Content-Type": "application/json",
                                            Authorization: $state.tokenUser
                                          }
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] =
                              await $steps["invokeGlobalAction"];
                          }

                          $steps["goToPage"] =
                            $steps.invokeGlobalAction?.data?.success == true &&
                            $steps.invokeGlobalAction?.data?.result != false
                              ? (() => {
                                  const actionArgs = {
                                    destination: (() => {
                                      try {
                                        return $steps.invokeGlobalAction.data
                                          .result;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  };
                                  return (({ destination }) => {
                                    if (
                                      typeof destination === "string" &&
                                      destination.startsWith("#")
                                    ) {
                                      document
                                        .getElementById(destination.substr(1))
                                        .scrollIntoView({ behavior: "smooth" });
                                    } else {
                                      __nextRouter?.push(destination);
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["goToPage"] != null &&
                            typeof $steps["goToPage"] === "object" &&
                            typeof $steps["goToPage"].then === "function"
                          ) {
                            $steps["goToPage"] = await $steps["goToPage"];
                          }

                          $steps["updateLoadingshop2"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loadingshop"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateLoadingshop2"] != null &&
                            typeof $steps["updateLoadingshop2"] === "object" &&
                            typeof $steps["updateLoadingshop2"].then ===
                              "function"
                          ) {
                            $steps["updateLoadingshop2"] =
                              await $steps["updateLoadingshop2"];
                          }

                          $steps["invokeGlobalAction2"] =
                            $steps.invokeGlobalAction?.data?.success == false ||
                            $steps.invokeGlobalAction?.data?.result == false
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f."
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["invokeGlobalAction2"] != null &&
                            typeof $steps["invokeGlobalAction2"] === "object" &&
                            typeof $steps["invokeGlobalAction2"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction2"] =
                              await $steps["invokeGlobalAction2"];
                          }
                        }}
                        onColorChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button8",
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button8",
                              "load"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadingChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button8",
                              "loading"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rFps8
                          )}
                        >
                          {
                            "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647"
                          }
                        </div>
                      </Button>
                      {(() => {
                        try {
                          return $state.shopDialog.data.result.length > 1;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <p
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            projectcss.__wab_text,
                            sty.p__vzz
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateDialog2Opendialog"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["dialog2", "opendialog"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateDialog2Opendialog"] != null &&
                              typeof $steps["updateDialog2Opendialog"] ===
                                "object" &&
                              typeof $steps["updateDialog2Opendialog"].then ===
                                "function"
                            ) {
                              $steps["updateDialog2Opendialog"] =
                                await $steps["updateDialog2Opendialog"];
                            }
                          }}
                        >
                          {
                            "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                          }
                        </p>
                      ) : null}
                      <p
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.p__mYbDp
                        )}
                      >
                        {
                          "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                        }
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              <Dialog
                data-plasmic-name={"dialog2"}
                data-plasmic-override={overrides.dialog2}
                className={classNames("__wab_instance", sty.dialog2)}
                onOpendialogChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "dialog2",
                    "opendialog"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                opendialog={generateStateValueProp($state, [
                  "dialog2",
                  "opendialog"
                ])}
              >
                <div className={classNames(projectcss.all, sty.freeBox__plpiN)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.shopDialog.data.result;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.subscription3
                        ),
                        clickitem: generateStateValueProp($state, [
                          "subscription3",
                          __plasmic_idx_0,
                          "clickitem"
                        ]),
                        discount: generateStateValueProp($state, [
                          "subscription3",
                          __plasmic_idx_0,
                          "discount"
                        ]),
                        fullprice: generateStateValueProp($state, [
                          "subscription3",
                          __plasmic_idx_0,
                          "fullprice"
                        ]),
                        key: currentIndex,
                        onClick: async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      $state.selectedShop = currentIndex;
                                      return ($state.buyId = currentItem.id);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        },
                        onClickitemChange: async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "subscription3",
                            __plasmic_idx_0,
                            "clickitem"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        },
                        onDiscountChange: async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "subscription3",
                            __plasmic_idx_0,
                            "discount"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        },
                        onFullpriceChange: async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "subscription3",
                            __plasmic_idx_0,
                            "fullprice"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        },
                        onPriceChange: async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "subscription3",
                            __plasmic_idx_0,
                            "price"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        },
                        onTitleChange: async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "subscription3",
                            __plasmic_idx_0,
                            "title"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        },
                        price: generateStateValueProp($state, [
                          "subscription3",
                          __plasmic_idx_0,
                          "price"
                        ]),
                        title: generateStateValueProp($state, [
                          "subscription3",
                          __plasmic_idx_0,
                          "title"
                        ])
                      };

                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "subscription3[].clickitem",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentIndex == $state.selectedShop;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "subscription3[].title",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem.name;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "subscription3[].price",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem.price.toLocaleString();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return 120000;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "subscription3[].discount",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem.badge;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                          },
                          {
                            name: "subscription3[].fullprice",
                            initFunc: ({ $props, $state, $queries }) =>
                              (() => {
                                try {
                                  return currentItem.fullPrice.toLocaleString();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return 0;
                                  }
                                  throw e;
                                }
                              })()
                          }
                        ],
                        [__plasmic_idx_0]
                      );
                      return (
                        <Subscription
                          data-plasmic-name={"subscription3"}
                          data-plasmic-override={overrides.subscription3}
                          {...child$Props}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobile")
                              ? (() => {
                                  try {
                                    return currentItem.topBadge ? true : false;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })()
                              : (() => {
                                  try {
                                    return currentItem.topBadge ? true : false;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })()
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__hbAcT
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rsD
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.topBadge;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\ud83c\udf39 \u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646 \ud83c\udf39";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          ) : null}
                        </Subscription>
                      );
                    })();
                  })}
                  <Button
                    data-plasmic-name={"button11"}
                    data-plasmic-override={overrides.button11}
                    className={classNames("__wab_instance", sty.button11)}
                    color={generateStateValueProp($state, [
                      "button11",
                      "color"
                    ])}
                    endIcon={
                      <Icon12Icon
                        className={classNames(projectcss.all, sty.svg__f7HaT)}
                        role={"img"}
                      />
                    }
                    isDisabled={(() => {
                      try {
                        return $state.loadingshop;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    load={generateStateValueProp($state, ["button11", "load"])}
                    loading={generateStateValueProp($state, [
                      "button11",
                      "loading"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadingshop"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadingshop"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadingshop"] != null &&
                        typeof $steps["updateLoadingshop"] === "object" &&
                        typeof $steps["updateLoadingshop"].then === "function"
                      ) {
                        $steps["updateLoadingshop"] =
                          await $steps["updateLoadingshop"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/hamyar/shopBuy",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      id: $state.buyId,
                                      offCode: $state.discountCode,
                                      refCode:
                                        $state.userdata.result.man.refCode,
                                      redirectUrl:
                                        "https://apps.liom.app/shop-result?r=" +
                                        $state.userdata.result.man.refCode +
                                        "&buyId=" +
                                        $state.buyId +
                                        "&offCode=" +
                                        $state.discountCode +
                                        "&valueShop=" +
                                        $state.shapData.result[
                                          $state.selectedShop
                                        ].type +
                                        "-" +
                                        $state.shapData.result[
                                          $state.selectedShop
                                        ].value +
                                        "&price=" +
                                        $state.shapData.result[
                                          $state.selectedShop
                                        ].price +
                                        "&manId=" +
                                        $state.userdata.result.man.id
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        "Content-Type": "application/json",
                                        Authorization: $state.tokenUser
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] =
                          await $steps["invokeGlobalAction"];
                      }

                      $steps["goToPage"] =
                        $steps.invokeGlobalAction?.data?.success == true &&
                        $steps.invokeGlobalAction?.data?.result != false
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return $steps.invokeGlobalAction.data
                                      .result;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }

                      $steps["updateLoadingshop2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadingshop"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadingshop2"] != null &&
                        typeof $steps["updateLoadingshop2"] === "object" &&
                        typeof $steps["updateLoadingshop2"].then === "function"
                      ) {
                        $steps["updateLoadingshop2"] =
                          await $steps["updateLoadingshop2"];
                      }

                      $steps["invokeGlobalAction2"] =
                        $steps.invokeGlobalAction?.data?.success == false ||
                        $steps.invokeGlobalAction?.data?.result == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f."
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] =
                          await $steps["invokeGlobalAction2"];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button11",
                          "color"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button11", "load"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadingChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "button11",
                          "loading"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__leR6N
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "فعال سازی " +
                              $state.shopDialog.data.result[$state.selectedShop]
                                .title
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Button>
                </div>
              </Dialog>
            </ApiRequest>
          </Dialog>
          <Dialog
            data-plasmic-name={"dialog3"}
            data-plasmic-override={overrides.dialog3}
            className={classNames("__wab_instance", sty.dialog3)}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dialog3",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialog3",
              "opendialog"
            ])}
          >
            <div className={classNames(projectcss.all, sty.freeBox__djP03)}>
              <LottieWrapper
                data-plasmic-name={"lottie"}
                data-plasmic-override={overrides.lottie}
                animationData={{
                  nm: "Warning",
                  ddd: 0,
                  h: 114,
                  w: 114,
                  meta: { g: "@lottiefiles/toolkit-js 0.33.2" },
                  layers: [
                    {
                      ty: 4,
                      nm: "Layer 5 Outlines",
                      sr: 1,
                      st: 4.00000016292334,
                      op: 320.000013033867,
                      ip: 4.00000016292334,
                      hd: false,
                      ddd: 0,
                      bm: 0,
                      hasMask: false,
                      ao: 0,
                      ks: {
                        a: { a: 0, k: [56.897, 56.897, 0], ix: 1 },
                        s: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [83, 83, 100],
                              t: 26
                            },
                            { s: [100, 100, 100], t: 38.0000015477717 }
                          ],
                          ix: 6
                        },
                        sk: { a: 0, k: 0 },
                        p: { a: 0, k: [56.853, 56.618, 0], ix: 2 },
                        r: { a: 0, k: 0, ix: 10 },
                        sa: { a: 0, k: 0 },
                        o: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [0],
                              t: 26
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [100],
                              t: 32
                            },
                            { s: [0], t: 38.0000015477717 }
                          ],
                          ix: 11
                        }
                      },
                      ef: [],
                      shapes: [
                        {
                          ty: "gr",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Group",
                          nm: "Group 1",
                          ix: 1,
                          cix: 2,
                          np: 4,
                          it: [
                            {
                              ty: "sh",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Group",
                              nm: "Path 1",
                              ix: 1,
                              d: 1,
                              ks: {
                                a: 0,
                                k: {
                                  c: true,
                                  i: [
                                    [28.397, 0],
                                    [0, -28.397],
                                    [-28.397, 0],
                                    [0, 28.397]
                                  ],
                                  o: [
                                    [-28.397, 0],
                                    [0, 28.397],
                                    [28.397, 0],
                                    [0, -28.397]
                                  ],
                                  v: [
                                    [0.001, -51.497],
                                    [-51.498, 0.001],
                                    [0.001, 51.497],
                                    [51.498, 0.001]
                                  ]
                                },
                                ix: 2
                              }
                            },
                            {
                              ty: "sh",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Group",
                              nm: "Path 2",
                              ix: 2,
                              d: 1,
                              ks: {
                                a: 0,
                                k: {
                                  c: true,
                                  i: [
                                    [31.234, 0],
                                    [0, 31.233],
                                    [-31.236, 0],
                                    [0, -31.237]
                                  ],
                                  o: [
                                    [-31.236, 0],
                                    [0, -31.237],
                                    [31.234, 0],
                                    [0, 31.233]
                                  ],
                                  v: [
                                    [0.001, 56.647],
                                    [-56.647, 0.001],
                                    [0.001, -56.647],
                                    [56.647, 0.001]
                                  ]
                                },
                                ix: 2
                              }
                            },
                            {
                              ty: "mm",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Filter - Merge",
                              nm: "Merge Paths 1",
                              mm: 1
                            },
                            {
                              ty: "fl",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Graphic - Fill",
                              nm: "Fill 1",
                              c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                              r: 1,
                              o: { a: 0, k: 100, ix: 5 }
                            },
                            {
                              ty: "tr",
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              sk: { a: 0, k: 0, ix: 4 },
                              p: { a: 0, k: [56.897, 56.898], ix: 2 },
                              r: { a: 0, k: 0, ix: 6 },
                              sa: { a: 0, k: 0, ix: 5 },
                              o: { a: 0, k: 100, ix: 7 }
                            }
                          ]
                        }
                      ],
                      ind: 1
                    },
                    {
                      ty: 4,
                      nm: "Layer 2 Outlines",
                      sr: 1,
                      st: 0,
                      op: 316.000012870944,
                      ip: 0,
                      hd: false,
                      ddd: 0,
                      bm: 0,
                      hasMask: false,
                      ao: 0,
                      ks: {
                        a: { a: 0, k: [56.897, 56.897, 0], ix: 1 },
                        s: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [83, 83, 100],
                              t: 20
                            },
                            { s: [100, 100, 100], t: 32.0000013033867 }
                          ],
                          ix: 6
                        },
                        sk: { a: 0, k: 0 },
                        p: { a: 0, k: [56.853, 56.618, 0], ix: 2 },
                        r: { a: 0, k: 0, ix: 10 },
                        sa: { a: 0, k: 0 },
                        o: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [0],
                              t: 20
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [100],
                              t: 26
                            },
                            { s: [0], t: 32.0000013033867 }
                          ],
                          ix: 11
                        }
                      },
                      ef: [],
                      shapes: [
                        {
                          ty: "gr",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Group",
                          nm: "Group 1",
                          ix: 1,
                          cix: 2,
                          np: 4,
                          it: [
                            {
                              ty: "sh",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Group",
                              nm: "Path 1",
                              ix: 1,
                              d: 1,
                              ks: {
                                a: 0,
                                k: {
                                  c: true,
                                  i: [
                                    [28.397, 0],
                                    [0, -28.397],
                                    [-28.397, 0],
                                    [0, 28.397]
                                  ],
                                  o: [
                                    [-28.397, 0],
                                    [0, 28.397],
                                    [28.397, 0],
                                    [0, -28.397]
                                  ],
                                  v: [
                                    [0.001, -51.497],
                                    [-51.498, 0.001],
                                    [0.001, 51.497],
                                    [51.498, 0.001]
                                  ]
                                },
                                ix: 2
                              }
                            },
                            {
                              ty: "sh",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Group",
                              nm: "Path 2",
                              ix: 2,
                              d: 1,
                              ks: {
                                a: 0,
                                k: {
                                  c: true,
                                  i: [
                                    [31.234, 0],
                                    [0, 31.233],
                                    [-31.236, 0],
                                    [0, -31.237]
                                  ],
                                  o: [
                                    [-31.236, 0],
                                    [0, -31.237],
                                    [31.234, 0],
                                    [0, 31.233]
                                  ],
                                  v: [
                                    [0.001, 56.647],
                                    [-56.647, 0.001],
                                    [0.001, -56.647],
                                    [56.647, 0.001]
                                  ]
                                },
                                ix: 2
                              }
                            },
                            {
                              ty: "mm",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Filter - Merge",
                              nm: "Merge Paths 1",
                              mm: 1
                            },
                            {
                              ty: "fl",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Graphic - Fill",
                              nm: "Fill 1",
                              c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                              r: 1,
                              o: { a: 0, k: 100, ix: 5 }
                            },
                            {
                              ty: "tr",
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              sk: { a: 0, k: 0, ix: 4 },
                              p: { a: 0, k: [56.897, 56.898], ix: 2 },
                              r: { a: 0, k: 0, ix: 6 },
                              sa: { a: 0, k: 0, ix: 5 },
                              o: { a: 0, k: 100, ix: 7 }
                            }
                          ]
                        }
                      ],
                      ind: 2
                    },
                    {
                      ty: 4,
                      nm: "Layer 4 Outlines",
                      sr: 1,
                      st: 0,
                      op: 316.000012870944,
                      ip: 0,
                      hd: false,
                      ddd: 0,
                      bm: 0,
                      hasMask: false,
                      ao: 0,
                      ks: {
                        a: { a: 0, k: [5.434, 31.682, 0], ix: 1 },
                        s: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [100, 100, 100],
                              t: 0
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [115, 90, 100],
                              t: 4
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [100, 112, 100],
                              t: 8
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [100, 112, 100],
                              t: 11
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [113.333, 94.333, 100],
                              t: 13
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [100, 112, 100],
                              t: 15
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [113, 95, 100],
                              t: 20
                            },
                            { s: [100, 100, 100], t: 22.0000008960784 }
                          ],
                          ix: 6
                        },
                        sk: { a: 0, k: 0 },
                        p: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [57.387, 65.377, 0],
                              t: 0,
                              ti: [0, 0.835, 0],
                              to: [0, -0.35, 0]
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [57.387, 65.46, 0],
                              t: 4,
                              ti: [0, 0.609, 0],
                              to: [0, -1.455, 0]
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [57.387, 56.377, 0],
                              t: 11,
                              ti: [0, 0.609, 0],
                              to: [0, -0.958, 0]
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [57.387, 50.877, 0],
                              t: 13,
                              ti: [0, 0.609, 0],
                              to: [0, -0.958, 0]
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [57.387, 56.377, 0],
                              t: 15,
                              ti: [0, -0.417, 0],
                              to: [0, -0.958, 0]
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [57.387, 65.627, 0],
                              t: 19,
                              ti: [0, 0.958, 0],
                              to: [0, 0.417, 0]
                            },
                            { s: [57.387, 65.377, 0], t: 22.0000008960784 }
                          ],
                          ix: 2
                        },
                        r: { a: 0, k: 0, ix: 10 },
                        sa: { a: 0, k: 0 },
                        o: { a: 0, k: 100, ix: 11 }
                      },
                      ef: [],
                      shapes: [
                        {
                          ty: "gr",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Group",
                          nm: "Group 1",
                          ix: 1,
                          cix: 2,
                          np: 2,
                          it: [
                            {
                              ty: "sh",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Group",
                              nm: "Path 1",
                              ix: 1,
                              d: 1,
                              ks: {
                                a: 0,
                                k: {
                                  c: true,
                                  i: [
                                    [2.878, 0],
                                    [0, -2.487],
                                    [0, 0],
                                    [-2.951, 0],
                                    [0, 2.426],
                                    [0, 0]
                                  ],
                                  o: [
                                    [-2.951, 0],
                                    [0, 0],
                                    [0, 2.49],
                                    [2.878, 0],
                                    [0, 0],
                                    [0, -2.428]
                                  ],
                                  v: [
                                    [0.001, -15.433],
                                    [-5.184, -11.406],
                                    [-5.184, 11.409],
                                    [0.001, 15.433],
                                    [5.184, 11.409],
                                    [5.184, -11.406]
                                  ]
                                },
                                ix: 2
                              }
                            },
                            {
                              ty: "fl",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Graphic - Fill",
                              nm: "Fill 1",
                              c: { a: 0, k: [1, 1, 1], ix: 4 },
                              r: 1,
                              o: { a: 0, k: 100, ix: 5 }
                            },
                            {
                              ty: "tr",
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              sk: { a: 0, k: 0, ix: 4 },
                              p: { a: 0, k: [5.433, 15.682], ix: 2 },
                              r: { a: 0, k: 0, ix: 6 },
                              sa: { a: 0, k: 0, ix: 5 },
                              o: { a: 0, k: 100, ix: 7 }
                            }
                          ]
                        }
                      ],
                      ind: 3
                    },
                    {
                      ty: 4,
                      nm: "Layer 3 Outlines",
                      sr: 1,
                      st: 0,
                      op: 316.000012870944,
                      ip: 0,
                      hd: false,
                      ddd: 0,
                      bm: 0,
                      hasMask: false,
                      ao: 0,
                      ks: {
                        a: { a: 0, k: [5.516, 11.142, 0], ix: 1 },
                        s: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [100, 100, 100],
                              t: 20
                            },
                            {
                              o: { x: 0.167, y: 0.167 },
                              i: { x: 0.833, y: 0.833 },
                              s: [100, 79, 100],
                              t: 22
                            },
                            { s: [100, 100, 100], t: 24.00000097754 }
                          ],
                          ix: 6
                        },
                        sk: { a: 0, k: 0 },
                        p: { a: 0, k: [57.011, 80.341, 0], ix: 2 },
                        r: { a: 0, k: 0, ix: 10 },
                        sa: { a: 0, k: 0 },
                        o: { a: 0, k: 100, ix: 11 }
                      },
                      ef: [],
                      shapes: [
                        {
                          ty: "gr",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Group",
                          nm: "Group 1",
                          ix: 1,
                          cix: 2,
                          np: 2,
                          it: [
                            {
                              ty: "sh",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Group",
                              nm: "Path 1",
                              ix: 1,
                              d: 1,
                              ks: {
                                a: 0,
                                k: {
                                  c: true,
                                  i: [
                                    [2.834, 0],
                                    [0, -2.837],
                                    [-2.835, 0],
                                    [0, 2.833]
                                  ],
                                  o: [
                                    [-2.835, 0],
                                    [0, 2.833],
                                    [2.834, 0],
                                    [0, -2.837]
                                  ],
                                  v: [
                                    [0.002, -5.142],
                                    [-5.141, 0.003],
                                    [0.002, 5.142],
                                    [5.141, 0.003]
                                  ]
                                },
                                ix: 2
                              }
                            },
                            {
                              ty: "fl",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Graphic - Fill",
                              nm: "Fill 1",
                              c: { a: 0, k: [1, 1, 1], ix: 4 },
                              r: 1,
                              o: { a: 0, k: 100, ix: 5 }
                            },
                            {
                              ty: "tr",
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              sk: { a: 0, k: 0, ix: 4 },
                              p: { a: 0, k: [5.391, 5.392], ix: 2 },
                              r: { a: 0, k: 0, ix: 6 },
                              sa: { a: 0, k: 0, ix: 5 },
                              o: { a: 0, k: 100, ix: 7 }
                            }
                          ]
                        }
                      ],
                      ind: 4
                    },
                    {
                      ty: 4,
                      nm: "Layer 1 Outlines",
                      sr: 1,
                      st: 0,
                      op: 316.000012870944,
                      ip: 0,
                      hd: false,
                      ddd: 0,
                      bm: 0,
                      hasMask: false,
                      ao: 0,
                      ks: {
                        a: { a: 0, k: [41.449, 41.449, 0], ix: 1 },
                        s: { a: 0, k: [100, 100, 100], ix: 6 },
                        sk: { a: 0, k: 0 },
                        p: { a: 0, k: [56.854, 56.618, 0], ix: 2 },
                        r: { a: 0, k: 0, ix: 10 },
                        sa: { a: 0, k: 0 },
                        o: { a: 0, k: 100, ix: 11 }
                      },
                      ef: [],
                      shapes: [
                        {
                          ty: "gr",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Group",
                          nm: "Group 1",
                          ix: 1,
                          cix: 2,
                          np: 2,
                          it: [
                            {
                              ty: "sh",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Group",
                              nm: "Path 1",
                              ix: 1,
                              d: 1,
                              ks: {
                                a: 0,
                                k: {
                                  c: true,
                                  i: [
                                    [-22.753, 0],
                                    [0, -22.753],
                                    [22.754, 0],
                                    [0, 22.754]
                                  ],
                                  o: [
                                    [22.754, 0],
                                    [0, 22.754],
                                    [-22.753, 0],
                                    [0, -22.753]
                                  ],
                                  v: [
                                    [0, -41.199],
                                    [41.199, 0],
                                    [0, 41.199],
                                    [-41.199, 0]
                                  ]
                                },
                                ix: 2
                              }
                            },
                            {
                              ty: "fl",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Graphic - Fill",
                              nm: "Fill 1",
                              c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                              r: 1,
                              o: { a: 0, k: 100, ix: 5 }
                            },
                            {
                              ty: "tr",
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              sk: { a: 0, k: 0, ix: 4 },
                              p: { a: 0, k: [41.449, 41.449], ix: 2 },
                              r: { a: 0, k: 0, ix: 6 },
                              sa: { a: 0, k: 0, ix: 5 },
                              o: { a: 0, k: 100, ix: 7 }
                            }
                          ]
                        }
                      ],
                      ind: 5
                    }
                  ],
                  v: "5.5.9",
                  fr: 29.9700012207031,
                  op: 38.0000015477717,
                  ip: 0,
                  assets: []
                }}
                className={classNames("__wab_instance", sty.lottie)}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1IO5T
                )}
              >
                {
                  "\u0645\u062a\u0627\u0633\u0641\u0627\u0646\u0647 \u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u062a\u0648\u0633\u0637 \u0634\u0645\u0627 \u0627\u0645\u06a9\u0627\u0646\u200c\u067e\u0630\u06cc\u0631 \u0646\u06cc\u0633\u062a."
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0XWJs
                )}
              >
                {
                  "\u0628\u0627 \u0639\u0631\u0636 \u067e\u0648\u0632\u0634\u060c \u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647 \u062f\u0631 \u062d\u0627\u0644 \u062d\u0627\u0636\u0631 \u0641\u0642\u0637 \u062a\u0648\u0633\u0637 \u0647\u0645\u06cc\u0627\u0631 \u0634\u0645\u0627 \u0627\u0645\u06a9\u0627\u0646\u200c\u067e\u0630\u06cc\u0631 \u0627\u0633\u062a. \u062f\u0631 \u0635\u0648\u0631\u062a \u062a\u0645\u0627\u06cc\u0644\u060c \u0644\u0637\u0641\u0627\u064b \u0627\u0632 \u0647\u0645\u06cc\u0627\u0631 \u062e\u0648\u062f \u0628\u062e\u0648\u0627\u0647\u06cc\u062f \u062a\u0627 \u0627\u06cc\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0631\u0627 \u0628\u0631\u0627\u06cc \u0634\u0645\u0627 \u0641\u0639\u0627\u0644 \u06a9\u0646\u062f. \u0627\u0632 \u0647\u0645\u0631\u0627\u0647\u06cc \u0634\u0645\u0627 \u0633\u067e\u0627\u0633\u06af\u0632\u0627\u0631\u06cc\u0645."
                }
              </div>
              <Button
                data-plasmic-name={"button13"}
                data-plasmic-override={overrides.button13}
                className={classNames("__wab_instance", sty.button13)}
                color={generateStateValueProp($state, ["button13", "color"])}
                load={generateStateValueProp($state, ["button13", "load"])}
                loading={generateStateValueProp($state, [
                  "button13",
                  "loading"
                ])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateDialog3Opendialog"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog3", "opendialog"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDialog3Opendialog"] != null &&
                    typeof $steps["updateDialog3Opendialog"] === "object" &&
                    typeof $steps["updateDialog3Opendialog"].then === "function"
                  ) {
                    $steps["updateDialog3Opendialog"] =
                      await $steps["updateDialog3Opendialog"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button13", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button13", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadingChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button13", "loading"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                {"\u062a\u0627\u06cc\u06cc\u062f"}
              </Button>
            </div>
          </Dialog>
          <div className={classNames(projectcss.all, sty.freeBox__ufuy)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_hamyar/images/image90.png",
                fullWidth: 830,
                fullHeight: 350,
                aspectRatio: undefined
              }}
            />
          </div>
          <Reveal
            className={classNames("__wab_instance", sty.reveal__qgsM6, {
              [sty.revealpage_reminder__qgsM6E1TrG]: hasVariant(
                $state,
                "page",
                "reminder"
              ),
              [sty.revealremindersetting__qgsM6Yo9If]: hasVariant(
                $state,
                "remindersetting",
                "remindersetting"
              ),
              [sty.revealremindersetting_page_reminder__qgsM6Yo9IfE1TrG]:
                hasVariant($state, "page", "reminder") &&
                hasVariant($state, "remindersetting", "remindersetting")
            })}
            damping={0.2}
            triggerOnce={true}
          >
            <Reminder
              data-plasmic-name={"reminder2"}
              data-plasmic-override={overrides.reminder2}
              activeSmsNotif={(() => {
                try {
                  return $state.userdata?.result?.man?.activeSmsNotif
                    ? true
                    : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()}
              back={async () => {
                const $steps = {};

                $steps["updatePage"] = true
                  ? (() => {
                      const actionArgs = { vgroup: "page", operation: 1 };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, undefined);
                        return undefined;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updatePage"] != null &&
                  typeof $steps["updatePage"] === "object" &&
                  typeof $steps["updatePage"].then === "function"
                ) {
                  $steps["updatePage"] = await $steps["updatePage"];
                }
              }}
              className={classNames("__wab_instance", sty.reminder2, {
                [sty.reminder2noPartner]: hasVariant(
                  $state,
                  "noPartner",
                  "noPartner"
                ),
                [sty.reminder2page_reminder]: hasVariant(
                  $state,
                  "page",
                  "reminder"
                ),
                [sty.reminder2remindersetting]: hasVariant(
                  $state,
                  "remindersetting",
                  "remindersetting"
                ),
                [sty.reminder2remindersetting_page_reminder]:
                  hasVariant($state, "page", "reminder") &&
                  hasVariant($state, "remindersetting", "remindersetting")
              })}
              data={(() => {
                try {
                  return $state.remind;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [
                      {
                        id: 32,
                        man_id: 3,
                        name: "\u062a\u0648\u0644\u062f \u062a\u0627\u0646\u0627\u0646\u062a\u0627\u062a\u0646",
                        date_greg: "2025-12-02",
                        date_shamsi: "1386/10/10",
                        type: "ChildBirthday",
                        description: null,
                        repeat_yearly: 1,
                        remind_before: 0,
                        smsActive: 1
                      },
                      {
                        id: 31,
                        man_id: 3,
                        name: "\u062a\u0648\u0644\u062f \u0646\u062a\u0627\u0646\u062a\u0627",
                        date_greg: "2025-12-05",
                        date_shamsi: "1386/10/10",
                        type: "ChildBirthday",
                        description: null,
                        repeat_yearly: 1,
                        remind_before: 0,
                        smsActive: 1
                      },
                      {
                        id: 30,
                        man_id: 3,
                        name: "\u062a\u0648\u0644\u062f \u0645\u062d\u0645\u062f",
                        date_greg: "2025-12-15",
                        date_shamsi: "1386/10/10",
                        type: "ChildBirthday",
                        description: null,
                        repeat_yearly: 1,
                        remind_before: 0,
                        smsActive: 0
                      },
                      {
                        id: 29,
                        man_id: 3,
                        name: "\u062a\u0648\u0644\u062f \u0639\u0644\u06cc",
                        date_greg: "2025-12-31",
                        date_shamsi: "1388/10/10",
                        type: "ChildBirthday",
                        description: null,
                        repeat_yearly: 1,
                        remind_before: 0,
                        smsActive: 0
                      },
                      {
                        id: 21,
                        man_id: 3,
                        name: "\u0631\u0648\u0632 \u0632\u0646 \u0648 \u0645\u0627\u062f\u0631",
                        date_greg: "2026-02-09",
                        date_shamsi: "1404/11/20",
                        type: "Occasion",
                        description:
                          "\u0648\u0644\u0627\u062f\u062a \u062d\u0636\u0631\u062a \u0641\u0627\u0637\u0645\u0647 \u0632\u0647\u0631\u0627 (\u0633)",
                        repeat_yearly: 1,
                        remind_before: 3,
                        smsActive: 0
                      },
                      {
                        id: 24,
                        man_id: 3,
                        name: "\u0648\u0644\u0646\u062a\u0627\u06cc\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642)",
                        date_greg: "2026-02-14",
                        date_shamsi: "1404/11/25",
                        type: "Occasion",
                        description:
                          "\u0631\u0648\u0632 \u0639\u0634\u0642 \u062c\u0647\u0627\u0646\u06cc",
                        repeat_yearly: 1,
                        remind_before: 7,
                        smsActive: 0
                      },
                      {
                        id: 25,
                        man_id: 3,
                        name: "\u0633\u067e\u0646\u062f\u0627\u0631\u0645\u0630\u06af\u0627\u0646 (\u0631\u0648\u0632 \u0639\u0634\u0642 \u0627\u06cc\u0631\u0627\u0646\u06cc)",
                        date_greg: "2026-02-19",
                        date_shamsi: "1404/11/30",
                        type: "Occasion",
                        description:
                          "\u0631\u0648\u0632 \u0632\u0646 \u0648 \u0639\u0634\u0642 \u062f\u0631 \u0627\u06cc\u0631\u0627\u0646 \u0628\u0627\u0633\u062a\u0627\u0646",
                        repeat_yearly: 1,
                        remind_before: 7,
                        smsActive: 0
                      },
                      {
                        id: 23,
                        man_id: 3,
                        name: "\u0631\u0648\u0632 \u062c\u0647\u0627\u0646\u06cc \u0632\u0646",
                        date_greg: "2026-03-08",
                        date_shamsi: "1404/12/17",
                        type: "Occasion",
                        description: "International Women's Day",
                        repeat_yearly: 1,
                        remind_before: 7,
                        smsActive: 0
                      },
                      {
                        id: 22,
                        man_id: 3,
                        name: "\u0631\u0648\u0632 \u062f\u062e\u062a\u0631",
                        date_greg: "2026-05-30",
                        date_shamsi: "1405/03/09",
                        type: "Occasion",
                        description:
                          "\u0648\u0644\u0627\u062f\u062a \u062d\u0636\u0631\u062a \u0645\u0639\u0635\u0648\u0645\u0647 (\u0633)",
                        repeat_yearly: 1,
                        remind_before: 3,
                        smsActive: 0
                      },
                      {
                        id: 26,
                        man_id: 3,
                        name: "\u0631\u0648\u0632 \u062c\u0647\u0627\u0646\u06cc \u062f\u062e\u062a\u0631\u0627\u0646",
                        date_greg: "2026-10-11",
                        date_shamsi: "1405/07/19",
                        type: "Occasion",
                        description: "International Day of the Girl Child",
                        repeat_yearly: 1,
                        remind_before: 7,
                        smsActive: 0
                      },
                      {
                        id: 28,
                        man_id: 3,
                        name: "\u062a\u0648\u0644\u062f \u0632\u0647\u0631\u0627",
                        date_greg: "2026-12-30",
                        date_shamsi: "1379/10/10",
                        type: "SpouseBirthday",
                        description: null,
                        repeat_yearly: 1,
                        remind_before: 0,
                        smsActive: 0
                      }
                    ];
                  }
                  throw e;
                }
              })()}
              hamyar={hasVariant($state, "page", "reminder") ? true : undefined}
              manId={(() => {
                try {
                  return $state.userdata?.result?.man?.id;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              onRefreshChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "reminder2",
                  "refresh"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }

                (async val => {
                  const $steps = {};

                  $steps["updateReminderSettingRefresh"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["reminderSetting", "refresh"]
                          },
                          operation: 0,
                          value: $state.reminderSetting.refresh + 1
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateReminderSettingRefresh"] != null &&
                    typeof $steps["updateReminderSettingRefresh"] ===
                      "object" &&
                    typeof $steps["updateReminderSettingRefresh"].then ===
                      "function"
                  ) {
                    $steps["updateReminderSettingRefresh"] =
                      await $steps["updateReminderSettingRefresh"];
                  }
                }).apply(null, eventArgs);
              }}
              onSmsChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["reminder2", "sms"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onTelChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["reminder2", "tel"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              phone={(() => {
                try {
                  return $state.mobile;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              refresh={generateStateValueProp($state, ["reminder2", "refresh"])}
              setting={async () => {
                const $steps = {};

                $steps["updateReminder"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "remindersetting",
                        operation: 2
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        const oldValue = $stateGet($state, vgroup);
                        $stateSet($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateReminder"] != null &&
                  typeof $steps["updateReminder"] === "object" &&
                  typeof $steps["updateReminder"].then === "function"
                ) {
                  $steps["updateReminder"] = await $steps["updateReminder"];
                }
              }}
              shop={async () => {
                const $steps = {};

                $steps["updateDialogOpendialog"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dialog", "opendialog"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDialogOpendialog"] != null &&
                  typeof $steps["updateDialogOpendialog"] === "object" &&
                  typeof $steps["updateDialogOpendialog"].then === "function"
                ) {
                  $steps["updateDialogOpendialog"] =
                    await $steps["updateDialogOpendialog"];
                }

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.sessionStorage.setItem(
                              "page",
                              "settingReminder"
                            );
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              sms={generateStateValueProp($state, ["reminder2", "sms"])}
              subscription={(() => {
                try {
                  return $state?.userdata?.result?.man?.hamyarStatus
                    ? true
                    : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()}
              tel={generateStateValueProp($state, ["reminder2", "tel"])}
              telegram={(() => {
                try {
                  return $state.userdata?.result?.man?.telegramId
                    ? true
                    : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()}
              telegramId={(() => {
                try {
                  return $state.userdata?.result?.man?.telegramId;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              token={(() => {
                try {
                  return $state.tokenUser;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />

            <BackHandler
              active={
                hasVariant($state, "page", "reminder") &&
                hasVariant($state, "remindersetting", "remindersetting")
                  ? false
                  : hasVariant($state, "page", "reminder")
                    ? true
                    : false
              }
              className={classNames("__wab_instance", sty.backHandler___9VDr, {
                [sty.backHandlerpage_reminder___9VDRe1TrG]: hasVariant(
                  $state,
                  "page",
                  "reminder"
                ),
                [sty.backHandlerremindersetting_page_reminder___9VDryo9IfE1TrG]:
                  hasVariant($state, "page", "reminder") &&
                  hasVariant($state, "remindersetting", "remindersetting")
              })}
              onBack={async () => {
                const $steps = {};

                $steps["updatePage"] = true
                  ? (() => {
                      const actionArgs = { vgroup: "page", operation: 1 };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, undefined);
                        return undefined;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updatePage"] != null &&
                  typeof $steps["updatePage"] === "object" &&
                  typeof $steps["updatePage"].then === "function"
                ) {
                  $steps["updatePage"] = await $steps["updatePage"];
                }
              }}
            />
          </Reveal>
          <Reveal
            className={classNames("__wab_instance", sty.reveal__u8D9T, {
              [sty.revealeditCycle__u8D9Tiku9W]: hasVariant(
                $state,
                "editCycle",
                "editCycle"
              ),
              [sty.revealpage_reminder__u8D9Te1TrG]: hasVariant(
                $state,
                "page",
                "reminder"
              ),
              [sty.revealremindersetting__u8D9TYo9If]: hasVariant(
                $state,
                "remindersetting",
                "remindersetting"
              ),
              [sty.revealremindersetting_page_reminder__u8D9TYo9IfE1TrG]:
                hasVariant($state, "remindersetting", "remindersetting") &&
                hasVariant($state, "page", "reminder")
            })}
            damping={0.2}
            triggerOnce={true}
          >
            <ReminderSetting
              data-plasmic-name={"reminderSetting"}
              data-plasmic-override={overrides.reminderSetting}
              back={async () => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.reminderSetting.refresh += "1");
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["updateReminder"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "remindersetting",
                        operation: 6
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, false);
                        return false;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateReminder"] != null &&
                  typeof $steps["updateReminder"] === "object" &&
                  typeof $steps["updateReminder"].then === "function"
                ) {
                  $steps["updateReminder"] = await $steps["updateReminder"];
                }
              }}
              className={classNames("__wab_instance", sty.reminderSetting, {
                [sty.reminderSettingedit]: hasVariant($state, "edit", "edit"),
                [sty.reminderSettingremindersetting]: hasVariant(
                  $state,
                  "remindersetting",
                  "remindersetting"
                )
              })}
              data={(() => {
                try {
                  return $state.remind;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              hamyar={true}
              manId={
                hasVariant($state, "remindersetting", "remindersetting") &&
                hasVariant(globalVariants, "screen", "mobile")
                  ? (() => {
                      try {
                        return $state.userdata?.result?.man?.id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return $state.userdata?.result?.man?.id || "";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
              }
              onRefreshChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "reminderSetting",
                  "refresh"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onSmsChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "reminderSetting",
                  "sms"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onTelChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "reminderSetting",
                  "tel"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              phoneNumber={(() => {
                try {
                  return $state.mobile;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              refresh={generateStateValueProp($state, [
                "reminderSetting",
                "refresh"
              ])}
              shop={async () => {
                const $steps = {};

                $steps["updateDialogOpendialog"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["dialog", "opendialog"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDialogOpendialog"] != null &&
                  typeof $steps["updateDialogOpendialog"] === "object" &&
                  typeof $steps["updateDialogOpendialog"].then === "function"
                ) {
                  $steps["updateDialogOpendialog"] =
                    await $steps["updateDialogOpendialog"];
                }

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.sessionStorage.setItem(
                              "page",
                              "settingReminder"
                            );
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              sms={generateStateValueProp($state, ["reminderSetting", "sms"])}
              subscription={(() => {
                try {
                  return $state?.userdata?.result?.man?.hamyarStatus
                    ? true
                    : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()}
              tel={generateStateValueProp($state, ["reminderSetting", "tel"])}
              telegramId={(() => {
                try {
                  return $state.userdata?.result?.man?.telegramId;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              telegramOn={(() => {
                try {
                  return $state.userdata?.result?.man?.telegramId
                    ? true
                    : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()}
              token={(() => {
                try {
                  return $state.tokenUser;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />

            <BackHandler
              active={
                hasVariant($state, "remindersetting", "remindersetting")
                  ? true
                  : false
              }
              className={classNames("__wab_instance", sty.backHandler__u9Umi, {
                [sty.backHandlerpage_reminder__u9Umie1TrG]: hasVariant(
                  $state,
                  "page",
                  "reminder"
                ),
                [sty.backHandlerremindersetting__u9UmiYo9If]: hasVariant(
                  $state,
                  "remindersetting",
                  "remindersetting"
                ),
                [sty.backHandlerremindersetting_page_reminder__u9UmiYo9IfE1TrG]:
                  hasVariant($state, "remindersetting", "remindersetting") &&
                  hasVariant($state, "page", "reminder")
              })}
              onBack={async () => {
                const $steps = {};

                $steps["updateRemindersetting"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "remindersetting",
                        operation: 6
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, false);
                        return false;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateRemindersetting"] != null &&
                  typeof $steps["updateRemindersetting"] === "object" &&
                  typeof $steps["updateRemindersetting"].then === "function"
                ) {
                  $steps["updateRemindersetting"] =
                    await $steps["updateRemindersetting"];
                }
              }}
            />
          </Reveal>
          {(() => {
            const child$Props = {
              active: hasVariant($state, "editCycle", "editCycle")
                ? true
                : (() => {
                    try {
                      return $state.editCycle == true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })(),
              className: classNames("__wab_instance", sty.settingCycle4, {
                [sty.settingCycle4editCycle]: hasVariant(
                  $state,
                  "editCycle",
                  "editCycle"
                ),
                [sty.settingCycle4noPartner]: hasVariant(
                  $state,
                  "noPartner",
                  "noPartner"
                ),
                [sty.settingCycle4noPartner_editCycle]:
                  hasVariant($state, "noPartner", "noPartner") &&
                  hasVariant($state, "editCycle", "editCycle"),
                [sty.settingCycle4page_reminder_editCycle]:
                  hasVariant($state, "editCycle", "editCycle") &&
                  hasVariant($state, "page", "reminder")
              }),
              click: async () => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.location.reload();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              },
              editTime: generateStateValueProp($state, [
                "settingCycle4",
                "editTime"
              ]),
              hamyar: true,
              hamyar2: hasVariant($state, "editCycle", "editCycle")
                ? true
                : true,
              onBack: async event => {
                const $steps = {};

                $steps["updateEditCycle"] = true
                  ? (() => {
                      const actionArgs = { vgroup: "editCycle", operation: 6 };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, false);
                        return false;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateEditCycle"] != null &&
                  typeof $steps["updateEditCycle"] === "object" &&
                  typeof $steps["updateEditCycle"].then === "function"
                ) {
                  $steps["updateEditCycle"] = await $steps["updateEditCycle"];
                }
              },
              onEditTimeChange2: async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "settingCycle4",
                  "editTime"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              },
              onTokenChange: async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "settingCycle4",
                  "token"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              },
              token: generateStateValueProp($state, ["settingCycle4", "token"]),
              userStatus: (() => {
                try {
                  return $state.userdata.result?.userStatus || {};
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            };

            initializePlasmicStates(
              $state,
              [
                {
                  name: "settingCycle4.token",
                  initFunc: ({ $props, $state, $queries }) =>
                    hasVariant($state, "noPartner", "noPartner")
                      ? (() => {
                          try {
                            return (() => {
                              try {
                                const data =
                                  window.localStorage.getItem("wifeInfo");
                                if (!data) return "";
                                const parsed = JSON.parse(data);
                                return parsed?.token || "";
                              } catch (e) {
                                return "";
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return (() => {
                              try {
                                const data =
                                  window.localStorage.getItem("wifeInfo");
                                if (!data) return "";
                                const parsed = JSON.parse(data);
                                return parsed?.token || "";
                              } catch (e) {
                                return "";
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                }
              ],
              []
            );
            return (
              <SettingCycle4
                data-plasmic-name={"settingCycle4"}
                data-plasmic-override={overrides.settingCycle4}
                {...child$Props}
              />
            );
          })()}
          <AntdModal
            data-plasmic-name={"shopPage"}
            data-plasmic-override={overrides.shopPage}
            className={classNames("__wab_instance", sty.shopPage)}
            closeButtonClassName={classNames({
              [sty["pcls_g2UsKeH7QtT1"]]: hasVariant(
                globalVariants,
                "screen",
                "mobile"
              ),
              [sty["pcls_m4Q6aEHNnuG_"]]: true
            })}
            closeIcon={
              <Icon22Icon
                className={classNames(projectcss.all, sty.svg__x9NEc)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["shopPage", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalOpen"] != null &&
                    typeof $steps["updateModalOpen"] === "object" &&
                    typeof $steps["updateModalOpen"].then === "function"
                  ) {
                    $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                  }
                }}
                role={"img"}
              />
            }
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames
            )}
            hideFooter={true}
            maskClosable={false}
            modalContentClassName={classNames({
              [sty["pcls_juX4_4Gyn2JN"]]: hasVariant(
                globalVariants,
                "screen",
                "mobile"
              ),
              [sty["pcls_vEvEx8a2eex-"]]: true
            })}
            modalScopeClassName={sty["shopPage__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["shopPage", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["shopPage", "open"])}
            title={
              <HeaderLiom
                data-plasmic-name={"headerLiom"}
                data-plasmic-override={overrides.headerLiom}
                className={classNames("__wab_instance", sty.headerLiom)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__hk9H7)}>
                  <XIcon
                    className={classNames(projectcss.all, sty.svg__ebL8F)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return ($state.shopPage.open = false);
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__f6B2G
                    )}
                  >
                    {
                      "\u062a\u0645\u062f\u06cc\u062f \u0627\u0634\u062a\u0631\u0627\u06a9"
                    }
                  </div>
                </div>
              </HeaderLiom>
            }
            trigger={null}
            width={
              hasVariant(globalVariants, "screen", "mobile") ? "100vw" : "100vw"
            }
            wrapClassName={classNames({
              [sty["pcls_XMIYPwXb9hIx"]]: true,
              [sty["pcls_wt9j7A8fcO3_"]]: hasVariant(
                globalVariants,
                "screen",
                "mobile"
              )
            })}
          >
            <section
              className={classNames(projectcss.all, sty.section___6OtIa)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__r4OxB)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qbIuP
                  )}
                >
                  {
                    "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0634\u0645\u0627 \u0641\u0639\u0627\u0644 \u0627\u0633\u062a  \u062a\u0627:"
                  }
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__yF8Wy)}>
                  <section
                    className={classNames(
                      projectcss.all,
                      sty.section__l50Nd,
                      "wrapper"
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4QSEa,
                        "seconds"
                      )}
                      style={(() => {
                        try {
                          return (() => {
                            return $state.userdata?.result?.man
                              ?.timeToEndHamyarTime?.days > 3
                              ? { background: "var(--plasmic-token-green)" }
                              : {
                                  background:
                                    "var(--plasmic-token-system-warning)"
                                };
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__mmAyz
                        )}
                        id={"seconds"}
                      >
                        {"SS"}
                      </h2>
                      <span
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          sty.span__s9Ia
                        )}
                      >
                        {"\u062b\u0627\u0646\u06cc\u0647"}
                      </span>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__lzNpf,
                        "minutes"
                      )}
                      style={(() => {
                        try {
                          return (() => {
                            return $state.userdata?.result?.man
                              ?.timeToEndHamyarTime?.days > 3
                              ? { background: "var(--plasmic-token-green)" }
                              : {
                                  background:
                                    "var(--plasmic-token-system-warning)"
                                };
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__em3EV
                        )}
                        id={"minutes"}
                      >
                        {"MM"}
                      </h2>
                      <span
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          sty.span__tsB6F
                        )}
                      >
                        {"\u062f\u0642\u06cc\u0642\u0647"}
                      </span>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__gqqv1,
                        "hours"
                      )}
                      style={(() => {
                        try {
                          return (() => {
                            return $state.userdata?.result?.man
                              ?.timeToEndHamyarTime?.days > 3
                              ? { background: "var(--plasmic-token-green)" }
                              : {
                                  background:
                                    "var(--plasmic-token-system-warning)"
                                };
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2___2Im1
                        )}
                        id={"hours"}
                      >
                        {"HH"}
                      </h2>
                      <span
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          sty.span__bfqj7
                        )}
                      >
                        {"\u0633\u0627\u0639\u062a"}
                      </span>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__mxR9W,
                        "days"
                      )}
                      style={(() => {
                        try {
                          return (() => {
                            return $state.userdata?.result?.man
                              ?.timeToEndHamyarTime?.days > 3
                              ? { background: "var(--plasmic-token-green)" }
                              : {
                                  background:
                                    "var(--plasmic-token-system-warning)"
                                };
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__zvD1Z
                        )}
                        id={"days"}
                      >
                        {"DD"}
                      </h2>
                      <span
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          sty.span__rtKbd
                        )}
                      >
                        {"\u0631\u0648\u0632"}
                      </span>
                    </div>
                  </section>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__iMn07, {
                    [sty.freeBoxlackOfCourseInformation__iMn07YlftM]:
                      hasVariant(
                        $state,
                        "lackOfCourseInformation",
                        "lackOfCourseInformation"
                      )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__f1HhB, {
                      [sty.freeBoxlackOfCourseInformation__f1HhBylftM]:
                        hasVariant(
                          $state,
                          "lackOfCourseInformation",
                          "lackOfCourseInformation"
                        )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__rXtG3,
                        {
                          [sty.freeBoxlackOfCourseInformation__rXtG3YlftM]:
                            hasVariant(
                              $state,
                              "lackOfCourseInformation",
                              "lackOfCourseInformation"
                            )
                        }
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hmIpL
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobile")
                          ? "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647 \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0646 \u062a\u0627 \u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc \u0647\u0627 \u0631\u0648 \u0628\u062f\u0633\u062a \u0628\u06cc\u0627\u0631\u06cc"
                          : "\u0647\u0645\u0647 \u0646\u06a9\u0627\u062a \u0648 \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc\u200c\u0647\u0627\u06cc \u0631\u0627\u0628\u0637\u0647 \u062f\u0631 \u06cc\u06a9 \u0627\u0634\u062a\u0631\u0627\u06a9"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__m7R4A,
                        {
                          [sty.freeBoxlackOfCourseInformation__m7R4AylftM]:
                            hasVariant(
                              $state,
                              "lackOfCourseInformation",
                              "lackOfCourseInformation"
                            )
                        }
                      )}
                    >
                      <ol
                        data-plasmic-name={"ol"}
                        data-plasmic-override={overrides.ol}
                        className={classNames(
                          projectcss.all,
                          projectcss.ol,
                          sty.ol
                        )}
                      >
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__emZi
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobile") ? (
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return `<b>خودت رو برای بهترین نقش زندگیت آماده کن!</b>  <br>
<div style="position: relative; left: 10px;">این پیام‌ها بهت حس پدر بودن رو یادآوری می‌کنه. وقتی احساس خوبی داشته باشی، همسرت هم آرامش بیشتری خواهد داشت.</div>
`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 pms \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647\u062a \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u0645 \u062a\u0627 \u0628\u062a\u0648\u0646\u06cc \u06a9\u0627\u0631\u0628\u0631 \u0645\u0647\u0645\u0627\u0646 \u0631\u0648 \u0628\u06cc\u0634\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0646\u06cc \u0648 \u0627\u0632 \u0646\u0627\u0631\u0627\u062d\u062a\u06cc \u0647\u0627\u06cc \u0627\u062d\u062a\u0645\u0627\u0644\u06cc \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u06a9\u0646\u06cc. ";
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          ) : (
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return `<b>خودت رو برای بهترین نقش زندگیت آماده کن!</b>  <br>
<div style="position: relative; left: 10px;">این پیام‌ها بهت حس پدر بودن رو یادآوری می‌کنه. وقتی احساس خوبی داشته باشی، همسرت هم آرامش بیشتری خواهد داشت.</div>
`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 pms \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647\u062a \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u0645 \u062a\u0627 \u0628\u062a\u0648\u0646\u06cc \u06a9\u0627\u0631\u0628\u0631 \u0645\u0647\u0645\u0627\u0646 \u0631\u0648 \u0628\u06cc\u0634\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0646\u06cc \u0648 \u0627\u0632 \u0646\u0627\u0631\u0627\u062d\u062a\u06cc \u0647\u0627\u06cc \u0627\u062d\u062a\u0645\u0627\u0644\u06cc \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u06a9\u0646\u06cc. ";
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          )}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__uw4I1
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobile") ? (
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return `<b>رابطه‌تون رو قوی‌تر کن، بدون گفتن حتی یک کلمه!</b>  <br>
<div style="position: relative; left: 10px;">این پیام‌ها به همسرت نشون می‌ده که چقدر برات مهمه. یک راه ساده برای اینکه رابطه‌تون رو محکم‌تر کنی!</div>
`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u062f\u0631 \u0647\u0631 \u0631\u0648\u0632 pms \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627\u06cc\u06cc \u0628\u0631\u0627\u06cc \u06a9\u0627\u0631\u0628\u0631 \u0645\u0647\u0645\u0627\u0646 \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc\u0634\u0647 \u06a9\u0647 \u0627\u0648\u0646 \u0647\u0645 \u0628\u062a\u0648\u0646\u0647 \u062e\u0648\u062f\u0634 \u0631\u0648 \u06a9\u0646\u062a\u0631\u0644 \u06a9\u0646\u0647 \u0648 \u062d\u0648\u0627\u0633\u0634 \u0628\u0647 \u062a\u0648 \u0648 \u0631\u0627\u0628\u0637\u0647 \u062a\u0648\u0646 \u0628\u0627\u0634\u0647(\u200c\u0627\u0644\u0628\u062a\u0647 \u06a9\u0647 \u0642\u0631\u0627\u0631 \u0646\u06cc\u0633\u062a \u0627\u06cc\u0646 \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627 \u0628\u0635\u0648\u0631\u062a \u0645\u0633\u062a\u0642\u06cc\u0645 \u0627\u0631\u0633\u0627\u0644 \u0628\u0634\u0646 \u0648 \u0627\u0648\u0646 \u0628\u0641\u0647\u0645\u0647 \u06a9\u0647 \u062a\u0648 \u0627\u06cc\u0646 \u0642\u0627\u0628\u0644\u06cc\u062a \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0631\u062f\u06cc)";
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          ) : (
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return `<b>رابطه‌تون رو قوی‌تر کن، بدون گفتن حتی یک کلمه!</b>  <br>
<div style="position: relative; left: 10px;">این پیام‌ها به همسرت نشون می‌ده که چقدر برات مهمه. یک راه ساده برای اینکه رابطه‌تون رو محکم‌تر کنی!</div>
`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u062f\u0631 \u0647\u0631 \u0631\u0648\u0632 pms \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627\u06cc\u06cc \u0628\u0631\u0627\u06cc \u06a9\u0627\u0631\u0628\u0631 \u0645\u0647\u0645\u0627\u0646 \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc\u0634\u0647 \u06a9\u0647 \u0627\u0648\u0646 \u0647\u0645 \u0628\u062a\u0648\u0646\u0647 \u062e\u0648\u062f\u0634 \u0631\u0648 \u06a9\u0646\u062a\u0631\u0644 \u06a9\u0646\u0647 \u0648 \u062d\u0648\u0627\u0633\u0634 \u0628\u0647 \u062a\u0648 \u0648 \u0631\u0627\u0628\u0637\u0647 \u062a\u0648\u0646 \u0628\u0627\u0634\u0647(\u200c\u0627\u0644\u0628\u062a\u0647 \u06a9\u0647 \u0642\u0631\u0627\u0631 \u0646\u06cc\u0633\u062a \u0627\u06cc\u0646 \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627 \u0628\u0635\u0648\u0631\u062a \u0645\u0633\u062a\u0642\u06cc\u0645 \u0627\u0631\u0633\u0627\u0644 \u0628\u0634\u0646 \u0648 \u0627\u0648\u0646 \u0628\u0641\u0647\u0645\u0647 \u06a9\u0647 \u062a\u0648 \u0627\u06cc\u0646 \u0642\u0627\u0628\u0644\u06cc\u062a \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0631\u062f\u06cc)";
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          )}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__zdSey
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobile") ? (
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return `<b>حس پدر بودن رو تجربه کن!</b>  <br>
<div style="position: relative; left: 10px;">با دریافت پیام‌هایی درباره وضعیت جنین، همیشه در جریان تغییرات و رشد فرزندت خواهی بود.</div>
`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return '"\u0634\u0631\u0648\u0639 \u067e\u0631\u06cc\u0648\u062f\u0634 \u0631\u0648 \u067e\u06cc\u0627\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0645 \u062a\u0627 \u0628\u0647\u062a\u0631 \u0627\u0632\u0634 \u0645\u0631\u0627\u0642\u0628\u062a \u06a9\u0646\u06cc \u0648 \u0631\u0627\u0628\u0637\u0647 \u0634\u0627\u062f\u062a\u0631\u06cc \u0628\u0633\u0627\u0632\u06cc."\n';
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          ) : (
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return `<b>حس پدر بودن رو تجربه کن!</b>  <br>
<div style="position: relative; left: 10px;">با دریافت پیام‌هایی درباره وضعیت جنین، همیشه در جریان تغییرات و رشد فرزندت خواهی بود.</div>
`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0634\u0631\u0648\u0639 \u067e\u0631\u06cc\u0648\u062f\u0634 \u0631\u0648 \u0628\u0631\u0627\u062a \u067e\u06cc\u0627\u0645\u06a9 \u0645\u06cc\u06a9\u0646\u0645 \u062a\u0627 \u0628\u062a\u0648\u0646\u06cc \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632\u0634 \u0645\u0631\u0627\u0642\u0628\u062a \u06a9\u0646\u06cc \u0648 \u06a9\u0645\u062a\u0631 \u062f\u0631\u062f \u0628\u06a9\u0634\u0647 \u0648 \u0631\u0627\u0628\u0637\u0647 \u0634\u0627\u062f\u062a\u0631\u06cc \u0628\u0633\u0627\u0632\u06cc";
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          )}
                        </li>
                      </ol>
                      <ul
                        data-plasmic-name={"ul"}
                        data-plasmic-override={overrides.ul}
                        className={classNames(
                          projectcss.all,
                          projectcss.ul,
                          sty.ul
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $state.shopListText;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                sty.li__neQsf
                              )}
                              key={currentIndex}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateModalshopText"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["modalshopText"]
                                        },
                                        operation: 0,
                                        value: currentItem
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateModalshopText"] != null &&
                                  typeof $steps["updateModalshopText"] ===
                                    "object" &&
                                  typeof $steps["updateModalshopText"].then ===
                                    "function"
                                ) {
                                  $steps["updateModalshopText"] =
                                    await $steps["updateModalshopText"];
                                }

                                $steps["updateShopTextOpen"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["shopText2", "open"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateShopTextOpen"] != null &&
                                  typeof $steps["updateShopTextOpen"] ===
                                    "object" &&
                                  typeof $steps["updateShopTextOpen"].then ===
                                    "function"
                                ) {
                                  $steps["updateShopTextOpen"] =
                                    await $steps["updateShopTextOpen"];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__zX6ME
                                )}
                                style={(() => {
                                  try {
                                    return {
                                      "border-bottom":
                                        currentItem.Special == true
                                          ? "solid 1px #e0e0e0"
                                          : "none"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <Icon272Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__rXzY
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__olpul
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.title;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u062f\u0648\u0631\u0647 \u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9\r";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <Icon142Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__fbnLe
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </li>
                          );
                        })}
                      </ul>
                      <AntdModal
                        data-plasmic-name={"shopText2"}
                        data-plasmic-override={overrides.shopText2}
                        className={classNames("__wab_instance", sty.shopText2)}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          styleTokensClassNames
                        )}
                        hideFooter={true}
                        maskClosable={true}
                        modalScopeClassName={sty["shopText2__modal"]}
                        onOpenChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "shopText2",
                            "open"
                          ]).apply(null, eventArgs);
                        }}
                        open={generateStateValueProp($state, [
                          "shopText2",
                          "open"
                        ])}
                        title={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___70KU2
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.modalshopText.title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        trigger={null}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vSpPa
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__e7Mfc
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.modalshopText.text;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </AntdModal>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rNcwa
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"\u0646\u06a9\u062a\u0647:    "}
                          </span>
                          <React.Fragment>
                            {
                              "\u0628\u0627 \u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u062a\u0645\u0627\u0645\u06cc \u06cc\u0627\u062f\u0622\u0648\u0631\u06cc \u0647\u0627 \u0648 \u0646\u06a9\u0627\u062a \u06a9\u0627\u0631\u0628\u0631\u062f\u06cc \u062a\u0642\u0648\u06cc\u062a \u0631\u0627\u0628\u0637\u0647  \u0647\u0645 \u067e\u06cc\u0627\u0645\u06a9 \u0645\u06cc\u0634\u0648\u0646\u062f \u0648 \u0647\u0645 \u062f\u0631 \u062a\u0644\u06af\u0631\u0627\u0645 \u0642\u0627\u0628\u0644 \u062f\u0633\u062a\u0631\u0633 \u0647\u0633\u062a\u0646\u062f"
                            }
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vw2Ej)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__scYEd
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return $state.shopDialog.data.result.find(
                                    item => item.selected === 1
                                  ).topBadge
                                    ? true
                                    : false;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return $state.shapData.result.find(
                                    item => item.selected === 1
                                  ).topBadge
                                    ? true
                                    : false;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })()
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__y6WY
                            )}
                            style={(() => {
                              try {
                                return {
                                  background: $state.shapData.result.find(
                                    item => item.selected === 1
                                  ).topBadgeBgColor
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___6FvQa
                              )}
                              style={(() => {
                                try {
                                  return {
                                    color: $state.shapData.result.find(
                                      item => item.selected === 1
                                    ).topBadgeTextColor
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.shapData.result.find(
                                      item => item.selected === 1
                                    ).topBadge;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\ud83c\udf39 \u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646 \ud83c\udf39";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___8CL5X
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wXIta
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.shapData.result.find(
                                    item => item.selected === 1
                                  ).title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "-";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          {(() => {
                            try {
                              return $state.shapData.result[$state.selectedShop]
                                .badge
                                ? true
                                : false;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__gNhkJ
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__yxzzq
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.shapData.result.find(
                                        item => item.selected === 1
                                      ).badge;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "-";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__viwWx
                          )}
                        >
                          {(() => {
                            try {
                              return $state.shapData.result[$state.selectedShop]
                                .badge
                                ? true
                                : false;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ctJJz
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.shapData.result
                                      .find(item => item.selected === 1)
                                      .fullPrice.toLocaleString("en-US");
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "-";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__rdpFa
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___4QrBl
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.shapData.result
                                        .find(item => item.selected === 1)
                                        .price.toLocaleString("en-US") +
                                      " تومان |"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "-";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fgymc
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.shapData.result.find(
                                      item => item.selected === 1
                                    ).per_month_text;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "-";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </div>
                        {(() => {
                          try {
                            return !$state.discountBox;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eFxet
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateDiscountBox"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["discountBox"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateDiscountBox"] != null &&
                                typeof $steps["updateDiscountBox"] ===
                                  "object" &&
                                typeof $steps["updateDiscountBox"].then ===
                                  "function"
                              ) {
                                $steps["updateDiscountBox"] =
                                  await $steps["updateDiscountBox"];
                              }
                            }}
                          >
                            {
                              "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f"
                            }
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return $state.discountBox;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__d2TKj
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__tGHt
                              )}
                            >
                              {(() => {
                                const child$Props = {
                                  allowClear: hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  )
                                    ? false
                                    : false,
                                  autoFocus: hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  )
                                    ? false
                                    : false,
                                  bordered: hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  )
                                    ? false
                                    : false,
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input2
                                  ),
                                  disabled: hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  )
                                    ? false
                                    : false,
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input2", "value"],
                                      AntdInput_Helpers
                                    ).apply(null, eventArgs);

                                    (async event => {
                                      const $steps = {};
                                    }).apply(null, eventArgs);
                                  },
                                  placeholder:
                                    "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f",
                                  prefix: (
                                    <Icon10Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___9SyRy
                                      )}
                                      role={"img"}
                                    />
                                  ),

                                  readOnly: hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  )
                                    ? false
                                    : false,
                                  size: hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobile"
                                  )
                                    ? "small"
                                    : "small",
                                  suffix: null,
                                  value: generateStateValueProp($state, [
                                    "input2",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input2.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input2"}
                                    data-plasmic-override={overrides.input2}
                                    {...child$Props}
                                  />
                                );
                              })()}
                              {(() => {
                                try {
                                  return $state.visiblebox;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ujkT2
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateVisiblebox"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["visiblebox"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateVisiblebox"] != null &&
                                      typeof $steps["updateVisiblebox"] ===
                                        "object" &&
                                      typeof $steps["updateVisiblebox"].then ===
                                        "function"
                                    ) {
                                      $steps["updateVisiblebox"] =
                                        await $steps["updateVisiblebox"];
                                    }
                                  }}
                                />
                              ) : null}
                            </div>
                            <Button
                              data-plasmic-name={"button5"}
                              data-plasmic-override={overrides.button5}
                              className={classNames(
                                "__wab_instance",
                                sty.button5
                              )}
                              color={generateStateValueProp($state, [
                                "button5",
                                "color"
                              ])}
                              isDisabled={
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? (() => {
                                      try {
                                        return $state.input2.value == null ||
                                          $state.input2.value == ""
                                          ? true
                                          : false;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  : (() => {
                                      try {
                                        return $state.input2.value == "" ||
                                          $state.input2.value == null
                                          ? true
                                          : false;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                              }
                              load={generateStateValueProp($state, [
                                "button5",
                                "load"
                              ])}
                              loading={generateStateValueProp($state, [
                                "button5",
                                "loading"
                              ])}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateVisiblebox"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["visiblebox"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateVisiblebox"] != null &&
                                  typeof $steps["updateVisiblebox"] ===
                                    "object" &&
                                  typeof $steps["updateVisiblebox"].then ===
                                    "function"
                                ) {
                                  $steps["updateVisiblebox"] =
                                    await $steps["updateVisiblebox"];
                                }

                                $steps["updateDiscountCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["discountCode"]
                                        },
                                        operation: 0,
                                        value: $state.input2.value
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateDiscountCode"] != null &&
                                  typeof $steps["updateDiscountCode"] ===
                                    "object" &&
                                  typeof $steps["updateDiscountCode"].then ===
                                    "function"
                                ) {
                                  $steps["updateDiscountCode"] =
                                    await $steps["updateDiscountCode"];
                                }
                              }}
                              onColorChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "button5",
                                    "color"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              onLoadChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "button5",
                                    "load"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              onLoadingChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "button5",
                                    "loading"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                            >
                              {"\u062a\u0627\u06cc\u06cc\u062f"}
                            </Button>
                          </div>
                        ) : null}
                        <Button
                          data-plasmic-name={"button6"}
                          data-plasmic-override={overrides.button6}
                          className={classNames("__wab_instance", sty.button6)}
                          color={generateStateValueProp($state, [
                            "button6",
                            "color"
                          ])}
                          endIcon={
                            <PlasmicIcon__
                              PlasmicIconType={
                                hasVariant(globalVariants, "screen", "mobile")
                                  ? Icon12Icon
                                  : Icon12Icon
                              }
                              className={classNames(
                                projectcss.all,
                                sty.svg__hA7Zt
                              )}
                              role={"img"}
                            />
                          }
                          isDisabled={
                            hasVariant(globalVariants, "screen", "mobile")
                              ? (() => {
                                  try {
                                    return $state.loadingshop;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              : (() => {
                                  try {
                                    return $state.loadingshop;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                          }
                          load={generateStateValueProp($state, [
                            "button6",
                            "load"
                          ])}
                          loading={generateStateValueProp($state, [
                            "button6",
                            "loading"
                          ])}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateLoadingshop"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["loadingshop"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateLoadingshop"] != null &&
                              typeof $steps["updateLoadingshop"] === "object" &&
                              typeof $steps["updateLoadingshop"].then ===
                                "function"
                            ) {
                              $steps["updateLoadingshop"] =
                                await $steps["updateLoadingshop"];
                            }

                            $steps["updateSelectedShop"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["selectedShop"]
                                    },
                                    operation: 0,
                                    value: $state.shapData.result.findIndex(
                                      item => item.selected === 1
                                    )
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateSelectedShop"] != null &&
                              typeof $steps["updateSelectedShop"] ===
                                "object" &&
                              typeof $steps["updateSelectedShop"].then ===
                                "function"
                            ) {
                              $steps["updateSelectedShop"] =
                                await $steps["updateSelectedShop"];
                            }

                            $steps["updateBuyId"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["buyId"]
                                    },
                                    operation: 0,
                                    value: $state.shapData.result.find(
                                      item => item.selected === 1
                                    ).id
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateBuyId"] != null &&
                              typeof $steps["updateBuyId"] === "object" &&
                              typeof $steps["updateBuyId"].then === "function"
                            ) {
                              $steps["updateBuyId"] =
                                await $steps["updateBuyId"];
                            }

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://n8n.staas.ir/webhook/hamyar/shopBuy",
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            id: $state.buyId,
                                            offCode: $state.discountCode,
                                            refCode:
                                              $state.userdata.result.man
                                                .refCode,
                                            redirectUrl:
                                              "https://apps.liom.app/shop-result?r=" +
                                              $state.userdata.result.man
                                                .refCode +
                                              "&buyId=" +
                                              $state.buyId +
                                              "&offCode=" +
                                              $state.discountCode +
                                              "&valueShop=" +
                                              $state.shapData.result[
                                                $state.selectedShop
                                              ].type +
                                              "-" +
                                              $state.shapData.result[
                                                $state.selectedShop
                                              ].value +
                                              "&price=" +
                                              $state.shapData.result[
                                                $state.selectedShop
                                              ].price +
                                              "&manId=" +
                                              $state.userdata.result.man.id
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      (() => {
                                        try {
                                          return {
                                            headers: {
                                              "Content-Type":
                                                "application/json",
                                              Authorization: $state.tokenUser
                                            }
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] =
                                await $steps["invokeGlobalAction"];
                            }

                            $steps["goToPage"] =
                              $steps.invokeGlobalAction?.data?.success ==
                                true &&
                              $steps.invokeGlobalAction?.data?.result != false
                                ? (() => {
                                    const actionArgs = {
                                      destination: (() => {
                                        try {
                                          return $steps.invokeGlobalAction?.data
                                            ?.result;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["goToPage"] != null &&
                              typeof $steps["goToPage"] === "object" &&
                              typeof $steps["goToPage"].then === "function"
                            ) {
                              $steps["goToPage"] = await $steps["goToPage"];
                            }

                            $steps["updateLoadingshop2"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["loadingshop"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateLoadingshop2"] != null &&
                              typeof $steps["updateLoadingshop2"] ===
                                "object" &&
                              typeof $steps["updateLoadingshop2"].then ===
                                "function"
                            ) {
                              $steps["updateLoadingshop2"] =
                                await $steps["updateLoadingshop2"];
                            }

                            $steps["invokeGlobalAction2"] =
                              $steps.invokeGlobalAction?.data?.success ==
                                false ||
                              $steps.invokeGlobalAction?.data?.result == false
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "error",
                                        "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                                        "top-left"
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["invokeGlobalAction2"] != null &&
                              typeof $steps["invokeGlobalAction2"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction2"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction2"] =
                                await $steps["invokeGlobalAction2"];
                            }
                          }}
                          onColorChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button6",
                                "color"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onLoadChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button6",
                                "load"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onLoadingChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button6",
                                "loading"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          showEndIcon={(() => {
                            try {
                              return $state.loadingshop;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ifddN
                            )}
                          >
                            {
                              "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647"
                            }
                          </div>
                        </Button>
                        <p
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            projectcss.__wab_text,
                            sty.p__cumd7
                          )}
                        >
                          {
                            "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                          }
                        </p>
                        {(
                          hasVariant(globalVariants, "screen", "mobile")
                            ? true
                            : false
                        ) ? (
                          <p
                            className={classNames(
                              projectcss.all,
                              projectcss.p,
                              projectcss.__wab_text,
                              sty.p__s7IyR
                            )}
                          >
                            {
                              "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                            }
                          </p>
                        ) : null}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rfCrb)}
                    >
                      <Button
                        data-plasmic-name={"button10"}
                        data-plasmic-override={overrides.button10}
                        className={classNames("__wab_instance", sty.button10)}
                        color={generateStateValueProp($state, [
                          "button10",
                          "color"
                        ])}
                        endIcon={
                          <PlasmicIcon__
                            PlasmicIconType={
                              hasVariant(globalVariants, "screen", "mobile")
                                ? Icon12Icon
                                : Icon12Icon
                            }
                            className={classNames(
                              projectcss.all,
                              sty.svg__fXe7Z
                            )}
                            role={"img"}
                          />
                        }
                        isDisabled={
                          hasVariant(globalVariants, "screen", "mobile")
                            ? (() => {
                                try {
                                  return $state.loadingshop;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return $state.loadingshop;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                        }
                        load={generateStateValueProp($state, [
                          "button10",
                          "load"
                        ])}
                        loading={generateStateValueProp($state, [
                          "button10",
                          "loading"
                        ])}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateDialog3Opendialog"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dialog3", "opendialog"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDialog3Opendialog"] != null &&
                            typeof $steps["updateDialog3Opendialog"] ===
                              "object" &&
                            typeof $steps["updateDialog3Opendialog"].then ===
                              "function"
                          ) {
                            $steps["updateDialog3Opendialog"] =
                              await $steps["updateDialog3Opendialog"];
                          }
                        }}
                        onColorChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button10",
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button10",
                              "load"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadingChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button10",
                              "loading"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        showEndIcon={(() => {
                          try {
                            return $state.loadingshop;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__u2VBb
                          )}
                        >
                          {
                            "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647"
                          }
                        </div>
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
              <Timer
                data-plasmic-name={"timer"}
                data-plasmic-override={overrides.timer}
                className={classNames("__wab_instance", sty.timer)}
                intervalSeconds={1}
                isRunning={true}
                onTick={async () => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              const __days = document.querySelector("#days");
                              const __hours = document.querySelector("#hours");
                              const __minutes =
                                document.querySelector("#minutes");
                              const __seconds =
                                document.querySelector("#seconds");
                              var hamyarTime =
                                $state.userdata?.result?.man?.hamyarTime;
                              if (hamyarTime) {
                                const targetDate = new Date(
                                  Date.UTC(
                                    hamyarTime.year,
                                    hamyarTime.month - 1,
                                    hamyarTime.day,
                                    hamyarTime.hour,
                                    hamyarTime.minute,
                                    hamyarTime.second
                                  )
                                );
                                function countdown() {
                                  const now = new Date();
                                  const totalSeconds =
                                    (targetDate - now) / 1000;
                                  if (totalSeconds <= 0) {
                                    __days.innerHTML = "00";
                                    __hours.innerHTML = "00";
                                    __minutes.innerHTML = "00";
                                    __seconds.innerHTML = "00";
                                    return;
                                  }
                                  const days = Math.floor(
                                    totalSeconds / 3600 / 24
                                  );
                                  const hours =
                                    Math.floor(totalSeconds / 3600) % 24;
                                  const minutes =
                                    Math.floor(totalSeconds / 60) % 60;
                                  const seconds = Math.floor(totalSeconds % 60);
                                  __days.innerHTML = formatTime(days);
                                  __hours.innerHTML = formatTime(hours);
                                  __minutes.innerHTML = formatTime(minutes);
                                  __seconds.innerHTML = formatTime(seconds);
                                }
                                function formatTime(time) {
                                  return time < 10 ? `0${time}` : time;
                                }
                                return countdown();
                              }
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                runWhileEditing={false}
              />
            </section>
          </AntdModal>
          <Reveal
            className={classNames("__wab_instance", sty.reveal___7S79N, {
              [sty.revealeditCycle___7S79Niku9W]: hasVariant(
                $state,
                "editCycle",
                "editCycle"
              ),
              [sty.revealedit___7S79NYxolL]: hasVariant($state, "edit", "edit")
            })}
            damping={0.2}
            effect={"fade"}
            triggerOnce={true}
          >
            <EditProfile2
              data-plasmic-name={"editProfile2"}
              data-plasmic-override={overrides.editProfile2}
              active={(() => {
                try {
                  return $state.edit == true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()}
              back={async () => {
                const $steps = {};

                $steps["updateEdit"] = true
                  ? (() => {
                      const actionArgs = { vgroup: "edit", operation: 2 };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        const oldValue = $stateGet($state, vgroup);
                        $stateSet($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateEdit"] != null &&
                  typeof $steps["updateEdit"] === "object" &&
                  typeof $steps["updateEdit"].then === "function"
                ) {
                  $steps["updateEdit"] = await $steps["updateEdit"];
                }
              }}
              className={classNames("__wab_instance", sty.editProfile2, {
                [sty.editProfile2edit]: hasVariant($state, "edit", "edit")
              })}
              hamyar={true}
              onTokenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "editProfile2",
                  "token"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onedit={async () => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.location.reload();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              token={generateStateValueProp($state, ["editProfile2", "token"])}
            />
          </Reveal>
          <ApiRequest
            data-plasmic-name={"remember"}
            data-plasmic-override={overrides.remember}
            body={(() => {
              try {
                return {
                  r: $state.reminderSetting.refresh,
                  liomId: $state.userdata?.result?.man?.id
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.remember, {
              [sty.remembernoPartner]: hasVariant(
                $state,
                "noPartner",
                "noPartner"
              ),
              [sty.rememberpage_reminder]: hasVariant(
                $state,
                "page",
                "reminder"
              ),
              [sty.rememberremindersetting]: hasVariant(
                $state,
                "remindersetting",
                "remindersetting"
              ),
              [sty.rememberremindersetting_page_reminder]:
                hasVariant($state, "page", "reminder") &&
                hasVariant($state, "remindersetting", "remindersetting")
            })}
            config={(() => {
              try {
                return {
                  headers: {
                    "Content-Type": "application/json",
                    Accept: "application/json",
                    Authorization: $state.tokenUser,
                    "X-Requested-With": "XMLHttpRequest"
                  }
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            errorDisplay={null}
            loadingDisplay={null}
            method={"POST"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["remember", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["remember", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["remember", "data"]).apply(
                null,
                eventArgs
              );

              (async data => {
                const $steps = {};

                $steps["updateRemind"] = ($state.remember?.data ? true : false)
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["remind"]
                        },
                        operation: 0,
                        value: $state.remember?.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateRemind"] != null &&
                  typeof $steps["updateRemind"] === "object" &&
                  typeof $steps["updateRemind"].then === "function"
                ) {
                  $steps["updateRemind"] = await $steps["updateRemind"];
                }
              }).apply(null, eventArgs);
            }}
            shouldFetch={(() => {
              try {
                return $state.userdata?.result?.man?.id ? true : false;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/user/task/day"}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "main",
    "mainHamyar",
    "footerMain",
    "mainHeader",
    "button",
    "embedHtml",
    "dialog",
    "shopDialog",
    "dialogTitle",
    "h5",
    "input4",
    "button12",
    "button8",
    "dialog2",
    "subscription3",
    "button11",
    "dialog3",
    "lottie",
    "button13",
    "img",
    "reminder2",
    "reminderSetting",
    "settingCycle4",
    "shopPage",
    "ol",
    "ul",
    "shopText2",
    "input2",
    "button5",
    "button6",
    "button10",
    "timer",
    "headerLiom",
    "editProfile2",
    "remember"
  ],
  main: ["main", "mainHamyar", "footerMain", "mainHeader", "button"],
  mainHamyar: ["mainHamyar"],
  footerMain: ["footerMain"],
  mainHeader: ["mainHeader", "button"],
  button: ["button"],
  embedHtml: ["embedHtml"],
  dialog: [
    "dialog",
    "shopDialog",
    "dialogTitle",
    "h5",
    "input4",
    "button12",
    "button8",
    "dialog2",
    "subscription3",
    "button11"
  ],
  shopDialog: [
    "shopDialog",
    "dialogTitle",
    "h5",
    "input4",
    "button12",
    "button8",
    "dialog2",
    "subscription3",
    "button11"
  ],
  dialogTitle: ["dialogTitle", "h5"],
  h5: ["h5"],
  input4: ["input4"],
  button12: ["button12"],
  button8: ["button8"],
  dialog2: ["dialog2", "subscription3", "button11"],
  subscription3: ["subscription3"],
  button11: ["button11"],
  dialog3: ["dialog3", "lottie", "button13"],
  lottie: ["lottie"],
  button13: ["button13"],
  img: ["img"],
  reminder2: ["reminder2"],
  reminderSetting: ["reminderSetting"],
  settingCycle4: ["settingCycle4"],
  shopPage: [
    "shopPage",
    "ol",
    "ul",
    "shopText2",
    "input2",
    "button5",
    "button6",
    "button10",
    "timer",
    "headerLiom"
  ],
  ol: ["ol"],
  ul: ["ul"],
  shopText2: ["shopText2"],
  input2: ["input2"],
  button5: ["button5"],
  button6: ["button6"],
  button10: ["button10"],
  timer: ["timer"],
  headerLiom: ["headerLiom"],
  editProfile2: ["editProfile2"],
  remember: ["remember"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  main: "div";
  mainHamyar: typeof MainHamyar;
  footerMain: typeof FooterMain;
  mainHeader: typeof MainHeader;
  button: typeof Button;
  embedHtml: typeof Embed;
  dialog: typeof Dialog;
  shopDialog: typeof ApiRequest;
  dialogTitle: typeof DialogTitle;
  h5: "h5";
  input4: typeof AntdInput;
  button12: typeof Button;
  button8: typeof Button;
  dialog2: typeof Dialog;
  subscription3: typeof Subscription;
  button11: typeof Button;
  dialog3: typeof Dialog;
  lottie: typeof LottieWrapper;
  button13: typeof Button;
  img: typeof PlasmicImg__;
  reminder2: typeof Reminder;
  reminderSetting: typeof ReminderSetting;
  settingCycle4: typeof SettingCycle4;
  shopPage: typeof AntdModal;
  ol: "ol";
  ul: "ul";
  shopText2: typeof AntdModal;
  input2: typeof AntdInput;
  button5: typeof Button;
  button6: typeof Button;
  button10: typeof Button;
  timer: typeof Timer;
  headerLiom: typeof HeaderLiom;
  editProfile2: typeof EditProfile2;
  remember: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHamyar3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHamyar3__VariantsArgs;
    args?: PlasmicHamyar3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicHamyar3__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicHamyar3__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHamyar3__ArgProps,
          internalVariantPropNames: PlasmicHamyar3__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHamyar3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHamyar3";
  } else {
    func.displayName = `PlasmicHamyar3.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHamyar3 = Object.assign(
  // Top-level PlasmicHamyar3 renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    main: makeNodeComponent("main"),
    mainHamyar: makeNodeComponent("mainHamyar"),
    footerMain: makeNodeComponent("footerMain"),
    mainHeader: makeNodeComponent("mainHeader"),
    button: makeNodeComponent("button"),
    embedHtml: makeNodeComponent("embedHtml"),
    dialog: makeNodeComponent("dialog"),
    shopDialog: makeNodeComponent("shopDialog"),
    dialogTitle: makeNodeComponent("dialogTitle"),
    h5: makeNodeComponent("h5"),
    input4: makeNodeComponent("input4"),
    button12: makeNodeComponent("button12"),
    button8: makeNodeComponent("button8"),
    dialog2: makeNodeComponent("dialog2"),
    subscription3: makeNodeComponent("subscription3"),
    button11: makeNodeComponent("button11"),
    dialog3: makeNodeComponent("dialog3"),
    lottie: makeNodeComponent("lottie"),
    button13: makeNodeComponent("button13"),
    img: makeNodeComponent("img"),
    reminder2: makeNodeComponent("reminder2"),
    reminderSetting: makeNodeComponent("reminderSetting"),
    settingCycle4: makeNodeComponent("settingCycle4"),
    shopPage: makeNodeComponent("shopPage"),
    ol: makeNodeComponent("ol"),
    ul: makeNodeComponent("ul"),
    shopText2: makeNodeComponent("shopText2"),
    input2: makeNodeComponent("input2"),
    button5: makeNodeComponent("button5"),
    button6: makeNodeComponent("button6"),
    button10: makeNodeComponent("button10"),
    timer: makeNodeComponent("timer"),
    headerLiom: makeNodeComponent("headerLiom"),
    editProfile2: makeNodeComponent("editProfile2"),
    remember: makeNodeComponent("remember"),

    // Metadata about props expected for PlasmicHamyar3
    internalVariantProps: PlasmicHamyar3__VariantProps,
    internalArgProps: PlasmicHamyar3__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "همیار لیوم",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHamyar3;
/* prettier-ignore-end */
