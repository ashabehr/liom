/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: -_waIfkF0kiE

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../todo_mvc_app/plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicResultAgePregnant.module.css"; // plasmic-import: -_waIfkF0kiE/css

import Icon230Icon from "./icons/PlasmicIcon__Icon230"; // plasmic-import: Z1yDsg70sSq3/icon
import Icon229Icon from "./icons/PlasmicIcon__Icon229"; // plasmic-import: bi0P207Qf6SQ/icon
import CheckSvgIcon from "../todo_mvc_app/icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon

createPlasmicElementProxy;

export type PlasmicResultAgePregnant__VariantMembers = {
  dark: "dark";
};
export type PlasmicResultAgePregnant__VariantsArgs = {
  dark?: SingleBooleanChoiceArg<"dark">;
};
type VariantPropType = keyof PlasmicResultAgePregnant__VariantsArgs;
export const PlasmicResultAgePregnant__VariantProps =
  new Array<VariantPropType>("dark");

export type PlasmicResultAgePregnant__ArgsType = {};
type ArgPropType = keyof PlasmicResultAgePregnant__ArgsType;
export const PlasmicResultAgePregnant__ArgProps = new Array<ArgPropType>();

export type PlasmicResultAgePregnant__OverridesType = {
  root?: Flex__<"div">;
  button3?: Flex__<typeof Button>;
};

export interface DefaultResultAgePregnantProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicResultAgePregnant__RenderFunc(props: {
  variants: PlasmicResultAgePregnant__VariantsArgs;
  args: PlasmicResultAgePregnant__ArgsType;
  overrides: PlasmicResultAgePregnant__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dark",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.theme == "dark";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.dark
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "agePregnant",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                week: parseInt($ctx.query.week),
                day: parseInt($ctx.query.day)
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return { week: 0, day: 0 };
              }
              throw e;
            }
          })()
      },
      {
        path: "sizeByFruit",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "",
          "\u062a\u062e\u0645\u06a9",
          "\u0644\u0642\u0627\u062d",
          "\u06a9\u0627\u0634\u062a",
          "\u062f\u0627\u0646\u0647 \u06a9\u0646\u062c\u062f",
          "\u0639\u062f\u0633",
          "\u0628\u0644\u0648\u0628\u0631\u06cc",
          "\u0644\u0648\u0628\u06cc\u0627",
          "\u0627\u0646\u06af\u0648\u0631",
          "\u067e\u0631\u062a\u0642\u0627\u0644 \u0645\u06cc\u0646\u06cc\u0627\u062a\u0648\u0631\u06cc",
          "\u0627\u0646\u062c\u06cc\u0631",
          "\u0644\u06cc\u0645\u0648 \u062a\u0631\u0634",
          "\u063a\u0644\u0627\u0641 \u0646\u062e\u0648\u062f \u0641\u0631\u0646\u06af\u06cc",
          "\u0644\u06cc\u0645\u0648 \u0634\u06cc\u0631\u06cc\u0646",
          "\u0633\u06cc\u0628",
          "\u0622\u0648\u0648\u06a9\u0627\u062f\u0648",
          "\u0634\u0644\u063a\u0645",
          "\u0641\u0644\u0641\u0644 \u062f\u0644\u0645\u0647",
          "\u06af\u0648\u062c\u0647 ",
          "\u0645\u0648\u0632",
          "\u0647\u0648\u06cc\u062c",
          "\u06a9\u062f\u0648 \u0633\u0628\u0632",
          "\u0627\u0646\u0628\u0647",
          "\u0628\u0644\u0627\u0644",
          "\u0631\u0648\u062a\u0627\u0628\u0627\u06af\u0627",
          "\u067e\u06cc\u0627\u0632\u0686\u0647",
          "\u06af\u0644 \u06a9\u0644\u0645",
          "\u0628\u0627\u062f\u0645\u062c\u0627\u0646",
          "\u06a9\u062f\u0648 \u062d\u0644\u0648\u0627\u06cc\u06cc",
          "\u06a9\u0644\u0645 \u0628\u0631\u06af \u0628\u0632\u0631\u06af",
          "\u0646\u0627\u0631\u06af\u06cc\u0644",
          "\u06a9\u0631\u0641\u0633",
          "\u0622\u0646\u0627\u0646\u0627\u0633",
          "\u062e\u0631\u0628\u0632\u0647",
          "\u0645\u0644\u0648\u0646",
          "\u06a9\u0627\u0647\u0648",
          "\u0628\u0631\u06af \u0686\u063a\u0646\u062f\u0631 \u0633\u0648\u0626\u06cc\u0633\u06cc",
          "\u062a\u0631\u0647 \u0641\u0631\u0646\u06af\u06cc",
          "\u0647\u0646\u062f\u0648\u0627\u0646\u0647",
          "\u06a9\u062f\u0648 \u062a\u0646\u0628\u0644",
          "\u0646\u0648\u0632\u0627\u062f"
        ]
      },
      {
        path: "babySize",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          {
            h: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1",
            w: "\u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f1"
          },
          { h: "1.9", w: "1" },
          { h: "2.3", w: "2" },
          { h: "3.1", w: "4" },
          { h: "4.1", w: "7" },
          { h: "5.4", w: "14" },
          { h: "7.4", w: "23" },
          { h: "8.7", w: "43" },
          { h: "10.1", w: "70" },
          { h: "11.6", w: "100" },
          { h: "13", w: "140" },
          { h: "14.2", w: "190" },
          { h: "15.3", w: "240" },
          { h: "25.6", w: "300" },
          { h: "26.7", w: "360" },
          { h: "27.8", w: "430" },
          { h: "28.9", w: "500" },
          { h: "30", w: "600" },
          { h: "34.6", w: "660" },
          { h: "35.6", w: "760" },
          { h: "36.6", w: "875" },
          { h: "37.6", w: "1" },
          { h: "38.6", w: "1.2" },
          { h: "39.9", w: "1.3" },
          { h: "41.1", w: "1.5" },
          { h: "42.4", w: "1.7" },
          { h: "43.7", w: "1.9" },
          { h: "45", w: "2.1" },
          { h: "46.2", w: "2.4" },
          { h: "47.4", w: "2.6" },
          { h: "48.6", w: "2.9" },
          { h: "49.8", w: "3.1" },
          { h: "50.7", w: "3.3" },
          { h: "51.2", w: "3.5" }
        ]
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root,
            { [sty.rootdark]: hasVariant($state, "dark", "dark") }
          )}
        >
          <Embed
            className={classNames("__wab_instance", sty.embedHtml__gbe1J)}
            code={
              "<!-- Hotjar Tracking Code for setting-pregnancy -->\n<script>\n    (function(h,o,t,j,a,r){\n        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};\n        h._hjSettings={hjid:5226515,hjsv:6};\n        a=o.getElementsByTagName('head')[0];\n        r=o.createElement('script');r.async=1;\n        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;\n        a.appendChild(r);\n    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');\n</script>\n<script src=\"https://cdn.jsdelivr.net/npm/jalaali-js/dist/jalaali.js\"></script>"
            }
          />

          <Embed
            className={classNames("__wab_instance", sty.embedHtml__yKwX)}
            code={
              "<script>\n  let isBlocked = false; // \u0645\u062a\u063a\u06cc\u0631 \u0628\u0631\u0627\u06cc \u06a9\u0646\u062a\u0631\u0644 \u0645\u0633\u062f\u0648\u062f \u0634\u062f\u0646 \u062f\u06a9\u0645\u0647\n  let shouldBlockBackButton; // \u0645\u062a\u063a\u06cc\u0631 \u0628\u0631\u0627\u06cc \u0648\u0636\u0639\u06cc\u062a \u0628\u0644\u0648\u06a9\u0647 \u0628\u0648\u062f\u0646 \u062f\u06a9\u0645\u0647\n\n  document.addEventListener('DOMContentLoaded', function() {\n    // \u0628\u0631\u0631\u0633\u06cc \u0627\u06cc\u0646\u06a9\u0647 window.plasmicParent \u0648 window.plasmicParent.state \u0645\u0648\u062c\u0648\u062f \u0647\u0633\u062a\u0646\u062f\n    if (window.plasmicParent && window.plasmicParent.state) {\n      // \u0645\u0642\u062f\u0627\u0631\u062f\u0647\u06cc \u0628\u0647 \u0645\u062a\u063a\u06cc\u0631 \u0641\u0642\u0637 \u0627\u06af\u0631 \u0645\u0642\u062f\u0627\u0631\u062f\u0647\u06cc \u0646\u0634\u062f\u0647 \u0628\u0627\u0634\u062f\n      // if (shouldBlockBackButton === undefined) {\n        shouldBlockBackButton = window.plasmicParent.state.shouldBlockBackButton;\n        console.log(\"value\u06f2: \" + shouldBlockBackButton);\n      // }\n    } else {\n      console.log(\"window.plasmicParent \u06cc\u0627 state \u0645\u0648\u062c\u0648\u062f \u0646\u06cc\u0633\u062a.\");\n    }\n  });\n\n  window.addEventListener('popstate', function(event) {\n    // \u0627\u06af\u0631 \u0642\u0628\u0644\u0627\u064b \u062f\u06a9\u0645\u0647 \u0628\u0627\u0632\u06af\u0634\u062a \u0645\u0633\u062f\u0648\u062f \u0634\u062f\u0647 \u0628\u0627\u0634\u062f\u060c \u0627\u062c\u0627\u0632\u0647 \u0628\u0627\u0632\u06af\u0634\u062a \u0645\u06cc\u200c\u062f\u0647\u06cc\u0645\n    if (isBlocked) {\n      console.log('\u062f\u06a9\u0645\u0647 \u0628\u0627\u0632\u06af\u0634\u062a \u062f\u0648\u0628\u0627\u0631\u0647 \u0641\u0639\u0627\u0644 \u0627\u0633\u062a.');\n      isBlocked = false; // \u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u062d\u0627\u0644\u062a \u0639\u0627\u062f\u06cc\n      return; // \u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u0639\u0642\u0628\n    }\n\n    // \u0627\u06af\u0631 \u0628\u0627\u06cc\u062f \u062f\u06a9\u0645\u0647 \u0628\u0627\u0632\u06af\u0634\u062a \u0645\u0633\u062f\u0648\u062f \u0634\u0648\u062f\n    if (shouldBlockBackButton) {\n      console.log('\u0634\u0631\u0637 \u0628\u0631\u0642\u0631\u0627\u0631 \u0627\u0633\u062a! \u062f\u06a9\u0645\u0647 \u0628\u0627\u0632\u06af\u0634\u062a \u0645\u0633\u062f\u0648\u062f \u0645\u06cc\u200c\u0634\u0648\u062f.');\n      event.preventDefault(); // \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u0627\u0632 \u0628\u0627\u0632\u06af\u0634\u062a\n      isBlocked = true; // \u0645\u0633\u062f\u0648\u062f \u06a9\u0631\u062f\u0646 \u062f\u06a9\u0645\u0647 \u0628\u0631\u0627\u06cc \u06cc\u06a9 \u0628\u0627\u0631\n    } else {\n      console.log('\u0634\u0631\u0637 \u0628\u0631\u0642\u0631\u0627\u0631 \u0646\u06cc\u0633\u062a\u060c \u0628\u0627\u0632\u06af\u0634\u062a \u0627\u0646\u062c\u0627\u0645 \u0645\u06cc\u200c\u0634\u0648\u062f.');\n    }\n  });\n</script>\n"
            }
          />

          <div
            className={classNames(projectcss.all, sty.freeBox__gtTgm, {
              [sty.freeBoxdark__gtTgmWxKc]: hasVariant($state, "dark", "dark")
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__xncuu)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.history.back();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__ndRvM, {
                  [sty.imgdark__ndRvMWxKc]: hasVariant($state, "dark", "dark")
                })}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"20px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/liom_hamyar/images/image38.svg",
                  fullWidth: 24,
                  fullHeight: 24,
                  aspectRatio: 1
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ztJk,
                  {
                    [sty.textdark__ztJkWxKc]: hasVariant($state, "dark", "dark")
                  }
                )}
              >
                {
                  "\u0645\u062d\u0627\u0633\u0628\u0647 \u0633\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc"
                }
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__iYjR)}>
            <div className={classNames(projectcss.all, sty.freeBox___8Nyjy)}>
              <div className={classNames(projectcss.all, sty.freeBox___7E4Xg)}>
                <div className={classNames(projectcss.all, sty.freeBox__zqrQp)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ni1LU)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__np8V2)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      height={"250"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return (() => {
                            var week;
                            if ($state.agePregnant.week + 1 < 10)
                              week = "0" + ($state.agePregnant.week + 1);
                            else week = "" + ($state.agePregnant.week + 1);
                            return (
                              "https://liom.storage.c2.liara.space/config/pregnancy/week" +
                              week +
                              ".png"
                            );
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      width={"250"}
                    />
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__i2S2Z)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kIe9H
                      )}
                    >
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            return $state.agePregnant.week > 0
                              ? "سن بارداری شما <b>" +
                                  $state.agePregnant.week +
                                  "</b> هفته و <b>" +
                                  $state.agePregnant.day +
                                  "</b> روز می‌باشد."
                              : "سن بارداری شما <b>" +
                                  $state.agePregnant.day +
                                  "</b> روز می‌باشد.";
                          })()
                        }}
                      />
                    </div>
                  </Stack__>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wwPwF)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vF5Zh)}
                    >
                      {(() => {
                        try {
                          return true;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lBkoh
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__tmwm
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dd7Uy
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      " هفته " +
                                      ($state.agePregnant.week + 1) +
                                      " بارداری "
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </div>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wkQRw
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__l4Fj
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  var emoji;
                                  var random = Math.floor(Math.random() * 4);
                                  switch (random) {
                                    case 0:
                                      emoji = "\uD83D\uDE0D";
                                      break;
                                    case 1:
                                      emoji = "\uD83D\uDE00";
                                      break;
                                    case 2:
                                      emoji = "\uD83D\uDE18";
                                      break;
                                    case 3:
                                      emoji = "\u2763️";
                                      break;
                                  }
                                  return (
                                    "فرزندت این هفته اندازه یک " +
                                    $state.sizeByFruit[
                                      $state.agePregnant.week + 1
                                    ] +
                                    " است " +
                                    emoji
                                  );
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__orysH
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oV5Xj
                          )}
                        >
                          <Icon230Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__wUpJ
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rJ5Bn
                            )}
                          >
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return (
                                      "وزن فرزندت : " +
                                      ($state.agePregnant.week >= 27
                                        ? "<b> kg </b>"
                                        : "<b> g <b/>") +
                                      $state.babySize[$state.agePregnant.week].w
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          </div>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__urD9W
                          )}
                        >
                          <Icon229Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__wfFwu
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9C7Dq
                            )}
                          >
                            <div
                              className={projectcss.__wab_expr_html_text}
                              dangerouslySetInnerHTML={{
                                __html: (() => {
                                  try {
                                    return (
                                      "قد فرزندت : " +
                                      $state.babySize[$state.agePregnant.week]
                                        .h +
                                      "<b> cm </b>"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()
                              }}
                            />
                          </div>
                        </Stack__>
                      </Stack__>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__nfrV)}>
              <div className={classNames(projectcss.all, sty.freeBox__jbisP)}>
                <Button
                  data-plasmic-name={"button3"}
                  data-plasmic-override={overrides.button3}
                  className={classNames("__wab_instance", sty.button3)}
                  color={generateStateValueProp($state, ["button3", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToAgePregnant"] = true
                      ? (() => {
                          const actionArgs = { destination: `/age-pregnant` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToAgePregnant"] != null &&
                      typeof $steps["goToAgePregnant"] === "object" &&
                      typeof $steps["goToAgePregnant"].then === "function"
                    ) {
                      $steps["goToAgePregnant"] = await $steps[
                        "goToAgePregnant"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button3", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <React.Fragment>{"محاسبه مجدد"}</React.Fragment>
                </Button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button3"],
  button3: ["button3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button3: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicResultAgePregnant__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicResultAgePregnant__VariantsArgs;
    args?: PlasmicResultAgePregnant__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicResultAgePregnant__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicResultAgePregnant__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicResultAgePregnant__ArgProps,
          internalVariantPropNames: PlasmicResultAgePregnant__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicResultAgePregnant__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResultAgePregnant";
  } else {
    func.displayName = `PlasmicResultAgePregnant.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "suVPi77vb6vv9K5rYJwyxC"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicResultAgePregnant = Object.assign(
  // Top-level PlasmicResultAgePregnant renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    button3: makeNodeComponent("button3"),

    // Metadata about props expected for PlasmicResultAgePregnant
    internalVariantProps: PlasmicResultAgePregnant__VariantProps,
    internalArgProps: PlasmicResultAgePregnant__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicResultAgePregnant;
/* prettier-ignore-end */
