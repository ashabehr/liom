/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: DuWIegJ6qGVC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Dialog } from "@plasmicpkgs/radix-ui";
import Button from "../../Button"; // plasmic-import: ErJEaLhimwjN/component
import { DialogContent } from "@plasmicpkgs/radix-ui";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: GNNZ3K7lFVGd/codeComponent
import { DialogTitle } from "@plasmicpkgs/radix-ui";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { DialogClose } from "@plasmicpkgs/radix-ui";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicDialog2.module.css"; // plasmic-import: DuWIegJ6qGVC/css

import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: Wm-tjDMQJVfn/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: DnjmD0szshuz/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: _FBld6r6XP7e/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: V1QgQzmgWP2T/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: rMWZc9fpVIkj/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: H9d2pdUvXD_1/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: oNIrT_jmAMSE/icon

createPlasmicElementProxy;

export type PlasmicDialog2__VariantMembers = {};
export type PlasmicDialog2__VariantsArgs = {};
type VariantPropType = keyof PlasmicDialog2__VariantsArgs;
export const PlasmicDialog2__VariantProps = new Array<VariantPropType>();

export type PlasmicDialog2__ArgsType = {
  children?: React.ReactNode;
  opendialog?: boolean;
  onOpendialogChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicDialog2__ArgsType;
export const PlasmicDialog2__ArgProps = new Array<ArgPropType>(
  "children",
  "opendialog",
  "onOpendialogChange"
);

export type PlasmicDialog2__OverridesType = {
  dialog3?: Flex__<typeof Dialog>;
  button3?: Flex__<typeof Button>;
  dialogContent?: Flex__<typeof DialogContent>;
  dialogClose?: Flex__<typeof DialogClose>;
};

export interface DefaultDialog2Props {
  children?: React.ReactNode;
  opendialog?: boolean;
  onOpendialogChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDialog2__RenderFunc(props: {
  variants: PlasmicDialog2__VariantsArgs;
  args: PlasmicDialog2__ArgsType;
  overrides: PlasmicDialog2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialog3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.opendialog;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "opendialog",
        type: "writable",
        variableType: "boolean",

        valueProp: "opendialog",
        onChangeProp: "onOpendialogChange"
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button3.load",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button3.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();

  return (
    <Dialog
      data-plasmic-name={"dialog3"}
      data-plasmic-override={overrides.dialog3}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        sty.dialog3
      )}
      defaultOpen={(() => {
        try {
          return $state.opendialog;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["dialog3", "open"]).apply(
          null,
          eventArgs
        );

        (async open => {
          const $steps = {};

          $steps["updateOpendialog"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["opendialog"]
                  },
                  operation: 4
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  const oldValue = $stateGet(objRoot, variablePath);
                  $stateSet(objRoot, variablePath, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateOpendialog"] != null &&
            typeof $steps["updateOpendialog"] === "object" &&
            typeof $steps["updateOpendialog"].then === "function"
          ) {
            $steps["updateOpendialog"] = await $steps["updateOpendialog"];
          }
        }).apply(null, eventArgs);
      }}
      open={generateStateValueProp($state, ["dialog3", "open"])}
      overlayClassName={classNames({
        [sty["pcls_4m5ZnIvuwTgf"]]: true,
        [sty["pcls_jzAVa5C9LN1O"]]: hasVariant(
          globalVariants,
          "screen",
          "mobile"
        )
      })}
      themeResetClass={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components
      )}
      triggerSlot={
        <Button
          data-plasmic-name={"button3"}
          data-plasmic-override={overrides.button3}
          className={classNames("__wab_instance", sty.button3)}
          color={generateStateValueProp($state, ["button3", "color"])}
          endIcon={
            <ChevronLeftIcon
              className={classNames(projectcss.all, sty.svg__kLeoh)}
              role={"img"}
            />
          }
          load={generateStateValueProp($state, ["button3", "load"])}
          loading={generateStateValueProp($state, ["button3", "loading"])}
          onColorChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["button3", "color"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLoadChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["button3", "load"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLoadingChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["button3", "loading"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          startIcon={
            <ChevronRightIcon
              className={classNames(projectcss.all, sty.svg__gwjqb)}
              role={"img"}
            />
          }
        />
      }
    >
      <DialogContent
        data-plasmic-name={"dialogContent"}
        data-plasmic-override={overrides.dialogContent}
        className={classNames("__wab_instance", sty.dialogContent)}
        enterAnimations={
          hasVariant(globalVariants, "screen", "mobile")
            ? ["slide-in-from-bottom"]
            : ["zoom-enter", "fade-in"]
        }
        enterDuration={0.5}
        exitAnimations={
          hasVariant(globalVariants, "screen", "mobile")
            ? ["slide-out-to-bottom"]
            : ["zoom-exit", "fade-out"]
        }
        exitDuration={0.5}
        themeResetClass={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames,
          styleTokensClassNames_antd_5_hostless,
          styleTokensClassNames_plasmic_rich_components
        )}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <ApiRequest
              className={classNames(
                "__wab_instance",
                sty.fragmentApiRequest__bv6Qt
              )}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lDt7G
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={
                <div className={classNames(projectcss.all, sty.freeBox__c5LKf)}>
                  <Icon115Icon
                    className={classNames(projectcss.all, sty.svg__so2Wl)}
                    role={"img"}
                  />
                </div>
              }
              method={"GET"}
              shouldFetch={true}
            >
              <div className={classNames(projectcss.all, sty.freeBox__hEhcz)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__azw9M)}
                  dir={"rtl"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gNzzR)}
                  />

                  <DialogTitle
                    className={classNames(
                      "__wab_instance",
                      sty.dialogTitle__dHMo
                    )}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        sty.h5__tm7th
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__knbnu
                        )}
                      >
                        {"Dialog title"}
                      </div>
                    </h5>
                  </DialogTitle>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__aY7Zd)}
                  dir={"rtl"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___83Unk
                    )}
                  >
                    {"You can insert dialog body content here in this slot."}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___883X)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__diXrG)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1DdkL
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tUkR1
                          )}
                        >
                          {
                            "\ud83c\udf39 \u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646 \ud83c\udf39"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__o9JWp
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gxtuc
                          )}
                        >
                          {"Enter some text"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__z2Ta4
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__en8Ka
                            )}
                          >
                            {"Enter some text"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cqRs2
                            )}
                          >
                            {"Enter some text"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ijnB
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yvkno
                            )}
                          >
                            {"1"}
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lfjGg
                        )}
                      >
                        {
                          "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zc9Hz
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zYmvP
                          )}
                        >
                          {(() => {
                            const child$Props = {
                              allowClear: false,
                              autoFocus: false,
                              bordered: false,
                              className: classNames(
                                "__wab_instance",
                                sty.input__fazjJ
                              ),
                              disabled: false,
                              placeholder:
                                "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f",
                              prefix: (
                                <Icon10Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__rQthq
                                  )}
                                  role={"img"}
                                />
                              ),

                              readOnly: false,
                              size: "small",
                              suffix: null
                            };

                            return <AntdInput {...child$Props} />;
                          })()}
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__cfn
                            )}
                          />
                        </div>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__ccn1W
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dAk53
                            )}
                          >
                            {"\u062a\u0627\u06cc\u06cc\u062f"}
                          </div>
                        </Button>
                      </div>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__bvCnn
                        )}
                        endIcon={
                          <Icon12Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__guDvu
                            )}
                            role={"img"}
                          />
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nyZlw
                          )}
                        >
                          {
                            "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647"
                          }
                        </div>
                      </Button>
                      <p
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.p___489Kd
                        )}
                      >
                        {
                          "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                        }
                      </p>
                      <p
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.p___86NRy
                        )}
                      >
                        {
                          "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                        }
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </ApiRequest>
          ),
          value: args.children
        })}
        <DialogClose
          data-plasmic-name={"dialogClose"}
          data-plasmic-override={overrides.dialogClose}
          className={classNames("__wab_instance", sty.dialogClose)}
        >
          <XIcon
            className={classNames(projectcss.all, sty.svg__ew66I)}
            role={"img"}
          />
        </DialogClose>
      </DialogContent>
    </Dialog>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  dialog3: ["dialog3", "button3", "dialogContent", "dialogClose"],
  button3: ["button3"],
  dialogContent: ["dialogContent", "dialogClose"],
  dialogClose: ["dialogClose"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  dialog3: typeof Dialog;
  button3: typeof Button;
  dialogContent: typeof DialogContent;
  dialogClose: typeof DialogClose;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDialog2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDialog2__VariantsArgs;
    args?: PlasmicDialog2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDialog2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDialog2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDialog2__ArgProps,
          internalVariantPropNames: PlasmicDialog2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDialog2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "dialog3") {
    func.displayName = "PlasmicDialog2";
  } else {
    func.displayName = `PlasmicDialog2.${nodeName}`;
  }
  return func;
}

export const PlasmicDialog2 = Object.assign(
  // Top-level PlasmicDialog2 renders the root element
  makeNodeComponent("dialog3"),
  {
    // Helper components rendering sub-elements
    button3: makeNodeComponent("button3"),
    dialogContent: makeNodeComponent("dialogContent"),
    dialogClose: makeNodeComponent("dialogClose"),

    // Metadata about props expected for PlasmicDialog2
    internalVariantProps: PlasmicDialog2__VariantProps,
    internalArgProps: PlasmicDialog2__ArgProps
  }
);

export default PlasmicDialog2;
/* prettier-ignore-end */
