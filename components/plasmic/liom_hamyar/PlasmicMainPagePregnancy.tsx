/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: suVPi77vb6vv9K5rYJwyxC
// Component: R1I9CE3VIFc0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import ComponentPregnancy from "../../ComponentPregnancy"; // plasmic-import: 8wHhlRtqpYtU/component
import ToolsComponent from "../../ToolsComponent"; // plasmic-import: TGSOhksfnMdG/component
import { Iframe } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: suVPi77vb6vv9K5rYJwyxC/projectcss
import sty from "./PlasmicMainPagePregnancy.module.css"; // plasmic-import: R1I9CE3VIFc0/css

createPlasmicElementProxy;

export type PlasmicMainPagePregnancy__VariantMembers = {
  page: "calendar" | "tools" | "chatBot";
};
export type PlasmicMainPagePregnancy__VariantsArgs = {
  page?: SingleChoiceArg<"calendar" | "tools" | "chatBot">;
};
type VariantPropType = keyof PlasmicMainPagePregnancy__VariantsArgs;
export const PlasmicMainPagePregnancy__VariantProps =
  new Array<VariantPropType>("page");

export type PlasmicMainPagePregnancy__ArgsType = {
  setting?: () => void;
  editTime?: string;
  onEditTimeChange?: (val: string) => void;
  userInfo?: any;
  onUserInfoChange?: (val: string) => void;
  token?: string;
  onTokenChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicMainPagePregnancy__ArgsType;
export const PlasmicMainPagePregnancy__ArgProps = new Array<ArgPropType>(
  "setting",
  "editTime",
  "onEditTimeChange",
  "userInfo",
  "onUserInfoChange",
  "token",
  "onTokenChange"
);

export type PlasmicMainPagePregnancy__OverridesType = {
  root?: Flex__<"div">;
  componentPregnancy?: Flex__<typeof ComponentPregnancy>;
  toolsComponent?: Flex__<typeof ToolsComponent>;
  section?: Flex__<"section">;
  iframe?: Flex__<typeof Iframe>;
};

export interface DefaultMainPagePregnancyProps {
  setting?: () => void;
  editTime?: string;
  onEditTimeChange?: (val: string) => void;
  userInfo?: any;
  onUserInfoChange?: (val: string) => void;
  token?: string;
  onTokenChange?: (val: string) => void;
  page?: SingleChoiceArg<"calendar" | "tools" | "chatBot">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMainPagePregnancy__RenderFunc(props: {
  variants: PlasmicMainPagePregnancy__VariantsArgs;
  args: PlasmicMainPagePregnancy__ArgsType;
  overrides: PlasmicMainPagePregnancy__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "page",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.page
      },
      {
        path: "editTime",
        type: "writable",
        variableType: "text",

        valueProp: "editTime",
        onChangeProp: "onEditTimeChange"
      },
      {
        path: "userInfo",
        type: "writable",
        variableType: "object",

        valueProp: "userInfo",
        onChangeProp: "onUserInfoChange"
      },
      {
        path: "token",
        type: "writable",
        variableType: "text",

        valueProp: "token",
        onChangeProp: "onTokenChange"
      },
      {
        path: "componentPregnancy.weeksPregnant",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root,
        {
          [sty.rootpage_calendar]: hasVariant($state, "page", "calendar"),
          [sty.rootpage_chatBot]: hasVariant($state, "page", "chatBot"),
          [sty.rootpage_tools]: hasVariant($state, "page", "tools")
        }
      )}
    >
      <Reveal
        className={classNames("__wab_instance", sty.reveal___6VEqv, {
          [sty.revealpage_calendar___6VEqvu9P3]: hasVariant(
            $state,
            "page",
            "calendar"
          ),
          [sty.revealpage_chatBot___6VEqveNavj]: hasVariant(
            $state,
            "page",
            "chatBot"
          ),
          [sty.revealpage_tools___6VEqVwGbWf]: hasVariant(
            $state,
            "page",
            "tools"
          )
        })}
        damping={0.2}
        effect={hasVariant($state, "page", "calendar") ? "fade" : "fade"}
        triggerOnce={true}
      >
        <ComponentPregnancy
          data-plasmic-name={"componentPregnancy"}
          data-plasmic-override={overrides.componentPregnancy}
          className={classNames("__wab_instance", sty.componentPregnancy, {
            [sty.componentPregnancypage_calendar]: hasVariant(
              $state,
              "page",
              "calendar"
            ),
            [sty.componentPregnancypage_chatBot]: hasVariant(
              $state,
              "page",
              "chatBot"
            ),
            [sty.componentPregnancypage_tools]: hasVariant(
              $state,
              "page",
              "tools"
            )
          })}
          onWeeksPregnantChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "componentPregnancy",
              "weeksPregnant"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        />
      </Reveal>
      <Reveal
        className={classNames("__wab_instance", sty.reveal__hoBkd, {
          [sty.revealpage_calendar__hoBkdU9P3]: hasVariant(
            $state,
            "page",
            "calendar"
          ),
          [sty.revealpage_tools__hoBkdwGbWf]: hasVariant(
            $state,
            "page",
            "tools"
          )
        })}
        damping={0.2}
        effect={"fade"}
        triggerOnce={true}
      >
        <ToolsComponent
          data-plasmic-name={"toolsComponent"}
          data-plasmic-override={overrides.toolsComponent}
          className={classNames("__wab_instance", sty.toolsComponent, {
            [sty.toolsComponentpage_tools]: hasVariant($state, "page", "tools")
          })}
          token={(() => {
            try {
              return $state.token;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </Reveal>
      <Reveal
        className={classNames("__wab_instance", sty.reveal__zw29, {
          [sty.revealpage_calendar__zw29U9P3]: hasVariant(
            $state,
            "page",
            "calendar"
          ),
          [sty.revealpage_chatBot__zw29ENavj]: hasVariant(
            $state,
            "page",
            "chatBot"
          ),
          [sty.revealpage_tools__zw29WGbWf]: hasVariant($state, "page", "tools")
        })}
        damping={0.2}
        effect={"fade"}
        triggerOnce={true}
      >
        <section
          data-plasmic-name={"section"}
          data-plasmic-override={overrides.section}
          className={classNames(projectcss.all, sty.section, {
            [sty.sectionpage_chatBot]: hasVariant($state, "page", "chatBot")
          })}
        >
          <Iframe
            data-plasmic-name={"iframe"}
            data-plasmic-override={overrides.iframe}
            className={classNames("__wab_instance", sty.iframe, {
              [sty.iframepage_chatBot]: hasVariant($state, "page", "chatBot"),
              [sty.iframepage_tools]: hasVariant($state, "page", "tools")
            })}
            src={(() => {
              try {
                return (
                  "https://tools.liom.app/chat-bot/?origin_user_id=" +
                  $state?.userInfo.id +
                  "&topic=pregnancyWeek" +
                  $state.componentPregnancy.weeksPregnant +
                  "&token=" +
                  $state.token
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            srcDoc={"<div><h3>Heading</h3><p>Example text...</p></div>"}
            useHtml={false}
          />
        </section>
      </Reveal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "componentPregnancy", "toolsComponent", "section", "iframe"],
  componentPregnancy: ["componentPregnancy"],
  toolsComponent: ["toolsComponent"],
  section: ["section", "iframe"],
  iframe: ["iframe"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  componentPregnancy: typeof ComponentPregnancy;
  toolsComponent: typeof ToolsComponent;
  section: "section";
  iframe: typeof Iframe;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMainPagePregnancy__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMainPagePregnancy__VariantsArgs;
    args?: PlasmicMainPagePregnancy__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMainPagePregnancy__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMainPagePregnancy__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMainPagePregnancy__ArgProps,
          internalVariantPropNames: PlasmicMainPagePregnancy__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMainPagePregnancy__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMainPagePregnancy";
  } else {
    func.displayName = `PlasmicMainPagePregnancy.${nodeName}`;
  }
  return func;
}

export const PlasmicMainPagePregnancy = Object.assign(
  // Top-level PlasmicMainPagePregnancy renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    componentPregnancy: makeNodeComponent("componentPregnancy"),
    toolsComponent: makeNodeComponent("toolsComponent"),
    section: makeNodeComponent("section"),
    iframe: makeNodeComponent("iframe"),

    // Metadata about props expected for PlasmicMainPagePregnancy
    internalVariantProps: PlasmicMainPagePregnancy__VariantProps,
    internalArgProps: PlasmicMainPagePregnancy__ArgProps
  }
);

export default PlasmicMainPagePregnancy;
/* prettier-ignore-end */
